AutoGen Definitions dummy;
struct = {
  cp-id     = 'struct_q_active';
  cp-name   = 'QActive';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'struct_q_hsm';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'struct_q_ticker';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'struct_q_x_thread';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'protected-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a13edf5eeb78176195720ac88bf70b3ef';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_ctor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initial';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '302';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
protected "constructor" of an ::QActive active object

Performs the first step of active object initialization by assigning
the virtual pointer and calling the superclass constructor.

@param [in,out] me       pointer (see @ref oop)
@param [in]     initial  pointer to the event to be dispatched to the MSM

@note  Must be called only <strong>once</strong> before QMSM_INIT().
@sa QMsm_ctor() and QHsm_ctor()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1aba82a935c94a8c3cf9b062eed5fc85e5';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_stop';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '315';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Stops execution of an active object and removes it from the
framework's supervision.


@attention
QActive_stop() must be called only from the AO that is about
to stop its execution. By that time, any pointers or references
to the AO are considered invalid (dangling) and it becomes
illegal for the rest of the application to post events to the AO.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1ae2510a52f1185e2561fa78323983c04d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_subscribe';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
enum_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sig';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '321';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Subscribes for delivery of signal @p sig to the active object @p me.

This function is part of the Publish-Subscribe event delivery mechanism
available in QF. Subscribing to an event means that the framework will
start posting all published events with a given signal @p sig to the
event queue of the active object @p me.

@param [in,out] me  pointer (see @ref oop)
@param [in]     sig event signal to subscribe

@par Usage
The following example shows how the Table active object subscribes
to three signals in the initial transition:
@include qf_subscribe.c

@sa
QF_publish_(), QActive_unsubscribe(), and QActive_unsubscribeAll()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a0cf08b1345a60cb4cd2d580f448f819d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_unsubscribe';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
enum_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sig';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '326';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Un-subscribes from the delivery of signal @p sig to the AO @p me.

This function is part of the Publish-Subscribe event delivery mechanism
available in QF. Un-subscribing from an event means that the framework
will stop posting published events with a given signal @p sig to the
event queue of the active object @p me.

@param [in] me  pointer (see @ref oop)
@param [in] sig event signal to unsubscribe

@note
Due to the latency of event queues, an active object should NOT
assume that a given signal @p sig will never be dispatched to the
state machine of the active object after un-subscribing from that signal.
The event might be already in the queue, or just about to be posted
and the un-subscribe operation will not flush such events.

@note
Un-subscribing from a signal that has never been subscribed in the
first place is considered an error and QF will raise an assertion.

@sa
QF_publish_(), QActive_subscribe(), and QActive_unsubscribeAll()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1aec64ea18ec1909aa5ce20ca1c154bea4';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_unsubscribeAll';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '331';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Un-subscribes from the delivery of all signals to the AO @p me.

This function is part of the Publish-Subscribe event delivery mechanism
available in QF. Un-subscribing from all events means that the framework
will stop posting any published events to the event queue of the active
object @p me.

@param [in] me  pointer (see @ref oop)

@note
Due to the latency of event queues, an active object should NOT
assume that no events will ever be dispatched to the state machine of
the active object after un-subscribing from all events.
The events might be already in the queue, or just about to be posted
and the un-subscribe operation will not flush such events. Also, the
alternative event-delivery mechanisms, such as direct event posting or
time events, can be still delivered to the event queue of the active
object.

@sa
QF_publish_(), QActive_subscribe(), and QActive_unsubscribe()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a57469f44aa23b185fbe4688f35a1a090';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_defer';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'eq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '336';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Defer an event @p e to a given event queue @p eq.

This function is part of the event deferral support. An active object
uses this function to defer an event @p e to the QF-supported native
event queue @p eq. QF correctly accounts for another outstanding
reference to the event and will not recycle the event at the end of
the RTC step. Later, the active object might recall one event at a
time from the event queue.

@param [in,out] me  pointer (see @ref oop)
@param [in]     eq  pointer to a "raw" thread-safe queue to recall
                   an event from.
@param [in]     e   pointer to the event to be deferred

@returns
'true' (success) when the event could be deferred and 'false' (failure)
if event deferral failed due to overflowing the queue.

An active object can use multiple event queues to defer events of
different kinds.

@sa
QActive_recall(), QEQueue, QActive_flushDeferred()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a2036d245c002aae06a8a0bb28799d45f';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_recall';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'eq';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '342';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Recall a deferred event from a given event queue @p eq.

This function is part of the event deferral support. An active object
uses this function to recall a deferred event from a given QF
event queue. Recalling an event means that it is removed from the
deferred event queue @p eq and posted (LIFO) to the event queue of
the active object.

@param [in,out] me  pointer (see @ref oop)
@param [in]     eq  pointer to a "raw" thread-safe queue to recall
                   an event from.
@returns
'true' if an event has been recalled and 'false' if not.

@note
An active object can use multiple event queues to defer events of
different kinds.

@sa
QActive_recall(), ::QEQueue, QACTIVE_POST_LIFO()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1ad408065e3bbdde9ed07403432a5ba5c4';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_flushDeferred';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'eq';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '347';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Flush the specified deferred queue @p eq.

This function is part of the event deferral support. An active object
can use this function to flush a given QF event queue. The function makes
sure that the events are not leaked.

@param [in,out] me  pointer (see @ref oop)
@param [in]     eq  pointer to a "raw" thread-safe queue to flush.

@returns
the number of events actually flushed from the queue.

@sa
QActive_defer(), QActive_recall(), QEQueue
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a4cbac2dae55570a9bca8a4d6f1f72bd1';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_setAttr';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'attr1';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'attr2';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '353';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Generic setting of additional attributes (useful in QP ports)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_active_1a292a76f05e6800a383c7615b4c88cd0e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QHsm
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '107';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
inherits ::QHsm 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a1a81b9fd06d9c0aa5dea32d194f0552b';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_post_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'margin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sender';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      sec-mem-desc-line = '85';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Direct event posting is the simplest asynchronous communication method
available in QF.

@param [in,out] me     pointer (see @ref oop)
@param [in]     e      pointer to the event to be posted
@param [in]     margin number of required free slots in the queue after
                      posting the event. The special value #QF_NO_MARGIN
                      means that this function will assert if posting fails.
@param [in]     sender pointer to a sender object (used only for QS tracing)

@returns
'true' (success) if the posting succeeded (with the provided margin) and
'false' (failure) when the posting fails.

@note
The #QF_NO_MARGIN value of the @p margin parameter is special and denotes
situation when the post() operation is assumed to succeed (event delivery
guarantee). An assertion fires, when the event cannot be delivered in this
case.

@attention
This function should be called only via the macro QACTIVE_POST()
or QACTIVE_POST_X().

@par Usage
@include qf_post.c

@sa QActive_post_(), QActive_postLIFO()

Prototype of the internal active object post (FIFO) implementation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a3a129f47e6d0c75c11a8902f8137f007';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_postLIFO_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      sec-mem-desc-line = '223';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
posts an event to the event queue of the active object @p me using the
Last-In-First-Out (LIFO) policy.

@note
The LIFO policy should be used only for self-posting and with caution,
because it alters order of events in the queue.

@param [in] me pointer (see @ref oop)
@param [in] e  pointer to the event to post to the queue

@attention
This function should be called only via the macro QACTIVE_POST_LIFO().

@sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()

Prototype of the internal active object post LIFO implementation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a20693c3fc2f026fd61539f4a6a81716e';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_get_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      sec-mem-desc-line = '312';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The behavior of this function depends on the kernel/OS used in the QF port.
For built-in kernels (QV or QK) the function can be called only when
the queue is not empty, so it doesn't block. For a blocking kernel/OS
the function can block and wait for delivery of an event.

@param [in,out] me  pointer (see @ref oop)

@returns
a pointer to the received event. The returned pointer is guaranteed to be
valid (can't be NULL).

@note
This function is used internally by a QF port to extract events from
the event queue of an active object. This function depends on the event
queue implementation and is sometimes customized in the QF port
(file qf_port.h). Depending on the definition of the macro
QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
no events are available.

Get an event from the event queue of an active object.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_1a79d6304a4324086ed30a6f145625ab78';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActive_start_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'prio';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qLen';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stkSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stkSize';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'par';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '88';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_active_1acc0b27a6740f03639727be452f1e6b83';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'prio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '151';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QF priority (1..#QF_MAX_ACTIVE) of this active object. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qf.h';
  cp-fileline  = '106';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Active Object base class (based on ::QHsm implementation)

\ilinebr\ilinebr 
Active objects in QP are encapsulated state machines (each embedding an
event queue and a thread) that communicate with one another asynchronously
by sending and receiving events. Within an active object, events are
processed sequentially in a run-to-completion (RTC) fashion, while QF
encapsulates all the details of thread-safe event exchange and queuing.
@n@n
::QActive represents an active object that uses the QHsm-style
implementation strategy for state machines. This strategy is tailored
to manual coding, but it is also supported by the QM modeling tool.
The resulting code is slower than in the ::QMsm style implementation
strategy.

@par Usage
The following example illustrates how to derive an active object from
::QActive. Please note that the ::QActive member @c super is defined as the
<strong>first</strong> member of the derived struct (see @ref oop).
@include qf_qactive.c
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QTicker';
        node-link = {
          node-link-id = 'struct_q_ticker';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '5';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '1';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_active_dummy';
  cp-name   = 'QActiveDummy';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1a0d9b8efde470fdafa8fa2be1914f3d83';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActiveDummy_ctor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActiveDummy *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1069';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Constructor of the QActiveDummy Active Object class

"constructor" of QActiveDummy
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_active_dummy_1a13b6e44ab7e34319675593c31497a9cf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActive
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1063';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1a28283109e182655dc8e9cc855f4e166d';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsmDummy_init_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'par';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '131';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1a998bdbad91557f8bd0ba0fb559968e20';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsmDummy_dispatch_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '145';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1ab722882d297746e9b5da1fab7e7f3be4';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActiveDummy_start_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'prio';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qLen';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stkSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stkSize';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'par';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '192';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1a4738b38bc8895ae8046badea54423401';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActiveDummy_init_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'par';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '224';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1ac5136d965b679a96a04b104378c10c48';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActiveDummy_dispatch_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '233';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1a992b92b4f30d9c45acb4a24532eafc72';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActiveDummy_post_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'margin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sender';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '242';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_active_dummy_1a7b81145b0a84b94859e816873e050003';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QActiveDummy_postLIFO_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      sec-mem-desc-line = '296';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qs.h';
  cp-fileline  = '1062';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
QActiveDummy Object class
\ilinebr\ilinebr 
QActiveDummy is a test double for the role of collaborating active
objects in QUTest unit testing.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QActiveDummy';
        node-link = {
          node-link-id = 'struct_q_active_dummy';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '6';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_active_vtable';
  cp-name   = 'QActiveVtable';
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_active_vtable_1a9803776e00bffaa106b37b76202ce237';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QHsmVtable
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '157';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
inherits ::QHsmVtable 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_active_vtable_1a450451a49aed1f34360102ee4674c7e8';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'start';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '162';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
virtual function to start the AO/thread
@sa QACTIVE_START()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_active_vtable_1a8b5b9aacb0bfd2a2904d2df61ee88a4b';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool(*
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'post';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '172';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
virtual function to asynchronously post (FIFO)
an event to the AO
@sa QACTIVE_POST() and QACTIVE_POST_X()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_active_vtable_1aeea0d09f55a8e3b006d73690155803eb';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'postLIFO';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '183';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
virtual function to asynchronously post (LIFO)
an event to the AO
@sa QACTIVE_POST_LIFO()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qf.h';
  cp-fileline  = '156';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Virtual table for the ::QActive class 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QActiveVtable';
        node-link = {
          node-link-id = 'struct_q_active_vtable';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'class_q_actvie';
  cp-name   = 'QActvie';
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'struct_q_m_active';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-filename  = 'C:/qp-dev/qpc/include/qf.h';
  cp-fileline  = '379';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QActvie';
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QMActive';
        node-link = {
          node-link-id = 'struct_q_m_active';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QActvie';
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'struct_q_e_queue';
  cp-name   = 'QEQueue';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_e_queue_1aecfc240f320a21985675c5e295d5c246';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QEQueue_init';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qLen';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_qeq.c';
      sec-mem-desc-line = '65';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initialize the event queue by giving it the storage for the ring buffer.

@param [in,out] me   pointer (see @ref oop)
@param [in]     qSto an array of pointers to ::QEvt to sereve as the
                    ring buffer for the event queue
@param [in]     qLen the length of the @p qSto buffer (in ::QEvt pointers)

@note The actual capacity of the queue is qLen + 1, because of the extra
location forntEvt.

@note
This function is also used to initialize the event queues of active
objects in the built-int QV and QK kernels, as well as other
QP ports to OSes/RTOSes that do provide a suitable message queue.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_e_queue_1aa5e9a98512fbf3414be7ab72895d8e65';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QEQueue_post';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'margin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_qeq.c';
      sec-mem-desc-line = '104';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Post an event to the "raw" thread-safe event queue using the
First-In-First-Out (FIFO) order.

@param [in,out] me     pointer (see @ref oop)
@param [in]     e      pointer to the event to be posted to the queue
@param [in]     margin number of required free slots in the queue after
                      posting the event. The special value #QF_NO_MARGIN
                      means that this function will assert if posting
@note
The #QF_NO_MARGIN value of the @p margin parameter is special and
denotes situation when the post() operation is assumed to succeed (event
delivery guarantee). An assertion fires, when the event cannot be
delivered in this case.

@returns 'true' (success) when the posting succeeded with the provided
margin and 'false' (failure) when the posting fails.

@note This function can be called from any task context or ISR context.

@sa QEQueue_postLIFO(), QEQueue_get()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_e_queue_1ae94dabfc9f0b3b1de9c81adc9b9c810c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QEQueue_postLIFO';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_qeq.c';
      sec-mem-desc-line = '203';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Post an event to the "raw" thread-safe event queue using the
Last-In-First-Out (LIFO) order.

@param [in,out] me  pointer (see @ref oop)
@param [in]     e   pointer to the event to be posted to the queue

@attention
The LIFO policy should be used only with great <strong>caution</strong>, because
it alters the order of events in the queue.

@note
This function can be called from any task context or ISR context.

@note
this function is used for the "raw" thread-safe queues and <strong>not</strong>
for the queues of active objects.

@sa
QEQueue_post(), QEQueue_get(), QActive_defer()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_e_queue_1a34dc8e9f5211578b4a7b4e45b598bedd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QEQueue_get';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_qeq.c';
      sec-mem-desc-line = '269';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Retrieves an event from the front of the "raw" thread-safe queue and
returns a pointer to this event to the caller.

@param [in,out] me     pointer (see @ref oop)

@returns
pointer to event at the front of the queue, if the queue is
not empty and NULL if the queue is empty.

@note
this function is used for the "raw" thread-safe queues and <strong>not</strong>
for the queues of active objects.

@sa
QEQueue_post(), QEQueue_postLIFO(), QActive_recall()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_e_queue_1a1e8fe1896dec12e7b95cad9d82640eed';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const  *volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'frontEvt';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      sec-mem-desc-line = '130';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to event at the front of the queue.
\ilinebr\ilinebr 
All incoming and outgoing events pass through the frontEvt location.
When the queue is empty (which is most of the time), the extra
frontEvt location allows to bypass the ring buffer altogether,
greatly optimizing the performance of the queue. Only bursts of events
engage the ring buffer.

@note The additional role of this attribute is to indicate the empty
status of the queue. The queue is empty when frontEvt is NULL.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_e_queue_1a5922644db6369d42303ed541e502b998';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const  **
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ring';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      sec-mem-desc-line = '133';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to the start of the ring buffer. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_e_queue_1a3c6fb10fbe468edb5975d8b6b9df00ba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEQueueCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'end';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      sec-mem-desc-line = '136';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset of the end of the ring buffer from the start of the buffer. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_e_queue_1a3a1b93c49812aa00a52fc7eeea93e128';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEQueueCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'head';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      sec-mem-desc-line = '139';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset to where next event will be inserted into the buffer. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_e_queue_1a100a410f4dae51748e461245afd127df';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEQueueCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tail';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      sec-mem-desc-line = '142';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset of where next event will be extracted from the buffer. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_e_queue_1a7334a9abfa37337eadbc276a3b992812';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEQueueCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nFree';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      sec-mem-desc-line = '145';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
number of free events in the ring buffer. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_e_queue_1a5d8963f8b58527c31cc5c88203453de1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEQueueCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nMin';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      sec-mem-desc-line = '153';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
minimum number of free events ever in the ring buffer.
\ilinebr\ilinebr 
this attribute remembers the low-watermark of the ring buffer,
which provides a valuable information for sizing event queues.
@sa QF_getQueueMargin().
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qequeue.h';
  cp-fileline  = '118';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Native QF Event Queue
\ilinebr\ilinebr 
This class describes the native QF event queue, which can be used as
the event queue for active objects, or as a simple "raw" event queue for
thread-safe event passing among non-framework entities, such as ISRs,
device drivers, or other third-party components.@n
@n
The native QF event queue is configured by defining the macro
#QF_EQUEUE_TYPE as ::QEQueue in the specific QF port header file.@n
@n
The ::QEQueue structure contains only data members for managing an event
queue, but does not contain the storage for the queue buffer, which must
be provided externally during the queue initialization.@n
@n
The event queue can store only event pointers, not the whole events. The
internal implementation uses the standard ring-buffer plus one external
location that optimizes the queue operation for the most frequent case
of empty queue.@n
@n
The ::QEQueue structure is used with two sets of functions. One set is for
the active object event queue, which might need to block the active object
task when the event queue is empty and might need to unblock it when
events are posted to the queue. The interface for the native active object
event queue consists of the following functions: QActive_post(),
QActive_postLIFO(), and QActive_get_(). Additionally the function
QEQueue_init() is used to initialize the queue.@n
@n
The other set of functions, uses ::QEQueue as a simple "raw" event
queue to pass events between entities other than active objects, such as
ISRs. The "raw" event queue is not capable of blocking on the get()
operation, but is still thread-safe because it uses QF critical section
to protect its integrity. The interface for the "raw" thread-safe queue
consists of the following functions: QEQueue_post(),
QEQueue_postLIFO(), and QEQueue_get(). Additionally the function
QEQueue_init() is used to initialize the queue.

@note Most event queue operations (both the active object queues and
the "raw" queues) internally use  the QF critical section. You should be
careful not to invoke those operations from other critical sections when
nesting of critical sections is not supported.

@sa ::QEQueue for the description of the data members
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QEQueue';
        node-link = {
          node-link-id = 'struct_q_e_queue';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+frontEvt
+ring
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_evt';
  cp-name   = 'QEvt';
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'struct_q_time_evt';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_evt_1a20b1ceebb91aea39fcbc633aeae6cd3f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSignal
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sig';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '140';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
signal of the event instance
 \xrefitem srs_tr 24.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_evt_1a3b7d04bb1c330faa82e59b947370582b';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'poolId_';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '145';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pool ID (0 for static event)
 \xrefitem srs_tr 25.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_evt_1a877dd7cab201e3fa2fe957ab36a18f2a';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refCtr_';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '150';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
reference counter
 \xrefitem srs_tr 26.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qep.h';
  cp-fileline  = '136';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Event class
\ilinebr\ilinebr 
QEvt represents events without parameters and serves as the base class
for derivation of events with parameters.

 \xrefitem srs_tr 8.

@par Usage
The following example illustrates how to add an event parameter by
derivation of the QEvt class. Please note that the QEvt member
super is defined as the FIRST member of the derived struct.
@include qep_qevt.c
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_f';
  cp-name   = 'QF';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_f_1aff7b59f569ec689a7580bd6911daafd5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dummy';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '527';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1adac7eccb860d910c4e446d3143798bba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_init';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '545';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QF initialization.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a3a20b07a97300a74383cd863cbfd6bc6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_psInit';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSubscrList *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'subscrSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
enum_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'maxSignal';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '550';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Publish-subscribe initialization.

This function initializes the publish-subscribe facilities of QF and must
be called exactly once before any subscriptions/publications occur in
the application.

@param [in] subscrSto pointer to the array of subscriber lists
@param [in] maxSignal the dimension of the subscriber array and at
                     the same time the maximum signal that can be published
                     or subscribed.

The array of subscriber-lists is indexed by signals and provides a mapping
between the signals and subscriber-lists. The subscriber-lists are bitmasks
of type ::QSubscrList, each bit in the bit mask corresponding to the unique
priority of an active object. The size of the ::QSubscrList bit mask
depends on the value of the #QF_MAX_ACTIVE macro.

@note
The publish-subscribe facilities are optional, meaning that you might
choose not to use publish-subscribe. In that case calling QF_psInit()
and using up memory for the subscriber-lists is unnecessary.

@sa ::QSubscrList

@par Usage
The following example shows the typical initialization sequence of QF:
@include qf_main.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a1c4fc5636c2bc2e9d47e958aac05b8e1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_poolInit';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'poolSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast32_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'poolSize';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'evtSize';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '555';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Event pool initialization for dynamic allocation of events.

This function initializes one event pool at a time and must be called
exactly once for each event pool before the pool can be used.

@param [in] poolSto  pointer to the storage for the event pool
@param [in] poolSize size of the storage for the pool in bytes
@param [in] evtSize  the block-size of the pool in bytes, which determines
           the maximum size of events that can be allocated from the pool.

@attention
You might initialize many event pools by making many consecutive calls
to the QF_poolInit() function. However, for the simplicity of the internal
implementation, you must initialize event pools in the <strong>ascending order</strong>
of the event size.

Many RTOSes provide fixed block-size heaps, a.k.a. memory pools that can
be adapted for QF event pools. In case such support is missing, QF provides
a native QF event pool implementation. The macro #QF_EPOOL_TYPE_ determines
the type of event pool used by a particular QF port. See structure ::QMPool
for more information.

@note The actual number of events available in the pool might be actually
less than (@p poolSize / @p evtSize) due to the internal alignment
of the blocks that the pool might perform. You can always check the
capacity of the pool by calling QF_getPoolMin().

@note The dynamic allocation of events is optional, meaning that you
might choose not to use dynamic events. In that case calling QF_poolInit()
and using up memory for the memory blocks is unnecessary.

@sa QF initialization example for QF_init()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a7c89d3e5e55aeeec9175ec95635476ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_poolGetMaxBlockSize';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '561';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain the block size of any registered event pools.

Obtain the block size of any registered event pools
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a779a1bc9482e2d489dc87751cd100fdb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_run';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '566';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Transfers control to QF to run the application.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1adf9cb86740bf55c5ad55c1d44fd35921';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_stop';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '572';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Function invoked by the application layer to stop the QF
application and return control to the OS/Kernel.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a189a6d2ece787717c81fbf51fd180732';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_onStartup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '581';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Startup QF callback.
\ilinebr\ilinebr 
The timeline for calling QF_onStartup() depends on the particular
QF port. In most cases, QF_onStartup() is called from QF_run(), right
before starting any multitasking kernel or the background loop.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a5d7e181f2e679e1fa77c1e915fbee3e0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_onCleanup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '597';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Cleanup QF callback.
\ilinebr\ilinebr 
QF_onCleanup() is called in some QF ports before QF returns to the
underlying operating system or RTOS.

This function is strongly platform-specific and is not implemented in
the QF, but either in the QF port or in the Board Support Package (BSP)
for the given application. Some QF ports might not require implementing
QF_onCleanup() at all, because many embedded applications don't have
anything to exit to.

@sa QF_stop()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a691ef631f5557b516f13f32ca9eb1338';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_noTimeEvtsActiveX';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'tickRate';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '699';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns 'true' if there are no armed time events at a given tick rate.

Find out if any time events are armed at the given clock tick rate.

@param [in]  tickRate  system clock tick rate to find out about.

@returns
'true' if no time events are armed at the given tick rate and
'false' otherwise.

@note
This function should be called in critical section.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1ae52d81b1bd2cab6523fbe13cb5d79190';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_getPoolMin';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'poolId';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '714';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain the minimum of free entries of the given event pool.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a29692c0dcab731199b5beb5847484ab7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_getQueueMin';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'prio';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '720';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function returns the minimum of free entries of
the given event queue.

Queries the minimum of free ever present in the given event queue of
an active object with priority @p prio, since the active object
was started.

@note
This function is available only when the native QF event queue
implementation is used. Requesting the queue minimum of an unused
priority level raises an assertion in the QF. (A priority level becomes
used in QF after the call to the QF_add_() function.)

@param [in] prio  Priority of the active object, whose queue is queried

@returns
the minimum of free ever present in the given event queue of an active
object with priority @p prio, since the active object was started.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a1e5f5f3c33ce2706283cbe8179a9a2c5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_bzero';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'start';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'len';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '860';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear a specified region of memory to zero.

Clears a memory buffer by writing zeros byte-by-byte.

@param [in]  start  pointer to the beginning of a memory buffer.
@param [in]  len    length of the memory buffer to clear (in bytes)

@note The main application of this function is clearing the internal QF
variables upon startup. This is done to avoid problems with non-standard
startup code provided with some compilers and toolsets (e.g., TI DSPs or
Microchip MPLAB), which does not zero the uninitialized variables, as
required by the ANSI C standard.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a32ad508f6fd2f07b2aa49c074db5c186';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_LOG2';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSetBits
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'x';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_act.c';
      sec-mem-desc-line = '143';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a7878ff01241f13b997bfe6aea4ec1e5c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_publish_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sender';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '604';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Publish event to the framework.

This function posts (using the FIFO policy) the event @a e to <strong>all</strong>
active objects that have subscribed to the signal @a e->sig, which is
called <em>multicasting</em>. The multicasting performed in this function is
very efficient based on reference-counting inside the published event
("zero-copy" event multicasting). This function is designed to be
callable from any part of the system, including ISRs, device drivers,
and active objects.

@note
To avoid any unexpected re-ordering of events posted into AO queues,
the event multicasting is performed with scheduler <strong>locked</strong>. However,
the scheduler is locked only up to the priority level of the highest-
priority subscriber, so any AOs of even higher priority, which did not
subscribe to this event are <em>not</em> affected.

@attention this function should be called only via the macro QF_PUBLISH()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a8cf676a0ed64ab7ed8a8151f1f2e7c82';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_tickX_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'tickRate';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sender';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '643';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Processes all armed time events at every clock tick.

This internal helper function processes all armed ::QTimeEvt objects
associated wit the tick rate @p tickRate .

This function must be called periodically from a time-tick ISR or from
a task so that QF can manage the timeout events assigned to the given
system clock tick rate.

@param [in] tickRate  system clock tick rate serviced in this call [1..15].
@param [in] sender    pointer to a sender object (used only for QS tracing)

@note
this function should be called only via the macro QF_TICK_X()

@note
the calls to QF_tickX_() with different @p tickRate parameter can preempt
each other. For example, higher clock tick rates might be serviced from
interrupts while others from tasks (active objects).

@sa ::QTimeEvt.
@sa QF_tickX_()
@sa QF_TICK()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a438fc360095cdafd2b4ba7f5d65bc9b0';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_add_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'a';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '704';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Register an active object to be managed by the framework.

This function adds a given active object to the active objects
managed by the QF framework. It should not be called by the application
directly, only by the QP ports.

@param [in]  a  pointer to the active object to add to the framework.

@note The priority of the active object @p a should be set before calling
this function.

@sa QF_remove_()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a35b0d9d2c9ad2546fea14975bc1a1328';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_remove_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'a';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '709';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Remove the active object from the framework.

This function removes a given active object from the active objects managed
by the QF framework. It should not be called by the application
directly, only by the QP ports.

@param [in]  a  pointer to the active object to remove from the framework.

@note
The active object that is removed from the framework can no longer
participate in the publish-subscribe event exchange.

@sa QF_add_()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1ad3bc25ebbfc2c2c433f8762a77136366';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_newX_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'evtSize';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'margin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
enum_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sig';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '725';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QF implementation of creating new dynamic event.

Allocates an event dynamically from one of the QF event pools.

@param [in] evtSize the size (in bytes) of the event to allocate
@param [in] margin  the number of un-allocated events still available
                   in a given event pool after the allocation completes.
                   The special value #QF_NO_MARGIN means that this function
                   will assert if allocation fails.
@param [in] sig     the signal to be assigned to the allocated event

@returns
pointer to the newly allocated event. This pointer can be NULL only if
margin != #QF_NO_MARGIN and the event cannot be allocated with the
specified margin still available in the given pool.

@note
The internal QF function QF_newX_() raises an assertion when the
@p margin parameter is #QF_NO_MARGIN and allocation of the event turns
out to be impossible due to event pool depletion, or incorrect (too big)
size of the requested event.

@note
The application code should not call this function directly.
The only allowed use is thorough the macros Q_NEW() or Q_NEW_X().
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1aee4449d368362c7fc1d1ddc258027d53';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_newRef_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'evtRef';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '731';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QF implementation of creating new event reference.

Creates and returns a new reference to the current event e

@param [in] e       pointer to the current event
@param [in] evtRef  the event reference

@returns
the newly created reference to the event <tt>e</tt>

@note
The application code should not call this function directly.
The only allowed use is thorough the macro Q_NEW_REF().
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1aebb373ddc448c4198e4247b6c6ff3e69';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_deleteRef_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'evtRef';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '736';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QF implementation of deleting event reference.

Deletes an existing reference to the event e

@param [in] evtRef  the event reference

@note
The application code should not call this function directly.
The only allowed use is thorough the macro Q_DELETE_REF().
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_f_1a7aa4e9d39b8af089405cb829e2cc5a24';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_gc';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '855';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Recycle a dynamic event

This function implements a simple garbage collector for the dynamic events.
Only dynamic events are candidates for recycling. (A dynamic event is one
that is allocated from an event pool, which is determined as non-zero
e->poolId_ attribute.) Next, the function decrements the reference counter
of the event (e->refCtr_), and recycles the event only if the counter drops
to zero (meaning that no more references are outstanding for this event).
The dynamic event is recycled by returning it to the pool from which
it was originally allocated.

@param [in]  e  pointer to the event to recycle

@note
QF invokes the garbage collector at all appropriate contexts, when
an event can become garbage (automatic garbage collection), so the
application code should have no need to call QF_gc() directly. The QF_gc()
function is exposed only for special cases when your application sends
dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
queues are processed outside of QF and the automatic garbage collection
is <strong>NOT</strong> performed for these events. In this case you need to call
QF_gc() explicitly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-static-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_f_1a6ece34fc555ade0a6a10a259a6463401';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActive *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_active_';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_act.c';
      sec-mem-desc-line = '49';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_f_1aade4bd188c59b882a1df3864e2fb9a5e';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSubscrList *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_subscrList_';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_ps.c';
      sec-mem-desc-line = '50';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_f_1a5db24bb49aa7f1346c3b09b097c19bbb';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
enum_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_maxPubSignal_';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_ps.c';
      sec-mem-desc-line = '53';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_f_1af5836c9aaac62a711051a8d5da0b1386';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_timeEvtHead_';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_time.c';
      sec-mem-desc-line = '48';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
heads of linked lists of time events, one for every clock tick rate.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qf.h';
  cp-fileline  = '526';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This class groups together QF services. It has only static members and
should not be instantiated.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QF';
        node-link = {
          node-link-id = 'struct_q_f';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-QF_active_
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '11';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-QF_subscrList_
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-QF_timeEvtHead_
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 11;
        node-label = 'QPSet';
        node-link = {
          node-link-id = 'qpset_8h#struct_q_p_set';
        };
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '6';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'qf__pkg_8h';
  cp-name   = 'QFreeBlock';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qf__pkg_8h_1a61de413f506eb540fa7706e03d9e1d63';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QFreeBlock *volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'next';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      sec-mem-desc-line = '169';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/src/qf_pkg.h';
  cp-fileline  = '168';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
structure representing a free block in the Native QF Memory Pool. 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QFreeBlock';
        node-link = {
          node-link-id = 'qf__pkg_8h#struct_q_free_block';
        };
        node-child = {
          child-id = '1';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_hsm';
  cp-name   = 'QHsm';
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'struct_q_active';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'struct_q_msm';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1af03f75d32aa015fb73ed0802813b8fba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_childState';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parent';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '401';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain the current active child state of a given parent in ::QHsm

@param [in] me     pointer (see @ref oop)
@param [in] parent pointer to the parent state-handler
@returns the current active child state-handler of a given parent
@note this function is used in QM for auto-generating code for state history

Finds the child state of the given @c parent, such that this child state
is an ancestor of the currently active state. The main purpose of this
function is to support <strong>shallow history</strong> transitions in state machines
derived from QHsm.

@param [in] me     pointer (see @ref oop)
@param [in] parent pointer to the state-handler function

@returns
the child of a given @c parent state, which is an ancestor of the current
active state. For the corner case when the currently active state is the
given @c parent state, function returns the @c parent state.

@note
this function is designed to be called during state transitions, so it
does not necessarily start in a stable state configuration.
However, the function establishes stable state configuration upon exit.

 \xrefitem srs_tr 36.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1a26c0e8cbe4fdcdf423a105924bb5acbe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_isIn';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'state';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '408';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Tests if a given state is part of the current active state
configuration in ::QHsm subclasses.

 Tests if a state machine derived from QHsm is-in a given state.

 @note For a HSM, to "be in a state" means also to be in a superstate of
 of the state.

@param [in] me    pointer (see @ref oop)
@param [in] state pointer to the state-handler function to be tested

 @returns
'true' if the HSM "is in" the @p state and 'false' otherwise

 \xrefitem srs_tr 35.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1a50135a95de7e5d260d9de39812a3286d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static QStateHandler
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_state';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '390';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain the current active state from a HSM (read only).

@param [in] me pointer (see @ref oop)
@returns the current active state of a ::QHsm class
@note this function is used in QM for auto-generating code for state history
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1a3e1d1635d8a7f2247272bb425d8839b8';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_ctor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initial';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '414';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Protected "constructor" of ::QHsm

Performs the first step of HSM initialization by assigning the initial
pseudostate to the currently active state of the state machine.

@param [in,out] me      pointer (see @ref oop)
@param [in]     initial pointer to the top-most initial state-handler
                       function in the derived state machine

@note Must be called only by the constructors of the derived state
machines.

@note Must be called only ONCE before QHSM_INIT().

@par Usage
The following example illustrates how to invoke QHsm_ctor() in the
"constructor" of a derived state machine:
@include qep_qhsm_ctor.c

 \xrefitem srs_tr 30.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1ac8ae4728dfab5ce26a907fc624f6e104';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QState
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_top';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '419';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
the top-state.

QHsm_top() is the ultimate root of state hierarchy in all HSMs derived
from ::QHsm.

@param [in] me pointer (see @ref oop)
@param [in] e  pointer to the event to be dispatched to the FSM

@returns Always returns #Q_RET_IGNORED, which means that the top state
         ignores all events.

@note The parameters to this state handler are not used. They are provided
for conformance with the state-handler function signature ::QStateHandler.

 \xrefitem srs_tr 32.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1ab8ea9beec815f45de50af29febf01de6';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_init_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '320';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Implementation of the top-most initial tran. in ::QHsm subclass.

 \xrefitem srs_tr 13.

Executes the top-most initial transition in a HSM.

@param [in,out] me  pointer (see @ref oop)
@param [in]     e   pointer to an extra parameter (might be NULL)
@param [in]     qs_id QS-id of this state machine (for QS local filter)

@note Must be called only ONCE after the QHsm_ctor().

 \xrefitem srs_tr 31.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1ae8d87c75ad12987b16ed1ffdcde8f85b';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_dispatch_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '353';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Implementation of dispatching events to a ::QHsm subclass

 \xrefitem srs_tr 15.

Dispatches an event for processing to a hierarchical state machine (HSM).
The processing of an event represents one run-to-completion (RTC) step.

@param [in,out] me pointer (see @ref oop)
@param [in]     e  pointer to the event to be dispatched to the HSM
@param [in]     qs_id QS-id of this state machine (for QS local filter)

@note
This function should be called only via the virtual table (see
QHSM_DISPATCH()) and should NOT be called directly in the applications.

 \xrefitem srs_tr 33.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1ad11a75af46c8d76f513a3989edfad880';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_getStateHandler_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '359';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Implementation of getting the state handler in a ::QHsm subclass
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_hsm_1a2af6d01da4b759aabcf54c9e099484a2';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QHsmVtable const  *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'vptr';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '269';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
virtual pointer \xrefitem srs_tr 27.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_hsm_1a8d413a87f3f4447213fd8a8249844254';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
union QHsmAttr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'state';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '270';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
current active state (state-var) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_hsm_1aafa3d55ac553aa43aaf5761ce7010130';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
union QHsmAttr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'temp';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '271';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
temporary: target/act-table, etc. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_1a7d9ed1bfef8622599c8e38604fed3195';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static int_fast8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsm_tran_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'path';
        sec-mem-param-array = '[QHSM_MAX_NEST_DEPTH_]';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      sec-mem-desc-line = '464';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Static helper function to execute transition sequence in a hierarchical
state machine (HSM).

@param [in,out] me   pointer (see @ref oop)
@param [in,out] path array of pointers to state-handler functions
                    to execute the entry actions
@param [in]     qs_id QS-id of this state machine (for QS local filter)

@returns
the depth of the entry path stored in the @p path parameter.

 \xrefitem srs_tr 34.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qep.h';
  cp-fileline  = '268';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Hierarchical State Machine class
\ilinebr\ilinebr 
::QHsm represents a Hierarchical State Machine (HSM) with full support for
hierarchical nesting of states, entry/exit actions, initial transitions,
and transitions to history in any composite state. This class is designed
for ease of manual coding of HSMs in C, but it is also supported by the
QM modeling tool.
<br>
::QHsm is also the base class for the ::QMsm state machine, which provides
a superior efficiency, but requires the use of the QM modeling tool to
generate code.

@note ::QHsm is not intended to be instantiated directly, but rather serves
as the base class for derivation of state machines in the application
code.

 \xrefitem srs_tr 10.

@par Usage
The following example illustrates how to derive a state machine class
from ::QHsm. Please note that the ::QHsm member <tt>super</tt> is defined as the
FIRST member of the derived class.
@include qep_qhsm.c
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QMsm';
        node-link = {
          node-link-id = 'struct_q_msm';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QTicker';
        node-link = {
          node-link-id = 'struct_q_ticker';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 6;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '1';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '1';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '4';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '6';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'union_q_hsm_attr';
  cp-name   = 'QHsmAttr';
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'union_q_hsm_attr_1ad88ec9cc106b1590a4b9cc5898d768e8';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fun';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '236';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to a state-handler 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'union_q_hsm_attr_1afc8a07fdf9ec41798fb1e52fca43b767';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActionHandler
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'act';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '237';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to an action-handler 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'union_q_hsm_attr_1ad3f6bc95d93c3c6af44590843651ad4f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QXThreadHandler
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'thr';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '238';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to an thread-handler 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'union_q_hsm_attr_1ae52a13d64bb5d71c2ea05e132b65eb76';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QMState const  *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'obj';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '239';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to QMState object 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'union_q_hsm_attr_1a436cdca62a5882c12716863bc2d7539c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QMTranActTable const  *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tatbl';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '240';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
transition-action table 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qep.h';
  cp-fileline  = '235';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Attribute of for the ::QHsm class (Hierarchical State Machine).
\ilinebr\ilinebr 
This union represents possible values stored in the 'state' and 'temp'
attributes of the ::QHsm class.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 4;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '5';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '1';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '4';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'struct_q_hsm_dummy';
  cp-name   = 'QHsmDummy';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_hsm_dummy_1a0fdbbb15d5be4292bbcb38a593cd637e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QHsmDummy_ctor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsmDummy *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1055';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Constructor of the QHsmDummy HSM class

"constructor" of QHsmDummy
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_hsm_dummy_1a292a76f05e6800a383c7615b4c88cd0e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QHsm
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1049';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qs.h';
  cp-fileline  = '1048';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
QHsmDummy class
\ilinebr\ilinebr 
QHsmDummy is a test double for the role of "Orthogonal Components"
HSM objects in QUTest unit testing.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 7;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QHsmDummy';
        node-link = {
          node-link-id = 'struct_q_hsm_dummy';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '5';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '7';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_hsm_vtable';
  cp-name   = 'QHsmVtable';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_hsm_vtable_1a1e91ba8cc77bf96933e4aaee16a524d0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'init';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '279';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Triggers the top-most initial transition in the HSM. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_hsm_vtable_1a82ee338418d3cee260b9c6dc44056886';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dispatch';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '283';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Dispatches an event to the HSM. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_hsm_vtable_1ad115f6efabb267192ae14c4087bca560';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler(*
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStateHandler';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '287';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Get the current state handler of the HSM. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qep.h';
  cp-fileline  = '276';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Virtual table for the ::QHsm class. 


 \xrefitem srs_tr 11.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'qk_8h';
  cp-name   = 'QK_PrivAttr';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qk_8h_1acfcf05755165c40b86f38f2416c619b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'actPrio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      sec-mem-desc-line = '55';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
prio of the active AO 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qk_8h_1af4a7f7ac04bee89575efdf961f8154ec';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nextPrio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      sec-mem-desc-line = '56';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
prio of the next AO to execute 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qk_8h_1a36bdd97177b7ac1ae7fa0d2a1ea433ab';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lockPrio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      sec-mem-desc-line = '57';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
lock prio (0 == no-lock) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qk_8h_1aff9b1151ed0af2d39ee445372f8208aa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lockHolder';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      sec-mem-desc-line = '58';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
prio of the AO holding the lock 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qk_8h_1aef94e68fcb40d50452d00059d2539d63';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'intNest';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
ISR nesting level 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qk_8h_1a1c45fe2c4a2445a557574e7a916faaaf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'readySet';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      sec-mem-desc-line = '60';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK ready-set of AOs 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qk.h';
  cp-fileline  = '54';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
private attributes of the QK kernel 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QK_PrivAttr';
        node-link = {
          node-link-id = 'qk_8h#struct_q_k___priv_attr';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+readySet
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QPSet';
        node-link = {
          node-link-id = 'qpset_8h#struct_q_p_set';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_m_active';
  cp-name   = 'QMActive';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'class_q_actvie';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'protected-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_m_active_1a11417cfd658a571c1b21a47e261b58be';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMActive_ctor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initial';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '394';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
protected "constructor" of an ::QMActive active object.

Performs the first step of active object initialization by assigning
the virtual pointer and calling the superclass constructor.

@param [in,out] me       pointer (see @ref oop)
@param [in]     initial  pointer to the event to be dispatched to the MSM

@note  Must be called only ONCE before QMSM_INIT().

@sa QHsm_ctor()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_active_1a13b6e44ab7e34319675593c31497a9cf';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActive
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '380';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
inherits ::QActive 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qf.h';
  cp-fileline  = '379';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
QMActive active object base class (based on ::QMsm implementation)

\ilinebr\ilinebr 
QMActive represents an active object that uses the ::QMsm style state
machine implementation strategy. This strategy requires the use of the
QM modeling tool to generate state machine code automatically, but the
code is faster than in the ::QHsm style implementation strategy and needs
less run-time support (smaller event-processor).

@note
::QMActive is not intended to be instantiated directly, but rather serves
as the base class for derivation of active objects in the application.

@sa ::QActive

@par Usage
The following example illustrates how to derive an active object from
::QMActive. Please note that the ::QActive member @c super is defined as
the <strong>first</strong> member of the derived struct (see @ref oop).
@include qf_qmactive.c
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActvie';
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QMActive';
        node-link = {
          node-link-id = 'struct_q_m_active';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 3;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '4';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QActvie';
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '11';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QMActive';
        node-link = {
          node-link-id = 'struct_q_m_active';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 11;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '7';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_m_pool';
  cp-name   = 'QMPool';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_m_pool_1a19ce0f12f82dcf6825628ace98e980dc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMPool_init';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMPool *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'poolSto';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'poolSize';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'blockSize';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_mem.c';
      sec-mem-desc-line = '83';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initialize a fixed block-size memory pool by providing it with the pool
memory to manage, size of this memory, and the block size.

@param [in,out] me       pointer (see @ref oop)
@param [in]     poolSto  pointer to the memory buffer for pool storage
@param [in]     poolSize size of the storage buffer in bytes
@param [in]     blockSize fixed-size of the memory blocks in bytes

@attention
The caller of QMPool::init() must make sure that the @p poolSto
pointer is properly <strong>aligned</strong>. In particular, it must be possible to
efficiently store a pointer at the location pointed to by @p poolSto.
Internally, the QMPool_init() function rounds up the block size
@p blockSize so that it can fit an integer number of pointers.
This is done to achieve proper alignment of the blocks within the pool.

@note
Due to the rounding of block size the actual capacity of the pool might
be less than (@p poolSize / @p blockSize). You can check the capacity
of the pool by calling the QF_getPoolMin() function.

@note
This function is <strong>not</strong> protected by a critical section, because
it is intended to be called only during the initialization of the system,
when interrupts are not allowed yet.

@note
Many QF ports use memory pools to implement the event pools.

@par Usage
The following example illustrates how to invoke QMPool_init():
@include qmp_init.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_m_pool_1acfcc25d788e19ad4c5025fcb153c1104';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMPool_put';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMPool *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'b';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_mem.c';
      sec-mem-desc-line = '155';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Recycle a memory block to the fixed block-size memory pool.

@param [in,out] me   pointer (see @ref oop)
@param [in]     b    pointer to the memory block that is being recycled

@attention
The recycled block must be allocated from the <strong>same</strong> memory pool
to which it is returned.

@note
This function can be called from any task level or ISR level.

@sa
QMPool_get()

@par Usage
The following example illustrates how to use QMPool_put():
@include qmp_use.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_m_pool_1a3829663050f266f81f46a03ffb31d7ab';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMPool_get';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMPool *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'margin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_mem.c';
      sec-mem-desc-line = '213';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The function allocates a memory block from the pool and returns a pointer
to the block back to the caller.

@param [in,out] me      pointer (see @ref oop)
@param [in]     margin  the minimum number of unused blocks still available
                       in the pool after the allocation.

@returns
A pointer to a memory block or NULL if no more blocks are available in
the memory pool.

@note
This function can be called from any task level or ISR level.

@note
The memory pool @p me must be initialized before any events can
be requested from it. Also, the QMPool_get() function uses internally a
QF critical section, so you should be careful not to call it from within
a critical section when nesting of critical section is not supported.

@attention
An allocated block must be later returned back to the <strong>same</strong> pool
from which it has been allocated.

@sa QMPool_put()

@par Usage
The following example illustrates how to use QMPool_get():
@include qmp_use.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_m_pool_1ae52d81b1bd2cab6523fbe13cb5d79190';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_getPoolMin';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'poolId';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_mem.c';
      sec-mem-desc-line = '294';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function obtains the minimum number of free blocks in the given
event pool since this pool has been initialized by a call to QF_poolInit().

@param [in] poolId  event pool ID in the range 1..QF_maxPool_, where
                   QF_maxPool_ is the number of event pools initialized
                   with the function QF_poolInit().

@returns
the minimum number of unused blocks in the given event pool.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_pool_1a975ccf44de4a438a37792ae7c518ca65';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void *volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'free_head';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      sec-mem-desc-line = '108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The head of the linked list of free blocks 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_pool_1a53255b934b07b472175fbb8e847f9b5d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'start';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      sec-mem-desc-line = '111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
the original start this pool 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_pool_1a57dfa4d169c6b9c0b4e7352bc0c34366';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'end';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      sec-mem-desc-line = '114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
the last memory block managed by this memory pool 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_pool_1a48af259d19f4cabaa01773702daf1e60';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QMPoolSize
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'blockSize';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      sec-mem-desc-line = '117';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
maximum block size (in bytes) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_pool_1af0ffe3837793955c37bdb0587f365556';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QMPoolCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nTot';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      sec-mem-desc-line = '120';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
total number of blocks 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_pool_1a463f7c9b346c1e4fa67f0fba662fcf5b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QMPoolCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nFree';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      sec-mem-desc-line = '123';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
number of free blocks remaining 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_pool_1a661dfb0f9495c37b30c89fca86e8175e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QMPoolCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nMin';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      sec-mem-desc-line = '131';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
minimum number of free blocks ever present in this pool
\ilinebr\ilinebr 
this attribute remembers the low watermark of the pool, which
provides a valuable information for sizing event pools.
@sa QF_getPoolMin().
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qmpool.h';
  cp-fileline  = '106';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Native QF Memory Pool
\ilinebr\ilinebr 
A fixed block-size memory pool is a very fast and efficient data
structure for dynamic allocation of fixed block-size chunks of memory.
A memory pool offers fast and deterministic allocation and recycling of
memory blocks and is not subject to fragmenation.@n
@n
The ::QMPool class describes the native QF memory pool, which can be used as
the event pool for dynamic event allocation, or as a fast, deterministic
fixed block-size heap for any other objects in your application.

@note
::QMPool contains only data members for managing a memory pool, but
does not contain the pool storage, which must be provided externally
during the pool initialization.

@note
The native QF event pool is configured by defining the macro
#QF_EPOOL_TYPE_ as ::QMPool in the specific QF port header file.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QMPool';
        node-link = {
          node-link-id = 'struct_q_m_pool';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_msm';
  cp-name   = 'QMsm';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'struct_q_hsm';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1a909aaf535684f7df6b6062e034e23ec6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QMState const *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_childStateObj';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMState const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parent';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '492';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain the current active child state of a given parent in ::QMsm

@param [in] me     pointer (see @ref oop)
@param [in] parent pointer to the parent state-object
@returns the current active child state-object of a given parent
@note this function is used in QM for auto-generating code for state history

Finds the child state of the given @c parent, such that this child state
is an ancestor of the currently active state. The main purpose of this
function is to support <strong>shallow history</strong> transitions in state machines
derived from QMsm.

@param [in] me     pointer (see @ref oop)
@param [in] parent pointer to the state-handler object

@returns
the child of a given @c parent state, which is an ancestor of
the currently active state. For the corner case when the currently active
state is the given @c parent state, function returns the @c parent state.

@sa QMsm_childStateObj()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1ac4919a1e260de0b02d2e4534340c9b8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_isInState';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMsm const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMState const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'state';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '499';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Tests if a given state is part of the current active state
configuration in a MSM.

Tests if a state machine derived from QMsm is-in a given state.

@note
For a MSM, to "be-in" a state means also to "be-in" a superstate of
of the state.

@param [in] me    pointer (see @ref oop)
@param [in] state pointer to the QMState object that corresponds to the
                 tested state.
@returns
'true' if the MSM "is in" the @p state and 'false' otherwise
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1a28b1ad2e3e70180544b8acab46886e9c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static QMState const *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_stateObj';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '481';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain the current active state from a MSM (read only)

@param [in] me     pointer (see @ref oop)
@returns the current active state-object
@note this function is used in QM for auto-generating code for state history
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1ae19d961a526968a622ecab1b8bd08058';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_ctor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initial';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '505';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Constructor of ::QMsm

Performs the first step of QMsm initialization by assigning the initial
pseudostate to the currently active state of the state machine.

@param [in,out] me       pointer (see @ref oop)
@param [in]     initial  the top-most initial transition for the MSM.

@note
Must be called only ONCE before QHSM_INIT().

@note
QMsm inherits QHsm, so by the @ref oop convention it should call the
constructor of the superclass, i.e., QHsm_ctor(). However, this would pull
in the QHsmVtable, which in turn will pull in the code for QHsm_init_() and
QHsm_dispatch_() implemetations. To avoid this code size penalty, in case
::QHsm is not used in a given project, the QMsm_ctor() performs direct
intitialization of the Vtable, which avoids pulling in the code for QMsm.

@par Usage
The following example illustrates how to invoke QMsm_ctor() in the
"constructor" of a derived state machine:
@include qep_qmsm_ctor.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_msm_1a292a76f05e6800a383c7615b4c88cd0e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QHsm
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '443';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
inherits ::QHsm 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1a6e80e5982811ef539b59e6789bec1028';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_init_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '513';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Implementation of the top-most initial transition in ::QMsm

 \xrefitem srs_tr 18.

Executes the top-most initial transition in a MSM.

@param [in,out] me  pointer (see @ref oop)
@param [in]     e   pointer to an extra parameter (might be NULL)
@param [in]     qs_id QS-id of this state machine (for QS local filter)

@note
Must be called only ONCE after the QMsm_ctor().
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1a819c00980e77b28935044b8696ddbc60';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_dispatch_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '524';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Implementation of disparching events to ::QMsm

 \xrefitem srs_tr 19.

Dispatches an event for processing to a meta state machine (MSM).
The processing of an event represents one run-to-completion (RTC) step.

@param [in,out] me pointer (see @ref oop)
@param [in]     e  pointer to the event to be dispatched to the MSM
@param [in]     qs_id QS-id of this state machine (for QS local filter)

@note
This function should be called only via the virtual table (see
QHSM_DISPATCH()) and should NOT be called directly in the applications.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1a354acc5c15ba2458812db4ca30ec55f5';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_getStateHandler_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '534';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Implementation of getting the state handler in a ::QMsm
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1ae92f8f66292ed7386230c1ba96e65b74';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static QState
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_execTatbl_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
struct QMTranActTable const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'tatbl';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_msm.c';
      sec-mem-desc-line = '63';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper function to execute a transition-action table.

Helper function to execute transition sequence in a transition-action table.

@param [in,out] me    pointer (see @ref oop)
@param [in]     tatbl pointer to the transition-action table
@param [in]     qs_id QS-id of this state machine (for QS local filter)

@returns
status of the last action from the transition-action table.

@note
This function is for internal use inside the QEP event processor and
should <strong>not</strong> be called directly from the applications.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1a635b1a83430c1754b421d95f35a8f79f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_exitToTranSource_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMState const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cs';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMState const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ts';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_msm.c';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper function to exit the current state up to the transition source

Static helper function to exit the current state configuration to the
transition source, which in a hierarchical state machine might be a
superstate of the current state.

@param [in,out] me   pointer (see @ref oop)
@param [in]     cs   pointer to the current state
@param [in]     ts   pointer to the transition source state
@param [in]     qs_id QS-id of this state machine (for QS local filter)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_msm_1a9f6145810a442b2e0b54b99186d9a655';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static QState
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QMsm_enterHistory_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMState const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'hist';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_msm.c';
      sec-mem-desc-line = '77';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper function to execute a transition to history

Static helper function to execute the segment of transition to history
after entering the composite state and

@param [in,out] me   pointer (see @ref oop)
@param [in]     hist pointer to the history substate
@param [in]     qs_id QS-id of this state machine (for QS local filter)

@returns
#Q_RET_TRAN_INIT, if an initial transition has been executed in the last
entered state or #Q_RET_NULL if no such transition was taken.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qep.h';
  cp-fileline  = '442';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
QM State Machine implementation strategy

\ilinebr\ilinebr 
::QMsm (QM State Machine) provides a more efficient state machine
implementation strategy than ::QHsm, but requires the use of the QM
modeling tool, but are the fastest and need the least run-time
support (the smallest event-processor taking up the least code space).

@note
::QMsm is not intended to be instantiated directly, but rather serves as
the base class for derivation of state machines in the application code.

 \xrefitem srs_tr 16.

@par Usage
The following example illustrates how to derive a state machine class
from ::QMsm. Please note that the ::QMsm member <tt>super</tt> is defined as the
<em>first</em> member of the derived struct.
@include qep_qmsm.c
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QMsm';
        node-link = {
          node-link-id = 'struct_q_msm';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 7;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QMsm';
        node-link = {
          node-link-id = 'struct_q_msm';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '5';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '7';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_m_state';
  cp-name   = 'QMState';
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_state_1a19ef5a82172a254e15ae15710e40d30f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QMState const  *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'superstate';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '460';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
superstate of the state 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_state_1ac1d3e6d1568eaba07ad62a7e212541de';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler const
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'stateHandler';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '461';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
state handler 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_state_1a7f20fb69b982f91c143a22d29e51ab55';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActionHandler const
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'entryAction';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '462';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
entry action handler 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_state_1ac0f5460022fba3a90d46c885e0b95957';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActionHandler const
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'exitAction';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '463';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
exit action handler 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_state_1ab9bc9157f2aa4ff022ec37937746217f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActionHandler const
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'initAction';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '464';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
init action handler 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qep.h';
  cp-fileline  = '459';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
State object for the ::QMsm class (QM State Machine).
\ilinebr\ilinebr 
This class groups together the attributes of a ::QMsm state, such as the
parent state (state nesting), the associated state handler function and
the exit action handler function. These attributes are used inside the
QMsm_dispatch() and QMsm_init() functions.

 \xrefitem srs_tr 17.

@attention
The ::QMState class is only intended for the QM code generator and should
not be used in hand-crafted code.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '1';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_m_tran_act_table';
  cp-name   = 'QMTranActTable';
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_tran_act_table_1ac1575325b54d2314367a2009de9ef312';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QMState const  *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'target';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '470';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_m_tran_act_table_1a37933326f228b752952b1451375a32c2';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActionHandler const
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'act';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      sec-mem-desc-line = '471';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qep.h';
  cp-fileline  = '469';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Transition-Action Table for the Meta State Machine. 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'qpset_8h';
  cp-name   = 'QPSet';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qpset_8h_1a7321ce6b49c44385f4443ce0491a3607';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QPSetBits volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'bits';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      sec-mem-desc-line = '67';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
bitmask with a bit for each element 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qpset.h';
  cp-fileline  = '66';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Priority Set of up to 32 elements
The priority set represents the set of active objects that are ready to
run and need to be considered by the scheduling algorithm. The set is
capable of storing up to 32 priority levels.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QPSet';
        node-link = {
          node-link-id = 'qpset_8h#struct_q_p_set';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_s';
  cp-name   = 'QS';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_s_1aff7b59f569ec689a7580bd6911daafd5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dummy';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '244';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a7c7af621aaee2d8c8a044a2c001e8d38';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_initBuf';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sto';
        sec-mem-param-array = '[]';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stoSize';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '250';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initialize the QS data buffer.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1ac67dd066a794e6a9716209cf5044f13a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_getByte';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '353';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Byte-oriented interface to the QS data buffer.

This function delivers one byte at a time from the QS data buffer.

@returns the byte in the least-significant 8-bits of the 16-bit return
value if the byte is available. If no more data is available at the time,
the function returns ::QS_EOD (End-Of-Data).

@note QS_getByte() is <strong>not</strong> protected with a critical section.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a174813e4347846ef3c3296b295eb0909';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t const *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_getBlock';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'pNbytes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '361';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Block-oriented interface to the QS data buffer.

This function delivers a contiguous block of data from the QS data buffer.
The function returns the pointer to the beginning of the block, and writes
the number of bytes in the block to the location pointed to by @p pNbytes.
The parameter @p pNbytes is also used as input to provide the maximum size
of the data block that the caller can accept.

@returns if data is available, the function returns pointer to the
contiguous block of data and sets the value pointed to by @p pNbytes
to the # available bytes. If data is available at the time the function is
called, the function returns NULL pointer and sets the value pointed to by
@p pNbytes to zero.

@note Only the NULL return from QS_getBlock() indicates that the QS buffer
is empty at the time of the call. The non-NULL return often means that
the block is at the end of the buffer and you need to call QS_getBlock()
again to obtain the rest of the data that "wrapped around" to the
beginning of the QS data buffer.

@note QS_getBlock() is NOT protected with a critical section.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1abdaca9817077de8e9c13a056d6b5d025';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onStartup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'arg';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '383';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback to startup the QS facility

\ilinebr\ilinebr 
This is a platform-dependent "callback" function invoked through the macro
QS_INIT(). You need to implement this function in your application.
At a minimum, the function must configure the QS buffer by calling
QS_initBuf(). Typically, you will also want to open/configure the QS output
channel, such as a serial port, or a data file. The void* argument @p arg
can be used to pass parameter(s) needed to configure the output channel.

@returns the staus of initialization. Typically 1 (true) when the QS
initialization was successful, or 0 (false) when it failed.

@par Usage
The following example illustrates an implementation of QS_onStartup():
@include qs_startup.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a2c11ee72caae6d04b5a5fb46106664ba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onCleanup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '393';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback to cleanup the QS facility

\ilinebr\ilinebr 
This is a platform-dependent "callback" function invoked through the macro
QS_EXIT(). You need to implement this function in your application.
The main purpose of this function is to close the QS output channel, if
necessary.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1aba0382cf0bf49c8d0ac4105724226b4b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onFlush';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '403';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback to flush the QS trace data to the host

\ilinebr\ilinebr 
This is a platform-dependent "callback" function to flush the QS trace
buffer to the host. The function typically busy-waits until all the data
in the buffer is sent to the host. This is acceptable only in the initial
transient.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1aab86d18c44b62d19644a5ec709bd8b0d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSTimeCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onGetTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '423';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback to obtain a timestamp for a QS record.

\ilinebr\ilinebr 
This is a platform-dependent "callback" function invoked from the macro
QS_TIME_PRE_() to add the time stamp to a QS record.

@note Some of the predefined QS records from QP do not output the time
stamp. However, ALL user records do output the time stamp.
@note QS_onGetTime() is called in a critical section and should not
exit the critical section.

@returns the current timestamp.

@par Usage
The following example shows using a system call to implement QS
time stamping:
@include qs_onGetTime.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1aa8285063cb6d42cd8f49c52e77e033aa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_rxInitBuf';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sto';
        sec-mem-param-array = '[]';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stoSize';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '926';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initialize the QS RX data buffer.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a5b68b40c1e5582313073f6ca7d637156';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_rxParse';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '931';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Parse all bytes present in the QS RX data buffer
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a8f8922829e53f8e1df19c9b9094689fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_RX_PUT';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'b';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '936';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Put one byte into the QS RX lock-free buffer
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1af0e4b1381033281df9590c8e6669b295';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_rxGetNfree';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '941';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain the number of free bytes in the QS RX data buffer
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1ac5910f99d5872e21ad7ad4cbeb91a2fe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_setCurrObj';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'obj_kind';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'obj_ptr';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '946';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the "current object" in the Target
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a514d8e7d35532f223bd2839d5e763ba2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_queryCurrObj';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'obj_kind';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '951';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Query the "current object" in the Target
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a0ee7523f0496d2ab2039be40a7fc57dd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onReset';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '956';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback function to reset the Target (to be implemented in the BSP)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1af824d5b11fdd09d1bb4775c9b32e4530';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onCommand';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmdId';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param1';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param2';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param3';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '961';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback function to execute user commands (to be implemented in BSP)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1abefe60a3ba6b11d5406bba4708a48f2d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onTestTeardown';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '983';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
callback to teardown after a unit test inside the Target
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a80adc68ef81a011bc70fb0e52e6eee16';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onTestLoop';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '988';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
callback to run the test loop
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1ad3f890b82210f9d63348d9764bdc1073';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onTestEvt';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '993';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
callback to "massage" the test event before dispatching/posting it
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a14579f8a23d950a5f2393fa3f9b0e145';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_onTestPost';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sender';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'recipient';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'status';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '998';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
callback to examine an event that is about to be posted
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a7585af49defd0acaa7a45bf0984b5823';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_processTestEvts_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1004';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS internal function to process posted events during test
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a579fb4cc8147e958c6382dc0e1a606a8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_tickX_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'tickRate';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sender';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1009';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal function to process armed time events during test
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a6af96b193f84a7b8b45982eb002c9ff2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_getTestProbe_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(void)
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'api';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1014';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS internal function to get the Test-Probe for a given API
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a2afaa5be99627adf0328bb5cf1a9462a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_ASSERTION';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'module';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'loc';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'delay';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs.c';
      sec-mem-desc-line = '1033';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output the assertion failure trace record
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1acbabb90d0be1e31b535e2d3c3a91452a';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_glbFilter_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'filter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '255';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set/clear the global Filter for a given QS record or group of records.

This function sets up the global QS filter to enable or disable the
given QS record or a group of records @p rec.

@param [in] filter  the QS record number or group to enable in the filter,
                if positive or disable, if negative. The record numbers
                must be from the enumeration ::QSpyRecords. The record
                groups from enumeration ::QSpyRecordGroups.
@note
Filtering based on the record-type (global filter) is only the first layer
of filtering. The second layer is based on the object-id (local filter).
Both filter layers must be enabled for the QS record to be inserted into
the QS buffer.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a0becde31dac87417eab90b0d3b9c2205';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_locFilter_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'filter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '260';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set/clear the local Filter for a given object-id or group of object-ids.

This function sets up the local QS filter to enable or disable the
given QS object-id or a group of object-ids @p qs_id.

@param [in] qs_id  the QS object-id or group to enable in the filter,
                if positive or disable, if negative. The qs_id numbers
                must be in the range 1..127.
@note
Filtering based on the object-id (local filter) is the second layer of
filtering. The first layer is based on the QS record-type (gloabl filter).
Both filter layers must be enabled for the QS record to be inserted into
the QS buffer.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1aa4633946ce09290d836309b924067358';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_beginRec_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'rec';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '265';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Mark the begin of a QS record @p rec

This function must be called at the beginning of each QS record.
This function should be called indirectly through the macro QS_BEGIN_ID(),
or QS_BEGIN_NOCRIT(), depending if it's called in a normal code or from
a critical section.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a250d412e3f6d4d67e28a5ba8d88317b3';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_endRec_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '270';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Mark the end of a QS record @p rec

This function must be called at the end of each QS record.
This function should be called indirectly through the macro QS_END(),
or QS_END_NOCRIT(), depending if it's called in a normal code or from
a critical section.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1ac36b48e9ca403485d5ed82fb84e32979';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u8_raw_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '276';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
output raw uint8_t data element (without format information)

output uint8_t data element without format information 



@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a9bbcba5fb4261c328c47a334692cf414';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_2u8_raw_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd1';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd2';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '281';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
output two raw uint8_t data elements (without format information)

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a53f27e13fd42ab03e5e5b25e0d8bffdf';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u16_raw_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '286';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output raw uint16_t data element (without format information)

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a6dff148aaf438fb1217a92d42ca6a04c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u32_raw_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '291';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output raw uint32_t data element (without format information)

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a9a71cdc952e809942344c78fbf07d43d';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_str_raw_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'str';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '296';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output raw zero-terminated string element (without format information)

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a9a0dc3641a44652835a48a83736bf4ad';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u8_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'format';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '302';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output uint8_t data element with format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a57cf65a5272a43f9a97c80278337d523';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u16_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'format';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '307';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
output uint16_t data element with format information

This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a884430ab0deffc7477149c13455c2bc8';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u32_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'format';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '312';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output uint32_t data element with format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a66d9945943dfe1168f6a89b7515df149';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_f32_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'format';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
float32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'f';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '317';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output 32-bit floating point data element with format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1af5f34ad8fe77ef40d6ce653208ff64a4';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_f64_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'format';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
float64_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '322';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output 64-bit floating point data element with format information

This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1ae78bdf4e9f9df5aa457bed458889ed5c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_obj_raw_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'obj';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '327';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output obj pointer data element without format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a85fd8008658b4ce38013d097f7844107';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_str_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'str';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '332';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output zero-terminated ASCII string element with format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1aed0889630709ef48bcc0331ef7832333';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_mem_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'blk';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '337';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output memory block of up to 255-bytes with format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a862f90f3819eb1b2df21e72fd49566f9';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u64_raw_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '342';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output raw uint64_t data element without format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a68cdcc81c85565ecda929cd41b55c38f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_u64_fmt_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'format';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'd';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '347';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output uint64_t data element with format information

@note This function is only to be used through macros, never in the
client code directly.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a3988b7f1e1c008d4cdade413940da06d';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_sig_dict_pre_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
enum_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sig';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'obj';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'name';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '821';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output predefined signal-dictionary record

@note This function is only to be used through macro QS_SIG_DICTIONARY()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a9d096ac2fda1371c56efde75324c2ba4';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_obj_dict_pre_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'obj';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'name';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '827';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output predefined object-dictionary record

@note This function is only to be used through macro QS_OBJ_DICTIONARY()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1ae42ca706af5673c5628bea6d885d9fe2';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_obj_arr_dict_pre_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'obj';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'idx';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'name';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '833';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output predefined object-array dictionary record

@note This function is only to be used through macro QS_OBJ_ARR_DICTIONARY()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a8785debd9dda48336958f3f671479860';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_fun_dict_pre_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(void)
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fun';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'name';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '840';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output predefined function-dictionary record

@note This function is only to be used through macro QS_FUN_DICTIONARY()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a988161ba98d8ef0a5bef55e6416f350f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_usr_dict_pre_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
enum_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'rec';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'name';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '846';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output predefined user-dictionary record

@note This function is only to be used through macro QS_USR_DICTIONARY()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1ae8146f6109190302f5f5a56dab49e6f2';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_QS_CRIT_ENTRY';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '863';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output the critical section entry

Output the critical section entry/exit
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a57ba82e7082ffed1ef9997918687b904';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_QS_CRIT_EXIT';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '868';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output the critical section exit
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a457f72cf98e29c3ec0c57475e545d547';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_QS_ISR_ENTRY';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'isrnest';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'prio';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '873';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output the interrupt entry record

Output the ISR entry
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a8a04771155dcf233abef24c0007cf31c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QF_QS_ISR_EXIT';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'isrnest';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'prio';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '878';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output the interrupt exit record

Output the ISR exit
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a9708389ff1b57583209dd59bfa562e4c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_test_pause_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '1034';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS internal function to pause test and enter the test event loop
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_s_1a6d3dbd0bd84fde36212a27f95db3bba9';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QS_target_info_pre_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'isReset';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs.c';
      sec-mem-desc-line = '431';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qs.h';
  cp-fileline  = '243';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
QS software tracing facilities
\ilinebr\ilinebr 
This class groups together QS services. It has only static members and
should not be instantiated.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QS';
        node-link = {
          node-link-id = 'struct_q_s';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'qs_8h';
  cp-name   = 'QSPrivAttr';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1a82ef3da4eee59fccdb84d1d64dc492ec';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'glbFilter';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '904';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
global on/off QS filter 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1ac03d08cb94cbfb1adfcb711ef5bd9254';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'locFilter';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '905';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
local QS filters 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1a2acf9e9d049afcebbb4b4e4dea7ac067';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void const  *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'locFilter_AP';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '906';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
deprecated local QS filter 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1a2c5f4ef732286b78e31ec8d1cb238215';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'buf';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '907';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to the start of the ring buffer 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1aba5078de247778b49f3cbae223aab72a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'end';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '908';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset of the end of the ring buffer 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1ad21510df8c4cdd9dc69affe1fdb596fc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'head';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '909';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset to where next byte will be inserted 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1a7768b69553713fc6397297c9476dce1e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tail';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '910';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset of where next byte will be extracted 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1a974527dd73b1594fece0acc264a9ac39';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'used';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '911';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
number of bytes currently in the ring buffer 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1ac610493c19e6812e6ec7d7084860eb97';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seq';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '912';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
the record sequence number 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1a1955249c2aed118b4e8d2d362a906bf6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'chksum';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '913';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
the checksum of the current record 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1ae8b2ecb66010dad08ed812fbf6af4b25';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'critNest';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '915';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
critical section nesting level 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qs.h';
  cp-fileline  = '903';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Private QS attributes to keep track of the filters and the trace buffer 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QSPrivAttr';
        node-link = {
          node-link-id = 'qs_8h#struct_q_s_priv_attr';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'qs_8h';
  cp-name   = 'QSpyId';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs_8h_1acc0b27a6740f03639727be452f1e6b83';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'prio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      sec-mem-desc-line = '205';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qs.h';
  cp-fileline  = '205';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
QSpy ID type for applying local filtering 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'QSpyId';
        node-link = {
          node-link-id = 'qs_8h#struct_q_spy_id';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'qs__pkg_8h';
  cp-name   = 'QSrxPrivAttr';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs__pkg_8h_1a01bc6ad26b034e6e492820debee26212';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currObj';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      sec-mem-desc-line = '94';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
current objects 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs__pkg_8h_1a2c5f4ef732286b78e31ec8d1cb238215';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'buf';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      sec-mem-desc-line = '95';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to the start of the ring buffer 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs__pkg_8h_1aba5078de247778b49f3cbae223aab72a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'end';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      sec-mem-desc-line = '96';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset of the end of the ring buffer 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs__pkg_8h_1ad21510df8c4cdd9dc69affe1fdb596fc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'head';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      sec-mem-desc-line = '97';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset to where next byte will be inserted 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs__pkg_8h_1a7768b69553713fc6397297c9476dce1e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QSCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tail';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      sec-mem-desc-line = '98';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
offset of where next byte will be extracted 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs__pkg_8h_1a1c45fe2c4a2445a557574e7a916faaaf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'readySet';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      sec-mem-desc-line = '100';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QUTEST ready-set of active objects 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qs__pkg_8h_1aaa9296707cb874714935feea90020335';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'inTestLoop';
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      sec-mem-desc-line = '101';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
QUTEST event loop is running 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/src/qs_pkg.h';
  cp-fileline  = '93';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Private QS-RX attributes to keep track of the current objects and
the lock-free RX buffer
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QPSet';
        node-link = {
          node-link-id = 'qpset_8h#struct_q_p_set';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QSrxPrivAttr';
        node-link = {
          node-link-id = 'qs__pkg_8h#struct_q_srx_priv_attr';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+readySet
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_ticker';
  cp-name   = 'QTicker';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'struct_q_active';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_ticker_1a3558503dacda5fe520ce300fce4627a2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTicker_ctor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTicker *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'tickRate';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '903';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Constructor of the QTicker Active Object class
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_ticker_1a13b6e44ab7e34319675593c31497a9cf';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActive
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '897';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
inherits ::QActive 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_ticker_1ac42f381ae6caf701f6503d5245318dc9';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTicker_init_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'par';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      sec-mem-desc-line = '442';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_ticker_1a9f5d3fd1f7136182abf38171a3521cf3';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTicker_dispatch_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'qs_id';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      sec-mem-desc-line = '458';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_ticker_1a2717c6c822f2e26aeefc0ab250d33808';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTicker_postLIFO_';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'e';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      sec-mem-desc-line = '524';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qf.h';
  cp-fileline  = '896';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
"Ticker" Active Object class

\ilinebr\ilinebr 
QTicker is an efficient active object specialized to process
QF system clock tick at a specified tick rate [0..#QF_MAX_TICK_RATE].
Placing system clock tick processing in an active object allows you
to remove the non-deterministic QF_TICK_X() processing from the interrupt
level and move it into the thread-level, where you can prioritize it
as low as you wish.

@par Usage
The following example illustrates use of QTicker active objects:
@include qf_ticker.c
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QTicker';
        node-link = {
          node-link-id = 'struct_q_ticker';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QTicker';
        node-link = {
          node-link-id = 'struct_q_ticker';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '6';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_time_evt';
  cp-name   = 'QTimeEvt';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'struct_q_evt';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_time_evt_1a790b654800908426f563112107b11647';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTimeEvt_ctorX';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'act';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
enum_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'sig';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'tickRate';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '489';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The extended "constructor" to initialize a Time Event.

When creating a time event, you must commit it to a specific active object
@p act, tick rate @p tickRate and event signal @p sig. You cannot change
these attributes later.

@param [in,out] me   pointer (see @ref oop)
@param [in]     act  pointer to the active object associated with this
                    time event. The time event will post itself to this AO.
@param [in]     sig  signal to associate with this time event.
@param [in]     tickRate systemclock tick rate to associate with this
                    time event in the range [0..15].

@note You should call the constructor exactly once for every Time Event
object <strong>before</strong> arming the Time Event. The ideal place for initializing
the time event(s) associated with a given AO is the AO's constructor.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_time_evt_1a9bbcb00315fb8bb8641003b2b2d07ce4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTimeEvt_armX';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvtCtr const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nTicks';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvtCtr const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'interval';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '495';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Arm a time event (one shot or periodic) for direct event posting.

Arms a time event to fire in a specified number of clock ticks and with
a specified interval. If the interval is zero, the time event is armed for
one shot ('one-shot' time event). When the timeout expires, the time event
gets directly posted (using the FIFO policy) into the event queue of the
host active object. After posting, a one-shot time event gets automatically
disarmed while a periodic time event (interval != 0) is automatically
re-armed.

A time event can be disarmed at any time by calling QTimeEvt_disarm().
Also, a time event can be re-armed to fire in a different number of clock
ticks by calling the QTimeEvt_rearm().

@param [in,out] me     pointer (see @ref oop)
@param [in]     nTicks number of clock ticks (at the associated rate)
                      to rearm the time event with.
@param [in]     interval interval (in clock ticks) for periodic time event.

@attention
Arming an already armed time event is <strong>not</strong> allowed and is considered
a programming error. The QP/C framework will assert if it detects an
attempt to arm an already armed time event.

@par Usage
The following example shows how to arm a one-shot time event from a state
machine of an active object:
@include qf_state.c
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_time_evt_1a3a5734e32caac22b89766a4b90a1679b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTimeEvt_rearm';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvtCtr const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nTicks';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '501';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Rearm a time event.

Rearms a time event with a new number of clock ticks. This function can
be used to adjust the current period of a periodic time event or to
prevent a one-shot time event from expiring (e.g., a watchdog time event).
Rearming a periodic timer leaves the interval unchanged and is a convenient
method to adjust the phasing of a periodic time event.

@param [in,out] me     pointer (see @ref oop)
@param [in]     nTicks number of clock ticks (at the associated rate)
                      to rearm the time event with.

@returns
'true' if the time event was running as it was re-armed. The 'false'
return means that the time event was not truly rearmed because it was
not running. The 'false' return is only possible for one-shot time events
that have been automatically disarmed upon expiration. In this case the
'false' return means that the time event has already been posted or
published and should be expected in the active object's state machine.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_time_evt_1a9d4bc166d6d02d43fe5621cdd29c5013';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTimeEvt_disarm';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '506';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Disarm a time event.

Disarm the time event so it can be safely reused.

@param [in,out] me     pointer (see @ref oop)

@returns
'true' if the time event was truly disarmed, that is, it was running.
The return of 'false' means that the time event was not truly disarmed,
because it was not running. The 'false' return is only possible for one-
shot time events that have been automatically disarmed upon expiration.
In this case the 'false' return means that the time event has already
been posted or published and should be expected in the active object's
state machine.

@note
there is no harm in disarming an already disarmed time event
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_time_evt_1a972d04658e1c8eec71da5976db433505';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTimeEvt_wasDisarmed';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '511';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Check the "was disarmed" status of a time event.

Useful for checking whether a one-shot time event was disarmed in the
QTimeEvt_disarm() operation.

@param [in,out] me   pointer (see @ref oop)

@returns
'true' if the time event was truly disarmed in the last QTimeEvt_disarm()
operation. The 'false' return means that the time event was not truly
disarmed, because it was not running at that time. The 'false' return is
only possible for one-shot time events that have been automatically disarmed
upon expiration. In this case the 'false' return means that the time event
has already been posted or published and should be expected in the active
object's event queue.

@note
This function has a <strong>side effect</strong> of setting the "was disarmed" status,
which means that the second and subsequent times this function is called
the function will return 'true'.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_time_evt_1a5d8fc8c4421ae5131408ca74bd8138de';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QTimeEvtCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QTimeEvt_currCtr';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt const *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '516';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Get the current value of the down-counter of a time event.

Useful for checking how many clock ticks (at the tick rate associated
with the time event) remain until the time event expires.

@param [in,out] me   pointer (see @ref oop)

@returns
For an armed time event, the function returns the current value of the
down-counter of the given time event. If the time event is not armed,
the function returns 0.

@note
The function is thread-safe.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_time_evt_1abb55c0996b3f57877b1023a6d1a89101';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '458';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
inherits ::QEvt 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_time_evt_1a0af89bee26e0c6f89e7006904bb27c2c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QTimeEvt *volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'next';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '461';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
link to the next time event in the list 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_time_evt_1a0b1ac98776b4600191b073622f7efc24';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void *volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'act';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '464';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
the active object that receives the time events 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_time_evt_1a139b8ef35b103acac907b2aa14a00fc7';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QTimeEvtCtr volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ctr';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '472';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal down-counter of the time event.
\ilinebr\ilinebr 
The down-counter is decremented by 1 in every QF_tickX_() invocation.
The time event fires (gets posted or published) when the down-counter
reaches zero.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_time_evt_1a53b3919aabc87ac01af63c60e95ac35d';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QTimeEvtCtr
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'interval';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      sec-mem-desc-line = '481';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
interval for periodic time event
(zero for one-shot time event)
\ilinebr\ilinebr 
The value of the interval is re-loaded to the internal down-counter
when the time event expires, so that the time event keeps timing out
periodically.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qf.h';
  cp-fileline  = '457';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Time Event class

\ilinebr\ilinebr 
Time events are special QF events equipped with the notion of time passage.
The basic usage model of the time events is as follows. An active object
allocates one or more ::QTimeEvt objects (provides the storage for them).
When the active object needs to arrange for a timeout, it arms one of its
time events to fire either just once (one-shot) or periodically. Each time
event times out independently from the others, so a QF application can make
multiple parallel timeout requests (from the same or different active
objects). When QF detects that the appropriate moment has arrived, it
inserts the time event directly into the recipient's event queue. The
recipient then processes the time event just like any other event.

Time events, as any other QF events derive from the ::QEvt base structure.
Typically, you will use a time event as-is, but you can also further
derive more specialized time events from it by adding some more data
members and/or specialized functions that operate on the specialized
time events.

Internally, the armed time events are organized into linked lists&ndash;one list
for every supported ticking rate. These linked lists are scanned in every
invocation of the QF_TICK_X() macro. Only armed (timing out) time events
are in the list, so only armed time events consume CPU cycles.

@sa ::QTimeEvt for the description of the data members @n @ref oop

@note
QF manages the time events in the QF_TICK_X() macro, which must be called
periodically, from the clock tick ISR or from other periodic source.
QF_TICK_X() caYou might also use the special ::QTicker
active object.

@note
Even though ::QTimeEvt is a subclass of ::QEvt, ::QTimeEvt instances can NOT
be allocated dynamically from event pools. In other words, it is illegal to
allocate ::QTimeEvt instances with the Q_NEW() or Q_NEW_X() macros.
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '1';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'qxk_8h';
  cp-name   = 'QXK_PrivAttr';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1a6b10f8694c2155e3152ca5c935c23588';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QActive *volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'curr';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '64';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
current thread pointer (NULL=basic) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1aae41531cac5abe57f824ca8825b4fe94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QActive *volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'next';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '65';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
next thread pointer to execute 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1acfcf05755165c40b86f38f2416c619b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'actPrio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '66';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
prio of the active AO 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1a36bdd97177b7ac1ae7fa0d2a1ea433ab';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lockPrio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '67';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
lock prio (0 == no-lock) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1aff9b1151ed0af2d39ee445372f8208aa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lockHolder';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '68';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
prio of the lock holder 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1aef94e68fcb40d50452d00059d2539d63';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'intNest';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '69';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
ISR nesting level 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1a5c8ebc32bb084a661a6f79194eb8901e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct QActive *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'idleThread';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
pointer to the idle thread 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'qxk_8h_1a1c45fe2c4a2445a557574e7a916faaaf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'readySet';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      sec-mem-desc-line = '71';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
ready-set of all threads 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qxk.h';
  cp-fileline  = '63';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
attributes of the QXK kernel 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 11;
        node-label = 'QPSet';
        node-link = {
          node-link-id = 'qpset_8h#struct_q_p_set';
        };
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '6';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QXK_PrivAttr';
        node-link = {
          node-link-id = 'qxk_8h#struct_q_x_k___priv_attr';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+curr
+idleThread
+next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '11';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+readySet
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_x_mutex';
  cp-name   = 'QXMutex';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_mutex_1af446f227f03a1a71b5e064271b5da64f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXMutex_init';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ceiling';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '255';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
initialize the QXK priority-ceiling mutex ::QXMutex
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_mutex_1a607a7442c8e54a46f404fcdf908cacf8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXMutex_lock';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nTicks';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '260';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
lock the QXK priority-ceiling mutex ::QXMutex
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_mutex_1a32649853d09120e9d1256f5d115acaa8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXMutex_tryLock';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '266';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
try to lock the QXK priority-ceiling mutex ::QXMutex
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_mutex_1abc0780c17e77df45132fe218324bdf4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXMutex_unlock';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '271';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
unlock the QXK priority-ceiling mutex ::QXMutex
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_mutex_1ab7f603a22e6cbc0d27a31d338cad5eb6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'waitSet';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '246';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
set of extended-threads waiting on this mutex 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_mutex_1a68e931bdcab495826d4d0ec5f5f90941';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lockNest';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '247';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
lock-nesting up-down counter 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_mutex_1a76f6eb37479292d31c97162e60ccb78e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'holderPrio';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '248';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
priority of the lock holder thread 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_mutex_1aeae41d9c3a19d945957a534257e30792';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ceiling';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '249';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
prioirty ceiling of this mutex 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qxthread.h';
  cp-fileline  = '245';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Blocking Mutex the QXK preemptive kernel
\ilinebr\ilinebr 
::QXMutex is a blocking mutual exclusion mechanism that can also apply
the <strong>priority ceiling protocol</strong> to avoid unbounded priority inversion
(if initialized with a non-zero ceiling priority, see QXMutex_init()).
In that case, ::QXMutex requires its own uinque QP priority level, which
cannot be used by any thread or any other ::QXMutex.
If initialized with zero ceiling priority, ::QXMutex does <strong>not</strong> use the
priority ceiling protocol and does not require a unique QP priority
(see QXMutex_init()).
::QXMutex is <strong>recursive</strong> (reentrant), which means that it can be locked
multiple times (up to 255 levels) by the <em>same</em> thread without causing
deadlock.
::QXMutex is primarily intended for the @ref ::QXThread
"extened (blocking) threads", but can also be used by the @ref ::QActive
"basic threads" through the non-blocking QXMutex_tryLock() API.

@note
::QXMutex should be used in situations when at least one of the extended
threads contending for the mutex blocks while holding the mutex (between
the QXMutex_lock() and QXMutex_unlock() operations). If no blocking is
needed while holding the mutex, the more efficient non-blocking mechanism
of @ref QXK_schedLock() "selective QXK scheduler locking" should be used
instead. @ref QXK_schedLock() "Selective scheduler locking" is available
for both @ref ::QActive "basic threads" and @ref ::QXThread "extended
threads", so it is applicable to situations where resources are shared
among all these threads.

@sa
- QXMutex_init()
- QXMutex_lock()
- QXMutex_tryLock()
- QXMutex_unlock()

@par Usage
The following example illustrates how to instantiate and use the mutex
in your application.
@include qxk_mutex.c
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QPSet';
        node-link = {
          node-link-id = 'qpset_8h#struct_q_p_set';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QXMutex';
        node-link = {
          node-link-id = 'struct_q_x_mutex';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+waitSet
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_x_semaphore';
  cp-name   = 'QXSemaphore';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_semaphore_1a25c3d21c629fb4d36aedc9e127ae3c75';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXSemaphore_init';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'count';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'max_count';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '186';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
initialize the counting semaphore
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_semaphore_1a93c62839759971359392742618d58e70';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXSemaphore_wait';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nTicks';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '192';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
wait (block) on the semaphore
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_semaphore_1a7caf16a6092236c4118adfc2ed52cb02';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXSemaphore_tryWait';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '198';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
try wait on the semaphore (non-blocking)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_semaphore_1a0a42fa24556ea0d0a203d28555b70108';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXSemaphore_signal';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '203';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
signal (unblock) the semaphore
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_semaphore_1ab7f603a22e6cbc0d27a31d338cad5eb6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'waitSet';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '178';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
set of extended-threads waiting on this semaphore 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_semaphore_1a03dc22517930088f261552aa6318b532';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t volatile
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'count';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '179';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
semaphore up-down counter 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_semaphore_1a7b50573c335728800d65f3fb5479f9bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'max_count';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '180';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
maximum value of the semaphore counter 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qxthread.h';
  cp-fileline  = '177';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Counting Semaphore of the QXK preemptive kernel
\ilinebr\ilinebr 
::QXSemaphore is a blocking mechanism intended primarily for signaling
@ref ::QXThread "extended threads". The semaphore is initialized with
the maximum count (see QXSemaphore_init()), which allows you to create
a binary semaphore (when the maximum count is 1) and
counting semaphore when the maximum count is > 1.

@sa
- QXSemaphore_init()
- QXSemaphore_signal()
- QXSemaphore_wait()
- QXSemaphore_tryWait()

@par Usage
The following example illustrates how to instantiate and use the semaphore
in your application.
@include qxk_sema.c
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QPSet';
        node-link = {
          node-link-id = 'qpset_8h#struct_q_p_set';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QXSemaphore';
        node-link = {
          node-link-id = 'struct_q_x_semaphore';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+waitSet
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'struct_q_x_thread';
  cp-name   = 'QXThread';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'struct_q_active';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_thread_1ab77e9607b3a59a6b655d8635d83db3e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXThread_delayCancel';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'me';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '147';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
cancel the delay
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_thread_1a13b6e44ab7e34319675593c31497a9cf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QActive
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'super';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '65';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
inherited ::QActive 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'struct_q_x_thread_1a90d5a4987dcdac90cf89d4fb965925d8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QTimeEvt
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'timeEvt';
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '66';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
time event to handle blocking timeouts 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_thread_1a3359902949e88279aea2760bb6c41e32';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXThread_delay';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nTicks';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '142';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
delay (block) the current extended thread for a specified # ticks
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'struct_q_x_thread_1acf510414216f5025ddefdc677f3b92c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QXThread_queueGet';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nTicks';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      sec-mem-desc-line = '152';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
obtain a message from the private message queue (block if no messages)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = 'C:/qp-dev/qpc/include/qxthread.h';
  cp-fileline  = '64';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
eXtended (blocking) thread of the QXK preemptive kernel

\ilinebr\ilinebr 
QXThread represents the eXtended (blocking) thread of the QXK preemptive
kernel. Each extended thread in the application must be represented by
the corresponding ::QXThread instance

@note
Typically, ::QXThread is instantiated directly in the application code.
The customization of the thread occurs in the QXThread_ctor(), where you
provide the thread-handler function as the parameter.

@sa
- ::QXThread
- QXThread_ctor()
- QXTHREAD_START()
- QXTHREAD_POST_X()
- QXThread_delay()
- QXThread_delayCancel()
- QXThread_queueGet()
- ::QActive

@par Usage
The following example illustrates how to instantiate and use an extended
thread in your application.
@include qxk_thread.c
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 2;
        node-label = 'QActive';
        node-link = {
          node-link-id = 'struct_q_active';
        };
        node-child = {
          child-id = '3';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'QEvt';
        node-link = {
          node-link-id = 'struct_q_evt';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'QHsm';
        node-link = {
          node-link-id = 'struct_q_hsm';
        };
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-vptr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-state
-temp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'QHsmAttr';
        node-link = {
          node-link-id = 'union_q_hsm_attr';
        };
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-fun
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '1';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-thr
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-obj
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-tatbl
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'QHsmVtable';
        node-link = {
          node-link-id = 'struct_q_hsm_vtable';
        };
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'QMState';
        node-link = {
          node-link-id = 'struct_q_m_state';
        };
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-superstate
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 8;
        node-label = 'QMTranActTable';
        node-link = {
          node-link-id = 'struct_q_m_tran_act_table';
        };
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-target
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'QTimeEvt';
        node-link = {
          node-link-id = 'struct_q_time_evt';
        };
        node-child = {
          child-id = '6';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
#super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-next
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'QXThread';
        node-link = {
          node-link-id = 'struct_q_x_thread';
        };
        node-child = {
          child-id = '2';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+super
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+timeEvt
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
file = {
  file-id   = 'misra_8dox';
  file-name = 'misra.dox';
  file-full-name  = 'C:/qp-dev/cert-pack/misra.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'sas_8dox';
  file-name = 'sas.dox';
  file-full-name  = 'C:/qp-dev/cert-pack/sas.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'sds_8dox';
  file-name = 'sds.dox';
  file-full-name  = 'C:/qp-dev/cert-pack/sds.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'srs_8dox';
  file-name = 'srs.dox';
  file-full-name  = 'C:/qp-dev/cert-pack/srs.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'help_8dox';
  file-name = 'help.dox';
  file-full-name  = 'C:/qp-dev/ql-doxygen/help.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'api_8dox';
  file-name = 'api.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/api.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'dir_8dox';
  file-name = 'dir.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/dir.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'exa_8dox';
  file-name = 'exa.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/exa.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'exa__mware_8dox';
  file-name = 'exa_mware.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/exa_mware.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'exa__native_8dox';
  file-name = 'exa_native.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/exa_native.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'exa__os_8dox';
  file-name = 'exa_os.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/exa_os.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'exa__qutest_8dox';
  file-name = 'exa_qutest.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/exa_qutest.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'exa__rtos_8dox';
  file-name = 'exa_rtos.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/exa_rtos.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'gs_8dox';
  file-name = 'gs.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/gs.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'history_8dox';
  file-name = 'history.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/history.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'macros_8h';
  file-name = 'macros.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a156525ce4ed9349b22aca5274d7cc432';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_NASSERT';
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '18';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
When defined, Q_NASSERT disables the following macros #Q_ASSERT,
#Q_REQUIRE, #Q_ENSURE, #Q_INVARIANT, #Q_ERROR as well as
#Q_ASSERT_ID, #Q_REQUIRE_ID, #Q_ENSURE_ID, #Q_INVARIANT_ID, and
#Q_ERROR_ID do <em>not</em> evaluate the test condition passed as the
argument to these macros.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The preprocessor switch to disable checking assertions

@note The notable exceptions are the macros #Q_ALLEGE and
#Q_ALLEGE_ID, that still evaluate the test condition, but do not
report assertion failures when the switch #Q_NASSERT is defined.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a668b5df6d955d0b1c77227192078689b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_SPY';
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '27';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
When defined, Q_SPY activates the QS software tracing instrumentation.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The preprocessor switch to activate the QS software tracing
instrumentation in the code
When Q_SPY is not defined, the QS instrumentation in the code does
not generate any code.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a40cfa12d85dac9acf81031dbbc6ab03c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_UTEST';
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '35';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The preprocessor switch to activate the QUTest unit testing
instrumentation in the code@note
This macro requires that #Q_SPY be defined as well.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a6fe4f9d0a79376c9d457fcb4aab5b08f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_EVT_CTOR';
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The preprocessor switch to enable constructor in the ::QEvt class
instrumentation in the code \xrefitem srs_tr 4.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1ae5bd9d2bd80006cdbcd21d2acdb91d86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_THREAD_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
void*
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro defines the type of the thread handle used for AOs 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1aee19c1d6e860d59dda6e539852b99dbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EQUEUE_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QEQueue
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro defines the type of the event-queue used for AOs 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a7afba9d8bef1f7eab181e7fb3f74eb5e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_OS_OBJECT_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
pthread_cond_t
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro defines the type of the OS-Object used for blocking
the native ::QEQueue when the queue is empty\ilinebr\ilinebr 
This macro is used when ::QEQueue is used as the event-queue for AOs
but also the AO queue must <em>block</em> when the queue is empty.
In that case, #QF_OS_OBJECT_TYPE specifies the blocking mechanism.
For examle, in the POSIX port, the blocking mechanism is a condition
variable.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1ae2426ed9b8543cbbccde98023d7773a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_WAIT_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (Q_ASSERT((me_)->eQueue.frontEvt != (QEvt *)0))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Platform-dependent macro defining how QF should block the
calling task when the QF native queue is empty@note This is just an example of QACTIVE_EQUEUE_WAIT_() for the QK-port
of QF. QK never activates a task that has no events to process, so in
this case the macro asserts that the queue is not empty. In other QF
ports you need to define the macro appropriately for the underlying
kernel/OS you're using.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1ad4ad4a29e36b9ad8e2aff0e7074c2a68';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_SIGNAL_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {       \
        QPSet8_insert(&QK_readySet_, (me_)->prio); \
        if (QK_intNest_ == 0U) {                   \
            uint_fast8_t p = QK_schedPrio_();      \
            if (p != 0U) {                         \
                QK_sched_(p);                      \
            }                                      \
        }                                          \
    } while (0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1ab786be96ee118929bfb4dcd51d3acce5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_TYPE_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QMPool
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '116';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro defines the type of the event pool used in the QK kernel.@note This is a specific implementation for the QK-port of QF.
In other QF ports you need to define the macro appropriately for
the underlying kernel/OS you're using.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a606cc116164e722ae952c031623fe6d1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QK_ON_CONTEXT_SW';
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '120';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro enables calling the QK context-switch callback
QK_onContextSw() 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a4cc251a9cba375c2b6f9749d95503b35';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXK_ON_CONTEXT_SW';
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro enables calling the QXK context-switch callback
QXK_onContextSw() 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1af536ec576d2f03b68bcf38ca0c8b918d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_INIT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSize_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'evtSize_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QMPool_init(&(p_), (poolSto_), (poolSize_), (QMPoolSize)(evtSize_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Platform-dependent macro defining the event pool initialization@note
This is an example implementation based on the native ::QMPool class.
In other QF ports, the port might be using a memory pool from the
underlying kernel/OS.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a920e9b4f47e69079a12bf79a3c43a058';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_EVENT_SIZE_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QEvtSize)(p_).blockSize)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '143';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Platform-dependent macro defining how QF should obtain the
event pool block-size@note This is a specific implementation for the QK-port of QF.
In other QF ports you need to define the macro appropriately for
the underlying kernel/OS you're using.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a3b61985b774f4bf6cc244a93d8dbad9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_GET_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'm_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((e_) = (QEvt *)QMPool_get(&(p_), (m_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '153';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Platform-dependent macro defining how QF should obtain an event
@a e_ from the event pool @a p_ with the free margin @a m_.@note
This is an example implementation based on the native ::QMPool class.
In other QF ports, the port might be using a memory pool from the
underlying kernel/OS.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a29ff805ad5ae20a3df335f119d3e1abc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_PUT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QMPool_put(&(p_), (e_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '164';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Platform-dependent macro defining how QF should return an event
@a e_ to the event pool @a p_@note
This is an example implementation based on the native ::QMPool class.
In other QF ports, the port might be using a memory pool from the
underlying kernel/OS.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'macros_8h_1a8f79859d1e9f6f0a55e722dfe573c547';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'WIN32_GUI';
      define-mem-desc-file = 'C:/qp-dev/qpc/doxygen/macros.h';
      define-mem-desc-line = '175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro that should be defined (typically on the compiler's command line)
in the Win32-GUI applications that use the @ref win32 or @ref win32-qv ports.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/doxygen/macros.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Various macros for configuring and porting QP/C.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'main_8dox';
  file-name = 'main.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/main.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'metrics_8dox';
  file-name = 'metrics.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/metrics.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'modules_8dox';
  file-name = 'modules.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/modules.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'ports_8dox';
  file-name = 'ports.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/ports.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'ports__arm-cm_8dox';
  file-name = 'ports_arm-cm.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/ports_arm-cm.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'ports__native_8dox';
  file-name = 'ports_native.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/ports_native.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'ports__os_8dox';
  file-name = 'ports_os.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/ports_os.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'ports__rtos_8dox';
  file-name = 'ports_rtos.dox';
  file-full-name  = 'C:/qp-dev/qpc/doxygen/ports_rtos.dox';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qassert_8h';
  file-name = 'qassert.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a27042866331f49c9e9ff4f3ef459eaaf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_DEFINE_THIS_FILE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        static char const Q_this_module_[] = __FILE__;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Define the file name (with <tt>__FILE__</tt>) for assertions in this file
\ilinebr\ilinebr 
Macro to be placed at the top of each C/C++ module to define the
single instance of the file name string to be used in reporting
assertions in this module.

@note The file name string literal is defined by means of the standard
preprocessor macro <tt>__FILE__</tt>. However, please note that, depending
on the compiler, the <tt>__FILE__</tt> macro might contain the whole path name
to the file, which might be inconvenient to log assertions.
@note This macro should <strong>not</strong> be terminated by a semicolon.
@sa Q_DEFINE_THIS_MODULE()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a302498d7d57ae4196cb0745ac65959ae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_DEFINE_THIS_MODULE';
      define-mem-param  = {
        define-mem-def-name = 'name_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        static char const Q_this_module_[] = name_;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '103';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Define the user-specified module name for assertions in this file.
\ilinebr\ilinebr 
Macro to be placed at the top of each C/C++ module to define the
single instance of the module name string to be used in reporting
assertions in this module. This macro takes the user-supplied parameter
@p name_ instead of <tt>__FILE__</tt> to precisely control the name of the
module.

@param [in] name_ string constant representing the module name

@note This macro should <strong>not</strong> be terminated by a semicolon.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a41c3be2e4235ec0105fb56ca7d8ce10c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ASSERT';
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((test_) \
        ? (void)0 : Q_onAssert(&Q_this_module_[0], __LINE__))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
General purpose assertion.
\ilinebr\ilinebr 
Makes sure the @p test_ parameter is TRUE. Calls the Q_onAssert()
callback if the @p test_ expression evaluates to FALSE. This
macro identifies the assertion location within the file by means
of the standard <tt>__LINE__</tt> macro.

@param [in] test_ Boolean expression

@note the @p test_ is <strong>not</strong> evaluated if assertions are disabled
with the #Q_NASSERT switch.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a8808a28cad1ff01daf65ca8ee37de314';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ASSERT_ID';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((test_) \
        ? (void)0 : Q_onAssert(&Q_this_module_[0], (id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
General purpose assertion with user-specified assertion-id.
\ilinebr\ilinebr 
Makes sure the @p test_ parameter is TRUE. Calls the Q_onAssert()
callback if the @p test_ evaluates to FALSE. This assertion takes the
user-supplied parameter @p id_ to identify the location of this
assertion within the file. This avoids the volatility of using line
numbers, which change whenever a line of code is added or removed
upstream from the assertion.

@param [in] id_   ID number (unique within the module) of the assertion
@param [in] test_ Boolean expression

@note the @p test_ expression is <strong>not</strong> evaluated if assertions are
disabled with the #Q_NASSERT switch.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1aa0c75140aa3855c94e453b06567dcc28';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ALLEGE';
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT(test_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '151';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
General purpose assertion that <strong>always</strong> evaluates the @p test_
expression.
\ilinebr\ilinebr 
Like the Q_ASSERT() macro, except it <strong>always</strong> evaluates the @p test_
expression even when assertions are disabled with the #Q_NASSERT macro.
However, when the #Q_NASSERT macro is defined, the Q_onAssert()
callback is <strong>not</strong> called, even if @p test_ evaluates to FALSE.

@param [in] test_ Boolean expression (<strong>always</strong> evaluated)

@sa #Q_ALLEGE_ID
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a798f2ff2f4aca178521d941202433b24';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ALLEGE_ID';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT_ID((id_), (test_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '165';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
General purpose assertion with user-specified assertion-id that
<strong>always</strong> evaluates the @p test_ expression.
\ilinebr\ilinebr 
Like the Q_ASSERT_ID() macro, except it <strong>always</strong> evaluates the
@p test_ expression even when assertions are disabled with the
#Q_NASSERT macro. However, when the #Q_NASSERT macro is defined, the
Q_onAssert() callback is <strong>not</strong> called, even if @p test_ evaluates
to FALSE.

@param [in] id_   ID number (unique within the module) of the assertion
@param [in] test_ Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1ab1ae5250c48b22d63e31a4441dd2bc04';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ERROR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        Q_onAssert(&Q_this_module_[0], __LINE__)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '173';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion for a wrong path through the code.
\ilinebr\ilinebr 
Calls the Q_onAssert() callback if ever executed.

@note Does noting if assertions are disabled with the #Q_NASSERT switch.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1ae16bddd04e54835e5bf8cbbb0ae90d30';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ERROR_ID';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        Q_onAssert(&Q_this_module_[0], (id_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '188';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion with user-specified assertion-id for a wrong path
\ilinebr\ilinebr 
Calls the Q_onAssert() callback if ever executed. This assertion
takes the user-supplied parameter @p id_ to identify the location of
this assertion within the file. This avoids the volatility of using
line numbers, which change whenever a line of code is added or removed
upstream from the assertion.

@param [in] id_   ID number (unique within the module) of the assertion

@note Does noting if assertions are disabled with the #Q_NASSERT switch.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a3c9a47863f0f4254858b3387335869cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_NORETURN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '200';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
no-return function specifier 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1aec56e7916b37bc829c3ac56f0ff72ace';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_REQUIRE';
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT(test_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '243';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion for checking preconditions.
\ilinebr\ilinebr 
This macro is equivalent to #Q_ASSERT, except the name provides a better
documentation of the intention of this assertion.

@param [in] test_ Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1abacf59f21a2f59dc79ca39bb1ab9c3c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_REQUIRE_ID';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT_ID((id_), (test_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '253';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion for checking preconditions with user-specified assertion-id.
\ilinebr\ilinebr 
Equivalent to #Q_ASSERT_ID, except the macro name provides a better
documentation of the intention of this assertion.

@param [in] id_   ID number (unique within the module) of the assertion
@param [in] test_ Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1afe5556fc65795961842eb7b9df0f7d21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ENSURE';
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT(test_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '262';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion for checking postconditions.
\ilinebr\ilinebr 
Equivalent to #Q_ASSERT, except the macro name provides a better
documentation of the intention of this assertion.

@param [in] test_ Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1aa8639670682ec29addc58801137f1e23';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ENSURE_ID';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT_ID((id_), (test_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '272';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion for checking postconditions with user-specified assertion-id.
\ilinebr\ilinebr 
Equivalent to #Q_ASSERT_ID, except the name provides a better documentation
of the intention of this assertion.

@param [in] id_   ID number (unique within the module) of the assertion
@param [in] test_ Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a898082267fb574d04dc86c82f76a46ab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_INVARIANT';
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT(test_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '281';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion for checking invariants.
\ilinebr\ilinebr 
Equivalent to #Q_ASSERT, except the macro name provides a better
documentation of the intention of this assertion.

@param [in] test_ Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1aece62bcb3b8dbc7f070fb32a8b5ae184';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_INVARIANT_ID';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT_ID((id_), (test_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '291';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Assertion for checking invariants with user-specified assertion-id.
\ilinebr\ilinebr 
Equivalent to #Q_ASSERT_ID, except the macro name provides a better
documentation of the intention of this assertion.

@param [in] id_   ID number (unique within the module) of the assertion
@param [in] test_ Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a5085962c9154ee45b5f210d7a56ad2db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ASSERT_STATIC';
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    extern int_t Q_assert_static[(test_) ? 1 : -1]
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '302';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Static (compile-time) assertion.
\ilinebr\ilinebr 
This type of assertion deliberately causes a compile-time error when
the @p test_ evaluates to FALSE. The macro exploits the fact that in C/C++
a dimension of an array cannot be negative. The compile-time assertion has
no runtime side effects.

@param [in] test_ Compile-time Boolean expression
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1a17f551ed8492f013d533f27353c091a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ASSERT_COMPILE';
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT_STATIC(test_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '305';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qassert_8h_1ad58d2c6dc25f8f0f764eb69faa79eee2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_DIM';
      define-mem-param  = {
        define-mem-def-name = 'array_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(sizeof(array_) / sizeof((array_)[0U]))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      define-mem-desc-line = '308';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Helper macro to calculate static dimension of a 1-dim @p array_ 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qassert_8h_1ab6fd6105e64ed14a0c9281326f05e623';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'int_t';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      typedef-mem-desc-line = '71';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
@note
This header file can be used in C, C++, and mixed C/C++ programs.

@note
The preprocessor switch #Q_NASSERT disables checking assertions.
However, it is generally <strong>not</strong> advisable to disable assertions,
<strong>especially</strong> in the production code. Instead, the assertion handler
Q_onAssert() should be very carefully designed and tested.


typedef for assertions-ids and line numbers in assertions.
\ilinebr\ilinebr 
This typedef specifies integer type for exclusive use in assertions.
Use of this type, rather than plain 'int', is in compliance
with the MISRA-C 2012 Dir 4.6 (adv).
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qassert_8h_1ac75998ccf668a201239fe6522b72bf5f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
Q_NORETURN
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Q_onAssert';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'module';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'location';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qassert.h';
      func-mem-desc-line = '230';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback function invoked in case of any assertion failure.
\ilinebr\ilinebr 
This is an application-specific callback function needs to be defined in
the application to perform the clean system shutdown and perhaps a reset.

@param [in] module name of the file/module in which the assertion failed
                  (constant, zero-terminated C string)
@param [in] location location of the assertion within the module. This could
                  be a line number or a user-specified ID-number.

@note This callback function should <em>not</em> return, as continuation after
an assertion failure does not make sense.

@note The Q_onAssert() function is the last line of defense after the
system failure and its implementation shouild be very <strong>carefully</strong>
designed and <strong>tested</strong> under various fault conditions, including but
not limited to: stack overflow, stack corruption, or calling Q_onAssert()
from an interrupt.

@note It is typically a <strong>bad idea</strong> to implement Q_onAssert() as an
endless loop that ties up the CPU. During debuggin, Q_onAssert() is an
ideal place to put a breakpoint.

Called by the following macros: #Q_ASSERT, #Q_REQUIRE, #Q_ENSURE,
#Q_ERROR, #Q_ALLEGE as well as #Q_ASSERT_ID, #Q_REQUIRE_ID, #Q_ENSURE_ID,
#Q_ERROR_ID, and #Q_ALLEGE_ID.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qassert.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Customizable and memory-efficient assertions for embedded systems.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qep_8h';
  file-name = 'qep.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__qp_1ga21fcdb74849c8fd1d32a749efb3cf118';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QP_VERSION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
700U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '46';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The current QP version as a decimal constant XXYZ, where XX is a 2-digit
major version number, Y is a 1-digit minor version number, and Z is
a 1-digit release number.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__qp_1ga517ef834bd05c021744f48be661a0986';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QP_VERSION_STR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
"7.0.0"
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The current QP version number string of the form XX.Y.Z, where XX is
a 2-digit major version number, Y is a 1-digit minor version number,
and Z is a 1-digit release number.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__qp_1gaa0c97f6a3b9a00fcd4f4733fb99cc0ab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QP_RELEASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CCAAA13U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '56';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Encrypted  current QP release (7.0.0) and date (2022-01-31)
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1afdaa94c40e947b0340b4259eddce3561';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_SIGNAL_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '99';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The size (in bytes) of the signal of an event. Valid values:
1U, 2U, or 4U; default 2U
\ilinebr\ilinebr 
This macro can be defined in the QEP port file (qep_port.h) to
configure the ::QSignal type. When the macro is not defined, the
default of 2 bytes is applied.

 \xrefitem srs_tr 6.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a9f117cb1bc50e9ef4dcc933533ccdd7f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_EVT_CAST';
      define-mem-param  = {
        define-mem-def-name = 'class_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((class_ const *)e)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Perform downcast of an event onto a subclass of ::QEvt @p class_
\ilinebr\ilinebr 
::QEvt represents events without parameters and serves as the base class
This macro encapsulates the downcast of ::QEvt pointers, which violates
MISRA-C 2012 Rule 11.3(R) "A cast shall not be performed between a
pointer to object type and a pointer to a different object type". This
macro helps to localize this deviation.

 \xrefitem srs_tr 9.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a7a86725df60bb442ac834093a779726f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_UINT2PTR_CAST';
      define-mem-param  = {
        define-mem-def-name = 'type_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'uintptr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((type_ *)(uintptr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '182';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Perform cast from unsigned integer pointer @p uintptr_ to pointer
of type @p type_.
\ilinebr\ilinebr 
This macro encapsulates the cast to (type_ *), which QP ports or
application might use to access embedded hardware registers.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a6531b0ab582f41275f19d28ac91d9e4f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_STATE_CAST';
      define-mem-param  = {
        define-mem-def-name = 'handler_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QStateHandler)(handler_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '212';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Perform cast to ::QStateHandler.
\ilinebr\ilinebr 
This macro encapsulates the cast of a specific state handler function
pointer to ::QStateHandler, which violates MISRA:C-2012 Rule 11.1(req)
"Conversions shall not be performed between a pointer to function and
any other type". This macro helps to localize this deviation.

 \xrefitem permit_tr 1.

@par Usage
@include qep_qhsm_ctor.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a7e1de8a050ac4678150ab96607c249fd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ACTION_CAST';
      define-mem-param  = {
        define-mem-def-name = 'action_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QActionHandler)(action_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '223';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Perform cast to ::QActionHandler.
\ilinebr\ilinebr 
This macro encapsulates the cast of a specific action handler function
pointer to ::QActionHandler, which violates MISRA:C-2012 Rule 11.1(R)
"Conversions shall not be performed between a pointer to function and
any other type". This macro helps to localize this deviation.

 \xrefitem permit_tr 2.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a00d0f110eb822b8c6614e67acc91d9da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QHSM_INIT';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'par_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {          \
        Q_ASSERT((me_)->vptr);                         \
        (*(me_)->vptr->init)((me_), (par_), (qs_id_)); \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '311';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Polymorphically executes the top-most initial transition in a HSM
@param [in,out] me_ pointer (see @ref oop)
@param [in]     e_  constant pointer the ::QEvt or a class derived from
                   ::QEvt (see @ref oop)
@param [in]     qs_id_ QS local filter ID

@note Must be called only ONCE after the SM "constructor".

 \xrefitem srs_tr 12.

@par Usage
The following example illustrates how to initialize a SM, and dispatch
events to it:
@include qep_qhsm_use.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a3e8f95402a96dbc25908eab72bc63035';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QHSM_DISPATCH';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((*(me_)->vptr->dispatch)((me_), (e_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '346';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Polymorphically dispatches an event to a HSM
\ilinebr\ilinebr 
Processes one event at a time in Run-to-Completion fashion.

@param [in,out] me_ pointer (see @ref oop)
@param [in]     e_  constant pointer the ::QEvt or a class
                   derived from ::QEvt (see @ref oop)
@note Must be called after the "constructor" and after QHSM_INIT().

 \xrefitem srs_tr 14.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a64c8ea5d2c6a79e4c215d07bdeb2f1b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_HSM_UPCAST';
      define-mem-param  = {
        define-mem-def-name = 'ptr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QHsm *)(ptr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '382';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Perform upcast from a subclass of ::QHsm to the base class ::QHsm
\ilinebr\ilinebr 
Upcasting from a subclass to superclass is a very frequent and <strong>safe</strong>
operation in object-oriented programming and object-oriented languages
(such as C++) perform such upcasting automatically. However, OOP is
implemented in C just as a set of coding conventions (see @ref oop),
and the C compiler does not "know" that certain types are related by
inheritance. Therefore for C, the upcast must be performed explicitly.
Unfortunately, pointer casting violates the advisory MISRA-C 2012
Rule 11.3(req) "A cast shall not be performed between a pointer to object
type and a pointer to a different object type". This macro encapsulates
this deviation and provides a descriptive name for the reason of this cast.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a8f06cd90ba5060780fc61a4810e3eb50';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_TRAN';
      define-mem-param  = {
        define-mem-def-name = 'target_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((Q_HSM_UPCAST(me))->temp.fun = Q_STATE_CAST(target_), (QState)Q_RET_TRAN)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '545';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a state-handler when it executes a regular
or and initial transition. Applicable only to ::QHsm subclasses.

 \xrefitem srs_tr 20.

@par Usage
@include qep_qtran.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1ac927f38462ffb9c8cca4e4f2920f8fcd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_TRAN_HIST';
      define-mem-param  = {
        define-mem-def-name = 'hist_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((Q_HSM_UPCAST(me))->temp.fun = (hist_), (QState)Q_RET_TRAN_HIST)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '556';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a state-handler when it executes a transition
to history. Applicable only to HSMs.

 \xrefitem srs_tr 21.

@par Usage
@include qep_qhist.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1ad8abd2f7098c41ec464343d9d8f1eadc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_SUPER';
      define-mem-param  = {
        define-mem-def-name = 'super_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((Q_HSM_UPCAST(me))->temp.fun = Q_STATE_CAST(super_), (QState)Q_RET_SUPER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '567';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a state-handler when it designates the
superstate of a given state. Applicable only to ::QHsm subclasses.
 \xrefitem srs_tr 22.

@par Usage

@include qep_qsuper.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a54b2da5e70ef983cfa7ca74deac237a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_HANDLED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QState)Q_RET_HANDLED)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '573';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a state-handler when it handles an event.
 \xrefitem srs_tr 23.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a40a035a3e4679f8b35d81a7f49a6d44f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_UNHANDLED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QState)Q_RET_UNHANDLED)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '579';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a state-handler when it attempts to handle
an event but a guard condition evaluates to 'false' and there is no other
explicit way of handling the event. Applicable only to ::QHsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1aeb993294cc885215f15c5d1238e8d392';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ACTION_NULL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QActionHandler)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '584';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to provide strictly-typed zero-action to terminate action lists
! in the transition-action-tables
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a1ce3343989b290f23c91d9d0fc4dc542';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_ENTRY';
      define-mem-param  = {
        define-mem-def-name = 'state_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((Q_HSM_UPCAST(me))->temp.obj = (state_), (QState)Q_RET_ENTRY)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '621';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM action-handler when it executes
an entry action. Applicable only to ::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1af44f060a04828a0d25a99f11dd078f4f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_EXIT';
      define-mem-param  = {
        define-mem-def-name = 'state_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((Q_HSM_UPCAST(me))->temp.obj = (state_), (QState)Q_RET_EXIT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '627';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM action-handler when it executes
an exit action. Applicable only to ::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a2940eb09177ef4fd3131f8fead11e242';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_SM_EXIT';
      define-mem-param  = {
        define-mem-def-name = 'state_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((Q_HSM_UPCAST(me))->temp.obj = (state_), (QState)Q_RET_EXIT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '640';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM submachine exit-handler.
Applicable only to subclasses of ::QMsm.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1af7e90f8b99a650f0550bfb45c5a99cdb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_TRAN';
      define-mem-param  = {
        define-mem-def-name = 'tatbl_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
      ((Q_HSM_UPCAST(me))->temp.tatbl \
      = (QMTranActTable const *)(tatbl_), (QState)Q_RET_TRAN)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '646';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when it executes a regular
transition. Applicable only to ::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a354ec4f0ce78c6dce35b515ee7917c51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_TRAN_INIT';
      define-mem-param  = {
        define-mem-def-name = 'tatbl_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((Q_HSM_UPCAST(me))->temp.tatbl \
    = (QMTranActTable const *)(tatbl_), (QState)Q_RET_TRAN_INIT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '652';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when it executes an initial
transition. Applicable only to ::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a14349d32e3cde9c71e97bb6935ea448e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_TRAN_HIST';
      define-mem-param  = {
        define-mem-def-name = 'history_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'tatbl_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((((Q_HSM_UPCAST(me))->state.obj  = (history_)),                        \
      ((Q_HSM_UPCAST(me))->temp.tatbl = (QMTranActTable const *)(tatbl_))), \
     (QState)Q_RET_TRAN_HIST)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '658';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when it executes a transition
to history. Applicable only to ::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a649323882007687fa56f0be276987bcc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_TRAN_EP';
      define-mem-param  = {
        define-mem-def-name = 'tatbl_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((Q_HSM_UPCAST(me))->temp.tatbl \
    = (QMTranActTable const *)(tatbl_), (QState)Q_RET_TRAN_EP)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '666';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when it executes a transition
to the submachine via an entry point.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1acfe0428063ed55b051d99585baf01173';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_TRAN_XP';
      define-mem-param  = {
        define-mem-def-name = 'xp_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'tatbl_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((((Q_HSM_UPCAST(me))->state.act  = (xp_)),                             \
      ((Q_HSM_UPCAST(me))->temp.tatbl = (QMTranActTable const *)(tatbl_))), \
     (QState)Q_RET_TRAN_XP)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '672';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when it executes a transition
to exit point. Applicable only to ::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a7cdc36248f29e47433f8c7a205d6e13d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_HANDLED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QState)Q_RET_HANDLED)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '680';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when it handled an event.
Applicable only to ::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a90bfe2bbb0ca60425fd915931948920a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_UNHANDLED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QState)Q_RET_UNHANDLED)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '687';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when when it attempts to
handle an event but a guard condition evaluates to 'false' and there is
no other explicit way of handling the event. Applicable only to
::QMsm subclasses.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a94c192e5d5d8576eac408836e5bdc39d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_SUPER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QState)Q_RET_SUPER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '692';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM state-handler when it designates the
superstate to handle an event. Applicable only to QMSMs.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1a2c9e045af99abb7b7c23adb63c034f0c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_SUPER_SUB';
      define-mem-param  = {
        define-mem-def-name = 'host_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((Q_HSM_UPCAST(me))->temp.obj = (host_), (QState)Q_RET_SUPER_SUB)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '697';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to call in a QM submachine-handler when it designates the
host state to handle an event. Applicable only to QMSMs.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep_8h_1abc3b399c7545e18255f8e57f3f60fbf9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QM_STATE_NULL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QMState *)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      define-mem-desc-line = '703';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to provide strictly-typed zero-state to use for submachines.
! Applicable to suclasses of QP::QMsm.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__qp_1ga022c65af7f6c8d3947e8a37d64db6ad6';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
signed int
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'int_t';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '62';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
typedef for line numbers in assertions and return from QF_run() 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__qp_1gaf733ec70b1a5d07446b01aada11dd8b9';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
signed int
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'enum_t';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '65';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
typedef for enumerations used for event signals 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__qp_1ga4611b605e45ab401f02cab15c5e38715';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
float
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'float32_t';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '73';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
IEEE 754 32-bit floating point number, MISRA-C 2012 Dir 4.6(A)
@note QP does not use floating-point types anywhere in the internal
implementation, except in QS software tracing, where utilities for
output of floating-point numbers are provided for application-specific
trace records.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__qp_1gac55f3ae81b5bc9053760baacf57e47f4';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'float64_t';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '81';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
IEEE 754 64-bit floating point number, MISRA-C 2012 Dir 4.6(A)
@note QP does not use floating-point types anywhere in the internal
implementation, except in QS software tracing, where utilities for
output of floating-point numbers are provided for application-specific
trace records.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qep_8h_1af55248e13cdc5784f0824c7615c41b7d';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QSignal';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '115';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
QSignal represents the signal of an event.
\ilinebr\ilinebr 
The relationship between an event and a signal is as follows. A signal
in UML is the specification of an asynchronous stimulus that triggers
reactions, and as such is an essential part of an event.
(The signal conveys the type of the occurrence-what happened?)
However, an event can also contain additional quantitative information
about the occurrence in form of event parameters.

 \xrefitem srs_tr 7.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qep_8h_1ad141f4e9efcba4613f82a8b2c76663ad';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QState';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '186';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
typedef of the return type from a state/action-handler functions. 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qep_8h_1a797a6e3e20119fcb0911cffb94e49543';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
QState(*
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QStateHandler';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '192';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
Pointer to a state-handler function. 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qep_8h_1ae6ffc980f83c8e9dc039dba0521ae856';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
QState(*
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QActionHandler';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '195';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
Pointer to an action-handler function. 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qep_8h_1ad9869d988b94fb3d5cdc1c6c07e5f6d6';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QXThreadHandler';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      typedef-mem-desc-line = '198';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
Pointer to a thread-handler function. 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qep_8h_1a06fc87d81c62e9abb8790b6e5713c55b';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = '@0';
      enum-mem-enum = { enum-name = Q_RET_SUPER; };
      enum-mem-enum = { enum-name = Q_RET_SUPER_SUB; };
      enum-mem-enum = { enum-name = Q_RET_UNHANDLED; };
      enum-mem-enum = { enum-name = Q_RET_HANDLED; };
      enum-mem-enum = { enum-name = Q_RET_IGNORED; };
      enum-mem-enum = { enum-name = Q_RET_ENTRY; };
      enum-mem-enum = { enum-name = Q_RET_EXIT; };
      enum-mem-enum = { enum-name = Q_RET_NULL; };
      enum-mem-enum = { enum-name = Q_RET_TRAN; };
      enum-mem-enum = { enum-name = Q_RET_TRAN_INIT; };
      enum-mem-enum = { enum-name = Q_RET_TRAN_EP; };
      enum-mem-enum = { enum-name = Q_RET_TRAN_HIST; };
      enum-mem-enum = { enum-name = Q_RET_TRAN_XP; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      enum-mem-desc-line = '590';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
All possible values returned from state/action handlers
@note The order matters for algorithmic correctness.
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qep_8h_1adf764cbdea00d65edcd07bb9953ad2b7';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = '@1';
      enum-mem-enum = { enum-name = Q_ENTRY_SIG; enum-value = '= 1'; };
      enum-mem-enum = { enum-name = Q_EXIT_SIG; };
      enum-mem-enum = { enum-name = Q_INIT_SIG; };
      enum-mem-enum = { enum-name = Q_USER_SIG; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      enum-mem-desc-line = '706';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
QEP reserved signals 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__qp_1gade1be4c4eaf67031f226e9781d2e5ee8';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
char const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QP_versionStr';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qep.h';
      var-mem-desc-line = '84';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the current QP version number string in ROM, based on #QP_VERSION_STR 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qep.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Public QEP/C interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0




 \xrefitem srs_tr 5.
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qequeue_8h';
  file-name = 'qequeue.h';
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qequeue_8h_1a3a5e050cce0e5fa8b5a87a788ef699ac';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QEQueueCtr';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      typedef-mem-desc-line = '64';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
The data type to store the ring-buffer counters based on
the macro #QF_EQUEUE_CTR_SIZE.
\ilinebr\ilinebr 
The dynamic range of this data type determines the maximum length
of the ring buffer managed by the native QF event queue.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qequeue_8h_1aecfc240f320a21985675c5e295d5c246';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QEQueue_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qLen';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      func-mem-desc-line = '159';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initialize the native QF event queue 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qequeue_8h_1aa5e9a98512fbf3414be7ab72895d8e65';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QEQueue_post';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'margin';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      func-mem-desc-line = '163';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Post an event to the "raw" thread-safe event queue (FIFO). 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qequeue_8h_1ae94dabfc9f0b3b1de9c81adc9b9c810c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QEQueue_postLIFO';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      func-mem-desc-line = '167';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Post an event to the "raw" thread-safe event queue (LIFO). 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qequeue_8h_1a34dc8e9f5211578b4a7b4e45b598bedd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const *
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QEQueue_get';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      func-mem-desc-line = '171';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtain an event from the "raw" thread-safe queue. 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qequeue_8h_1a5c9d34eb7a29b71f5b81c96f0df5bedc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static QEQueueCtr
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QEQueue_getNFree';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      func-mem-desc-line = '186';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
"raw" thread-safe QF event queue operation for obtaining the number
of free entries still available in the queue.
\ilinebr\ilinebr 
This operation needs to be used with caution because the number of free
entries can change unexpectedly. The main intent for using this operation
is in conjunction with event deferral. In this case the queue is accessed
only from a single thread (by a single AO),  so the number of free
entries cannot change unexpectedly.

@param [in] me pointer (see @ref oop)

@returns the current number of free slots in the queue.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qequeue_8h_1ad934605d33a3922341bee12c487d542e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static QEQueueCtr
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QEQueue_getNMin';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      func-mem-desc-line = '201';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
"raw" thread-safe QF event queue operation for obtaining the minimum
number of free entries ever in the queue (a.k.a. "low-watermark").
\ilinebr\ilinebr 
This operation needs to be used with caution because the "low-watermark"
can change unexpectedly. The main intent for using this operation is to
get an idea of queue usage to size the queue adequately.

@param [in] me  pointer (see @ref oop)

@returns the minimum number of free entries ever in the queue since init.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qequeue_8h_1a1f003377ee0f6356e8e92f34ab906abd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QEQueue_isEmpty';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEQueue *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qequeue.h';
      func-mem-desc-line = '218';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
"raw" thread-safe QF event queue operation to find out if the queue
is empty.
\ilinebr\ilinebr 
This operation needs to be used with caution because the queue status
can change unexpectedly. The main intent for using this operation is in
conjunction with event deferral. In this case the queue is accessed only
from a single thread (by a single AO), so no other entity can post
events to the queue.

@param [in] me_  pointer (see @ref oop)

@returns 'true' if the queue is current empty and 'false' otherwise.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qequeue.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QP natvie, platform-independent, thread-safe event queue interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0


\ilinebr\ilinebr 
This header file must be included in all QF ports that use native QF
event queue for active objects. Also, this file needs to be included
in the QP/C library when the application uses QActive_defer()/
QActive_recall(). Finally, this file is also needed when the "raw"
thread-safe queues are used for communication between active objects
and non-framework entities, such as ISRs, device drivers, or legacy
code.
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf_8h';
  file-name = 'qf.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1a3123ef03f5d66d866da12c736ac574b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_START';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'prio_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qLen_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'stkSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'stkLen_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'par_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    do { \
    Q_ASSERT((Q_HSM_UPCAST(me_))->vptr);                                     \
    (*((QActiveVtable const *)((Q_HSM_UPCAST(me_))->vptr))->start)(          \
        (QActive *)(me_), (prio_),                                           \
        (qSto_), (qLen_), (stkSto_), (stkLen_), (par_));                     \
} while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '205';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Polymorphically start an active object.
\ilinebr\ilinebr 
Starts execution of the AO and registers the AO with the framework.

@param [in,out] me_      pointer (see @ref oop)
@param [in]     prio_    priority at which to start the active object
@param [in]     qSto_    pointer to the storage for the ring buffer of the
                        event queue (used only with the built-in ::QEQueue)
@param [in]     qLen_    length of the event queue (in events)
@param [in]     stkSto_  pointer to the stack storage (used only when
                        per-AO stack is needed)
@param [in]     stkSize_ stack size (in bytes)
@param [in]     par_     pointer to the additional port-specific parameter(s)
                        (might be NULL).
@par Usage
@include qf_start.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1ab7c56990d949c8708e3fe2b737f2e65c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_POST';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sender_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((void)(*((QActiveVtable const *)((Q_HSM_UPCAST(me_))->vptr))->post)(\
            (me_), (e_), QF_NO_MARGIN, (sender_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '237';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Polymorphically posts an event to an active object (FIFO)
with delivery guarantee.
\ilinebr\ilinebr 
This macro asserts if the queue overflows and cannot accept the event.

@param [in,out] me_   pointer (see @ref oop)
@param [in]     e_    pointer to the event to post
@param [in]     sender_ pointer to the sender object.

@note
The @p sendedr_ parameter is actually only used when QS tracing
is enabled (macro #Q_SPY is defined). When QS software tracing is
disenabled, the QACTIVE_POST() macro does not pass the @p sender_
argument, so the overhead of passing this extra argument is entirely
avoided.

@note
The pointer to the sender object is not necessarily a pointer
to an active object. In fact, if QACTIVE_POST() is called from an
interrupt or other context, you can create a unique object just to
unambiguously identify the sender of the event.

@sa #QACTIVE_POST_X, QActive_post_().
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1a766856b24aa5163b7ca90bc3432f1e3e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_POST_X';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'margin_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sender_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((*((QActiveVtable const *)((Q_HSM_UPCAST(me_))->vptr))->post)((me_),\
         (e_), (margin_), (sender_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '274';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Polymorphically posts an event to an active object (FIFO)
without delivery guarantee.
\ilinebr\ilinebr 
This macro does not assert if the queue overflows and cannot accept
the event with the specified margin of free slots remaining.

@param [in,out] me_   pointer (see @ref oop)
@param [in]     e_    pointer to the event to post
@param [in]     margin_ the minimum free slots in the queue, which
               must still be available after posting the event.
               The special value #QF_NO_MARGIN causes asserting failure
               in case event allocation fails.
@param [in]     sender_ pointer to the sender object.

@returns 'true' if the posting succeeded, and 'false' if the posting
failed due to insufficient margin of free slots available in the queue.

@note
The @p sender_ parameter is actually only used when QS tracing
is enabled (macro #Q_SPY is defined). When QS software tracing is
disabled, the QACTIVE_POST() macro does not pass the @p sender_
argument, so the overhead of passing this extra argument is entirely
avoided.

@note
The pointer to the sender object is not necessarily a pointer
to an active object. In fact, if QACTIVE_POST_X() is called from an
interrupt or other context, you can create a unique object just to
unambiguously identify the sender of the event.

@par Usage
@include qf_postx.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1a2f94b69fa7148180c19d501ce2ee7032';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_POST_LIFO';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((*((QActiveVtable const *)((Q_HSM_UPCAST(me_))->vptr))->postLIFO)( \
        (me_), (e_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '294';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Polymorphically posts an event to an active object using the
Last-In-First-Out (LIFO) policy.
@param [in,out] me_   pointer (see @ref oop)
@param [in]     e_    pointer to the event to post
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1afd57334f2a1664a168b0702a106e0782';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_PUBLISH';
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sender_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (QF_publish_((e_), (void const *)(sender_), (sender_)->prio))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '628';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Invoke the event publishing facility.
\ilinebr\ilinebr 
This macro is the recommended way of publishing events, because it
provides the vital information for software tracing and avoids any
overhead when the tracing is disabled.

@param [in] e_      pointer to the posted event
@param [in] sender_ pointer to the sender object. This argument is
           actually only used when QS software tracing is enabled
           (macro #Q_SPY is defined). When QS software tracing is
           disabled, the macro calls QF_publish_() without the
           @p sender_ parameter, so the overhead of passing this
           extra argument is entirely avoided.
@note
the pointer to the sender object is not necessarily a pointer
to an active object. In fact, if QF_PUBLISH() is called from an
interrupt or other context, you can create a unique object just to
unambiguously identify the publisher of the event.

@sa QF_publish_().
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1a1f1970e16f4d010b5e5b2fd046aac41e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_TICK_X';
      define-mem-param  = {
        define-mem-def-name = 'tickRate_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sender_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QF_tickX_((tickRate_), (sender_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '677';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Invoke the system clock tick processing QF_tickX_().
\ilinebr\ilinebr 
This macro processes all armed ::QTimeEvt objects associated with
the tick rate @p tickRate_ .

@param [in] tickRate_ clock tick rate to be serviced through this call
@param [in] sender_   pointer to the sender object. This parameter
           is actually used only when QS software tracing is enabled
           (macro #Q_SPY is defined)
@note
When QS software tracing is disabled, the macro calls QF_tickX_()
without the @p sender_ parameter, so the overhead of passing this
extra parameter is entirely avoided.

@note
The pointer to the sender object is not necessarily a pointer
to an active object. In fact, when #QF_TICK_X() is called from
an interrupt, you would create a unique object just to unambiguously
identify the ISR as the sender of the time events.

@par Usage
The following example shows how to invoke QF_TICK_X() for different
system tick rates:
@include qf_tickx.c

@sa ::QTimeEvt
@sa QTimeEvt_ctorX()
@sa QF_tickX_()
@sa QF_TICK()
@sa QXThread_ctor()
@sa QXThread_delay()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1a3c1957439cb1ecff92be7b7401bf3159';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_NO_MARGIN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((uint_fast16_t)0xFFFFU)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '689';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
special value of margin that causes asserting failure in case
event allocation or event posting fails
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1a095356f76aa32cb738325abfa55e96fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_TICK';
      define-mem-param  = {
        define-mem-def-name = 'sender_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QF_TICK_X(0U, (sender_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '694';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Invoke the system clock tick processing for tick rate 0
@sa QF_TICK_X()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1abd823f3a9e8b3206a3460a108d5fa3e3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_NEW';
      define-mem-param  = {
        define-mem-def-name = 'evtT_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sig_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
                           QF_NO_MARGIN, (enum_t)(sig_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '775';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Allocate a dynamic event.
\ilinebr\ilinebr 
The macro calls the internal QF function QF_newX_() with
margin == #QF_NO_MARGIN, which causes an assertion when the event
cannot be successfully allocated.

@param [in] evtT_ event type (class name) of the event to allocate
@param [in] sig_  signal to assign to the newly allocated event

@returns a valid event pointer cast to the type @p evtT_.

@note
If Q_EVT_CTOR is defined, the Q_NEW() macro becomes variadic and
takes all the arguments needed by the constructor of the event
class being allocated. The constructor is then called by means
of the placement-new operator.

@par Usage
The following example illustrates dynamic allocation of an event:
@include qf_post.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1aa52b4d3c43a262022392c6e11be06436';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_NEW_X';
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'evtT_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'margin_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sig_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((e_) =   \
        (evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
                          (margin_), (enum_t)(sig_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '805';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Allocate a dynamic event (non-asserting version).
\ilinebr\ilinebr 
This macro allocates a new event and sets the pointer @p e_, while
leaving at least @p margin_ of events still available in the pool

@param [in,out] e_  pointer to the newly allocated event
@param [in] evtT_   event type (class name) of the event to allocate
@param [in] margin_ number of events that must remain available
                   in the given pool after this allocation. The special
                   value #QF_NO_MARGIN causes asserting failure in case
                   event allocation or event posting fails.
@param [in] sig_    signal to assign to the newly allocated event

@returns an event pointer cast to the type @p evtT_ or NULL if the
event cannot be allocated with the specified @p margin.

@note
If Q_EVT_CTOR is defined, the Q_NEW_X() macro becomes variadic and
takes all the arguments needed by the constructor of the event
class being allocated. The constructor is then called and all the
extra arguments are passed to it.

@par Usage
The following example illustrates dynamic allocation of an event:
@include qf_postx.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1a10162978b156ab5d2fd2e3a7aa744ac0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_NEW_REF';
      define-mem-param  = {
        define-mem-def-name = 'evtRef_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'evtT_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ((evtRef_) = (evtT_ const *)QF_newRef_(e, (evtRef_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '830';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Create a new reference of the current event <tt>e</tt>
\ilinebr\ilinebr 
The current event processed by an active object is available only for
the duration of the run-to-completion (RTC) step. After that step, the
current event is no longer available and the framework might recycle
(garbage-collect) the event. The macro Q_NEW_REF() explicitly creates
a new reference to the current event that can be stored and used beyond
the current RTC step, until the reference is explicitly recycled by
means of the macro Q_DELETE_REF().

@param [in,out] evtRef_  event reference to create
@param [in]     evtT_    event type (class name) of the event reference

@par Usage
The example <strong>defer</strong> in the directory <tt>examples/win32/defer</tt> illustrates
the use of Q_NEW_REF()

@sa Q_DELETE_REF()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1aaed009a86c52cf2b8d811389fabb5f23';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_DELETE_REF';
      define-mem-param  = {
        define-mem-def-name = 'evtRef_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    do { \
    QF_deleteRef_((evtRef_));      \
    (evtRef_) = (void *)0;         \
} while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '847';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Delete the event reference
\ilinebr\ilinebr 
Every event reference created with the macro Q_NEW_REF() needs to be
eventually deleted by means of the macro Q_DELETE_REF() to avoid leaking
the event.

@param [in,out] evtRef_  event reference to delete

@par Usage
The example <strong>defer</strong> in the directory <tt>examples/win32/defer</tt> illustrates
the use of Q_DELETE_REF()

@sa Q_NEW_REF()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf_8h_1adc8820f52d450bcfb7d1f830e6c8a8c2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_CRIT_EXIT_NOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      define-mem-desc-line = '873';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
No-operation for exiting a critical section
\ilinebr\ilinebr 
In some QF ports the critical section exit takes effect only on the
next machine instruction. If this next instruction is another entry
to a critical section, the critical section won't be really exited,
but rather the two adjacent critical sections would be merged.
The #QF_CRIT_EXIT_NOP() macro contains minimal code required to
prevent such merging of critical sections in QF ports, in which it
can occur.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qf_8h_1abbb0c00f8a289282390cbd0173eee21c';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QEvtSize';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      typedef-mem-desc-line = '46';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qf_8h_1a001ae90801798660dc4c3aea59bfcbba';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
QActiveVtable
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QMActiveVtable';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      typedef-mem-desc-line = '388';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
Virtual Table for the ::QMActive class (inherited from ::QActiveVtable
@note
::QMActive inherits ::QActive exactly, without adding any new virtual
functions and therefore, ::QMActiveVtable is typedef'ed as ::QActiveVtable.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qf_8h_1a1f3526b0c899ab9687db250ab58551e0';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QTimeEvtCtr';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      typedef-mem-desc-line = '400';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qf_8h_1a1532f57deb6a85353b9c04bf054fec77';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QSubscrList';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      typedef-mem-desc-line = '538';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
Subscriber-List structure
\ilinebr\ilinebr 
This data type represents a set of active objects that subscribe to
a given signal. The set is represented as a priority-set, where each
bit corresponds to the unique priority of an active object.

@sa ::QSubscrList for the description of the data members
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qf_8h_1a6ece34fc555ade0a6a10a259a6463401';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QActive *
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_active_';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qf.h';
      var-mem-desc-line = '879';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
array of registered active objects
@note Not to be used by Clients directly, only in ports of QF
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qf.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QF/C platform-independent public interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qk_8h';
  file-name = 'qk.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1aee19c1d6e860d59dda6e539852b99dbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EQUEUE_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QEQueue
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1ae5bd9d2bd80006cdbcd21d2acdb91d86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_THREAD_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
void*
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '50';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1a4396c0ed924c1f24fd798c572b3e4c18';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QK_ISR_CONTEXT_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QK_attr_.intNest != 0U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro that reports the execution context (ISR vs. thread)


@returns true if the code executes in the ISR context and false
otherwise
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1afb4d05ec88a0137c243a919ecb5163a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_STAT_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QSchedStatus lockStat_;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '146';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro to represent the scheduler lock status
that needs to be preserved to allow nesting of locks.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1ac14354c79432577621af7b82e9f92de5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_LOCK_';
      define-mem-param  = {
        define-mem-def-name = 'prio_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {         \
        if (QK_ISR_CONTEXT_()) {               \
            lockStat_ = 0xFFU;                 \
        } else {                               \
            lockStat_ = QK_schedLock((prio_)); \
        }                                      \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '149';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro for selective scheduler locking. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1ae105405c9dde7fbeb959f318d0c9ac6d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_UNLOCK_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {    \
        if (lockStat_ != 0xFFU) {      \
            QK_schedUnlock(lockStat_); \
        }                              \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '158';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro for selective scheduler unlocking. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1ae2426ed9b8543cbbccde98023d7773a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_WAIT_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (Q_ASSERT_ID(110, (me_)->eQueue.frontEvt != (QEvt *)0))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '165';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1ad4ad4a29e36b9ad8e2aff0e7074c2a68';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_SIGNAL_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {                         \
        QPSet_insert(&QK_attr_.readySet, (uint_fast8_t)(me_)->prio); \
        if (!QK_ISR_CONTEXT_()) {                                    \
            if (QK_sched_() != 0U) {                                 \
                QK_activate_();                                      \
            }                                                        \
        }                                                            \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '168';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1ab786be96ee118929bfb4dcd51d3acce5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_TYPE_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QMPool
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '178';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1af536ec576d2f03b68bcf38ca0c8b918d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_INIT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSize_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'evtSize_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (QMPool_init(&(p_), (poolSto_), (poolSize_), (evtSize_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '179';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1a920e9b4f47e69079a12bf79a3c43a058';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_EVENT_SIZE_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((uint_fast16_t)(p_).blockSize)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '181';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1a3b61985b774f4bf6cc244a93d8dbad9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_GET_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'm_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((e_) = (QEvt *)QMPool_get(&(p_), (m_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '182';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qk_8h_1a29ff805ad5ae20a3df335f119d3e1abc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_PUT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (QMPool_put(&(p_), (e_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      define-mem-desc-line = '184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qk_8h_1a388523c5421884e53d2f3f7523349c0e';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QSchedStatus';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      typedef-mem-desc-line = '121';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK Scheduler locking 


The scheduler lock status 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8h_1acaa36e0f50a41ea31cd6372213648b80';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_onContextSw';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
struct QActive *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prev';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
struct QActive *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'next';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      func-mem-desc-line = '90';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK context switch callback (customized in BSPs for QK)
\ilinebr\ilinebr 
This callback function provides a mechanism to perform additional
custom operations when QK switches context from one thread to
another.

@param [in] prev   pointer to the previous thread (active object)
                  (prev==0 means that @p prev was the QK idle loop)
@param [in] next   pointer to the next thread (active object)
                  (next==0) means that @p next is the QK idle loop)
@attention
QK_onContextSw() is invoked with interrupts <strong>disabled</strong> and must also
return with interrupts <strong>disabled</strong>.

@note
This callback is enabled by defining the macro #QK_ON_CONTEXT_SW.

@include qk_oncontextsw.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8h_1a667daad24b172e782fe4e2b5b06fbf61';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_onIdle';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      func-mem-desc-line = '106';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK idle callback (customized in BSPs for QK)
\ilinebr\ilinebr 
QK_onIdle() is called continuously by the QK idle loop. This callback
gives the application an opportunity to enter a power-saving CPU mode,
or perform some other idle processing.

@note
QK_onIdle() is invoked with interrupts enabled and must also return with
interrupts enabled.

@sa QV_onIdle()
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8h_1a49a6ff5d3a7c6ae58e33a2b943efb2fc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_sched_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      func-mem-desc-line = '110';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK scheduler finds the highest-priority thread ready to run 

The QK scheduler finds out the priority of the highest-priority AO
that (1) has events to process and (2) has priority that is above the
current priority.

@returns
the 1-based priority of the the active object, or zero if no eligible
active object is ready to run.

@attention
QK_sched_() must be always called with interrupts <strong>disabled</strong> and
returns with interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8h_1a57768dcdb71b3e41f329bae839584399';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_activate_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      func-mem-desc-line = '115';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK activator activates the next active object. The activated AO preempts
the currently executing AOs.

QK_activate_() activates ready-to run AOs that are above the initial
active priority (QK_attr_.actPrio).

@note
The activator might enable interrupts internally, but always returns with
interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8h_1a6d638caae0fbbaf0c0912e78205525c6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_schedLock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ceiling';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      func-mem-desc-line = '124';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK Scheduler lock 

This function locks the QK scheduler to the specified ceiling.

@param [in]   ceiling    priority ceiling to which the QK scheduler
                        needs to be locked

@returns
The previous QK Scheduler lock status, which is to be used to unlock
the scheduler by restoring its previous lock status in QK_schedUnlock().

@note
QK_schedLock() must be always followed by the corresponding
QK_schedUnlock().

@sa QK_schedUnlock()

@par Usage
The following example shows how to lock and unlock the QK scheduler:
@include qk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8h_1ad16b86d19848aa52a704b514c96373fa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_schedUnlock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stat';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      func-mem-desc-line = '127';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK Scheduler unlock 

This function unlocks the QK scheduler to the previous status.

@param [in]   stat       previous QK Scheduler lock status returned from
                        QK_schedLock()
@note
QK_schedUnlock() must always follow the corresponding QK_schedLock().

@sa QK_schedLock()

@par Usage
The following example shows how to lock and unlock the QK scheduler:
@include qk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qk_8h_1a9c465b899f06067196a6633e0bc4c7b0';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QK_PrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QK_attr_';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qk.h';
      var-mem-desc-line = '64';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
global private attributes of the QK kernel 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qk.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QK/C (preemptive non-blocking kernel) platform-independent
public interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qmpool_8h';
  file-name = 'qmpool.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qmpool_8h_1ab0fe475154021674f904c52e61e78841';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_MPOOL_EL';
      define-mem-param  = {
        define-mem-def-name = 'evType_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    struct { void *sto_[((sizeof(evType_) - 1U)/sizeof(void*)) + 1U]; }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      define-mem-desc-line = '152';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Memory pool element to allocate correctly aligned storage
for QMPool class.
@param [in] evType_ event type (name of the subclass of QEvt)
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qmpool_8h_1ab937ed65c2c800fad079cf296803a539';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QMPoolSize';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      typedef-mem-desc-line = '51';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
The data type to store the block-size based on the macro
#QF_MPOOL_SIZ_SIZE.
\ilinebr\ilinebr 
The dynamic range of this data type determines the maximum size
of blocks that can be managed by the native QF event pool.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qmpool_8h_1acbbaf428a11178e4ba14574253cac116';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QMPoolCtr';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      typedef-mem-desc-line = '76';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
The data type to store the block-counter based on the macro
#QF_MPOOL_CTR_SIZE.
\ilinebr\ilinebr 
The dynamic range of this data type determines the maximum number
of blocks that can be stored in the pool.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qmpool_8h_1a19ce0f12f82dcf6825628ace98e980dc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QMPool_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMPool *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'poolSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'poolSize';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'blockSize';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      func-mem-desc-line = '137';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes the native QF memory pool 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qmpool_8h_1a3829663050f266f81f46a03ffb31d7ab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QMPool_get';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMPool *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'margin';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      func-mem-desc-line = '141';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Obtains a memory block from a memory pool. 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qmpool_8h_1acfcc25d788e19ad4c5025fcb153c1104';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QMPool_put';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QMPool *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qmpool.h';
      func-mem-desc-line = '145';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Recycles a memory block back to a memory pool. 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qmpool.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QP native, platform-independent memory pool ::QMPool interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qpc_8h';
  file-name = 'qpc.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a3d046e1bb0df20880186bd32a31684f0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QP_API_VERSION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Specifies the backwards compatibility with the QP/C API version.
\ilinebr\ilinebr 
For example, QP_API_VERSION==691 will cause generating the compatibility
layer with QP/C version 6.9.1 and newer, but not older than 6.9.1.
QP_API_VERSION==0 causes generation of the maximum currently supported
backwards compatibility. This is the default.<br>
<br>
Conversely, QP_API_VERSION==9999 means that no compatibility layer should
be generated. This setting is useful for checking if an application
complies with the latest QP/C API.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1ab1daab0f67adda321cd13b42c6042023';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_ON';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_GLB_FILTER((rec_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 2.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1ae3d7888f95ecf7b24005a618ebc0ef89';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_OFF';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_GLB_FILTER(-(rec_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 3.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a17b622a80eec603c8cd1d81f3b319a42';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_SM_OBJ';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 4.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a2b49bf6045b1294330455dd0b4fcab88';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_AO_OBJ';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 5.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a454d7a3704c3c4e88d0a75fc476b22f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_MP_OBJ';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '96';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 6.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a7f5219a0712d857d7f6f7fded97bdf00';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_EQ_OBJ';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '99';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 7.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1acb795d05dcf49796febfcb6d30ab7969';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_TE_OBJ';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '102';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 8.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1aa6a82e6fda0dd1bb27a1ea0ca485a8a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FILTER_AP_OBJ';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_priv_.locFilter_AP = (obj_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 9.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1ad99a023424e53db53e3a0bd6befe3f8e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_BEGIN';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    if (((QS_priv_.glbFilter[(uint_fast8_t)(rec_) >> 3U] \
          & (1U << ((uint_fast8_t)(rec_) & 7U))) != 0U)  \
        && ((QS_priv_.locFilter_AP == (void *)0)         \
            || (QS_priv_.locFilter_AP == (obj_))))       \
    {                                                    \
        QS_CRIT_STAT_                                    \
        QS_CRIT_E_();                                    \
        QS_beginRec_((uint_fast8_t)(rec_));              \
        QS_TIME_PRE_(); {
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '110';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 10.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a583642dd30cadd5b785592f6352bdef2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U32_HEX';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u32_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)0x0FU, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '122';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 11.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a375f61f12d878fb5b759082b24560d1c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_XTHREAD_CAST';
      define-mem-param  = {
        define-mem-def-name = 'handler_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QXThreadHandler)(handler_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 12.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a3f4ede7ae922aa2c749176f9269c1ba6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QMSM_INIT';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QHSM_INIT((me_), (e_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '145';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 13.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a43f23513c6d1d9f5dcc410f5cd001b51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QMSM_DISPATCH';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QHSM_DISPATCH((me_), (e_), 0U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '149';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 14.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a1ca75ca36a498c57968a887b9ec2d32f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QFsm_ctor';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QHsm_ctor
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '167';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 16.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a4b1bc93dc610e97650f324dc7901cd86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_IGNORED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(Q_SUPER(&QHsm_top))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
deprecated macro to call in QFsm state-handler when it
ignores (does not handle) an event (instead use Q_SUPER())
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qpc_8h_1a6bc03c64995cfeeb5c3ab77c567582df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_onIdle';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QV_onIdle
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      define-mem-desc-line = '176';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 17.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qpc_8h_1a40bb5262bf908c328fbcfbe5d29d0201';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'char_t';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      typedef-mem-desc-line = '78';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 1.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qpc_8h_1af84cf31a9042c80522d9764c2bc9fcbc';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
QHsm
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QFsm';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qpc.h';
      typedef-mem-desc-line = '164';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem deprecated 15.

@note
For efficiency, the recommended migration path is to use the ::QMsm
state machine and the QM modeling tool.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qpc.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QP/C public interface including backwards-compatibility layer.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0


\ilinebr\ilinebr 
This header file must be included directly or indirectly
in all application modules (*.c files) that use QP/C.
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qpset_8h';
  file-name = 'qpset.h';
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qpset_8h_1a834ee86c149e19926bfa92d05e7a2a33';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QPSetBits';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      typedef-mem-desc-line = '44';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1a32ad508f6fd2f07b2aa49c074db5c186';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_LOG2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSetBits
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'x';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '55';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1a701e5cf40b65ae7c380441a2fd7d03d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QPSet_setEmpty';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSet *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '71';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Makes the priority set @p me empty 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1aa14d1cca2923d4359cbc541a5debbac5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QPSet_isEmpty';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSet *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '76';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Evaluates to TRUE if the priority set @p me is empty 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1a2a3c6be5a6ecb44224171f9e398b50b4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QPSet_notEmpty';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSet *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '81';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Evaluates to TRUE if the priority set @p me is not empty 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1ae8d64a39fc8a9b3d7875d99568c484e0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QPSet_hasElement';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSet *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '86';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Evaluates to TRUE if the priority set @p me has element @p n 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1a8e1e73e5692c093104e60a9a7133c0e5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QPSet_insert';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSet *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '91';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Insert element @p n_ into the set @p me, n = 1U..32U 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1a9a17dd6b0273d06908563f3bdd4a0704';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QPSet_remove';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSet *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '96';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Remove element n_ from the set @p me, n = 1U..32U 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qpset_8h_1a8dcbb849d8f063d83940ea67d467b515';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static uint_fast8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QPSet_findMax';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QPSet *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qpset.h';
      func-mem-desc-line = '103';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Find the maximum element in the set @p me
@note if the set @p me is empty, the function returns zero.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qpset.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QP native, platform-independent priority sets of 32 or 64 elements.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-30
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qs_8h';
  file-name = 'qs.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a28a29db5bbc1896993e7fd616ef3c178';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_TIME_PRE_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u8_raw_(QS_onGetTime()))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '221';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1aead2cc0fea81b918882cbba46dce2adb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_EOD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((uint16_t)0xFFFFU)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '356';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Constant for End-Of-Data condition returned from QS_getByte() 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1af22371611fe57862a37eb785debb7921';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_INIT';
      define-mem-param  = {
        define-mem-def-name = 'arg_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_onStartup(arg_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '434';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initialize the QS facility.
\ilinebr\ilinebr 
This macro provides an indirection layer to invoke the QS initialization
routine if #Q_SPY is defined, or do nothing if #Q_SPY is not defined.
@sa QS_onStartup(), example of setting up a QS filter in QS_GLB_FILTER()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1af535ad74eb8f21d992f54e8246c79ba4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_EXIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_onCleanup())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '442';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Cleanup the QS facility.
\ilinebr\ilinebr 
This macro provides an indirection layer to invoke the QS cleanup
routine if #Q_SPY is defined, or do nothing if #Q_SPY is not defined.
@sa QS_onCleanup()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1adf0d501b66d8daf465995274db23f60f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FLUSH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_onFlush())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '451';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Flush the QS trace data to the host.
\ilinebr\ilinebr 
This macro invokes the QS_flush() platform-dependent callback function
to flush the QS trace buffer to the host. The function typically
busy-waits until all the data in the buffer is sent to the host.
This is acceptable only in the initial transient.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1aa42d8bbc70e6069f9c55d87f76ec15b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_GLB_FILTER';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_glbFilter_((int_fast16_t)(rec_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '461';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Global Filter for a given record type @p rec
\ilinebr\ilinebr 
This macro provides an indirection layer to call QS_glbFilter_()
if #Q_SPY is defined, or do nothing if #Q_SPY is not defined.

The following example shows how to use QS filters:
@include qs_filter.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a06c87e154257122417b40cf3d2dd7107';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_LOC_FILTER';
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_locFilter_((int_fast16_t)(qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '471';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Local Filter for a given object-id @p qs_id
\ilinebr\ilinebr 
This macro provides an indirection layer to call QS_locFilter_()
if #Q_SPY is defined, or do nothing if #Q_SPY is not defined.

The following example shows how to use QS filters:
@include qs_filter.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a2793ca48f7936a931ef317289fb54bfc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_CRIT_STAT_';
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '502';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is an internal macro for defining the critical section
status type.
\ilinebr\ilinebr 
The purpose of this macro is to enable writing the same code for the
case when critical section status type is defined and when it is not.
If the macro #QF_CRIT_STAT_TYPE is defined, this internal macro
provides the definition of the critical section status variable.
Otherwise this macro is empty.
@sa #QF_CRIT_STAT_TYPE
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a5ef113450fbaa9e9f4624d88c5270d25';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_CRIT_E_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QF_CRIT_ENTRY(dummy)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '513';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is an internal macro for entering a critical section.
\ilinebr\ilinebr 
The purpose of this macro is to enable writing the same code for the
case when critical section status type is defined and when it is not.
If the macro #QF_CRIT_STAT_TYPE is defined, this internal macro
invokes QF_CRIT_ENTRY() passing the key variable as the parameter.
Otherwise QF_CRIT_ENTRY() is invoked with a dummy parameter.
@sa QF_CRIT_ENTRY()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a45fd42f1337e267d47a9a84ccb9c9dd5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_CRIT_X_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QF_CRIT_EXIT(dummy); QS_REC_DONE()
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '524';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is an internal macro for exiting a critical section.
\ilinebr\ilinebr 
The purpose of this macro is to enable writing the same code for the
case when critical section status type is defined and when it is not.
If the macro #QF_CRIT_STAT_TYPE is defined, this internal macro
invokes QF_CRIT_EXIT() passing the key variable as the parameter.
Otherwise QF_CRIT_EXIT() is invoked with a dummy parameter.
@sa QF_CRIT_EXIT()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a98ae9bc427910662dc53ed1d15aaa044';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_BEGIN_NOCRIT';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    if (QS_GLB_CHECK_(rec_) && QS_LOC_CHECK_(qs_id_)) { \
        QS_beginRec_((uint_fast8_t)(rec_));             \
        QS_TIME_PRE_(); {
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '540';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Begin a QS user record without entering critical section. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a2d38d50c6d69094bbe3bee00de5140d0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_END_NOCRIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        } \
        QS_endRec_();     \
    }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '546';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
End a QS user record without exiting critical section. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a2c706433cc92b110251eb5b7d911c811';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_REC_DONE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '552';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
macro to hook up user code when a QS record is produced 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1abb69994d560587f583b8de62641834c2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_GLB_CHECK_';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (((uint_fast8_t)QS_priv_.glbFilter[(uint_fast8_t)(rec_) >> 3U]  \
          & ((uint_fast8_t)1U << ((uint_fast8_t)(rec_) & 7U))) != 0U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '556';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper macro for checking the global QS filter 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1aa9e6a9a96b5e85ef81751eeee1ad79f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_LOC_CHECK_';
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (((uint_fast8_t)QS_priv_.locFilter[(uint_fast8_t)(qs_id_) >> 3U] \
          & ((uint_fast8_t)1U << ((uint_fast8_t)(qs_id_) & 7U))) != 0U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '561';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper macro for checking the local QS filter 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a43a3e7f568e445f82c0be2ebf924654c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_BEGIN_ID';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    if (QS_GLB_CHECK_(rec_) && QS_LOC_CHECK_(qs_id_)) { \
        QS_CRIT_STAT_                                   \
        QS_CRIT_E_();                                   \
        QS_beginRec_((uint_fast8_t)(rec_));             \
        QS_TIME_PRE_(); {
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '574';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Begin an application-specific (user) QS record with object-id
 for the local filter.
@par Usage
The following example shows how to build a user QS record using the
macros QS_BEGIN_ID(), QS_END(), and the formatted output macros:
QS_U8(), QS_STR(), etc..
@include qs_ap.c
@note Must always be used in pair with QS_END()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a2ed1002d3dda6d95f9f64c59b8453c71';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_END';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        }    \
        QS_endRec_(); \
        QS_CRIT_X_(); \
    }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '585';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
End a QS record with exiting critical section.
@sa example for QS_BEGIN_ID()
@note Must always be used in pair with QS_BEGIN_ID()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a0d9567f774207e262ceafde8e8069385';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_I8';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u8_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_I8_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '615';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted int8_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a129128a3bb20d0b9286ff7c68f1401ab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U8';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u8_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_U8_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '619';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted uint8_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1aa56a51195cc2819fb2612e3c24723bae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_I16';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u16_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_I16_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '623';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted int16_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a3b053b820c90aac6aa7e10adb76a18a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U16';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u16_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_U16_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '627';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted uint16_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1aa3e19e4d0d7a2075951ac5c3fe389936';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_I32';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u32_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_I32_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '631';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted int32_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a17e249417c7e49c8e2913b17696acbc0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U32';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u32_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_U32_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '635';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted uint32_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a76d242e299411954043362240acd6a81';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_F32';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_f32_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_F32_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '639';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted 32-bit floating point number to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a4ba311d067e53eb59c945b62c83575cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_F64';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_f64_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_F64_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '643';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted 64-bit floating point number to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a57ab513c128f8b7cde40505986d5a818';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_I64';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u64_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_I64_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '647';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted int64_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1aa1ebd3ac35e153ead74106931bc58c08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U64';
      define-mem-param  = {
        define-mem-def-name = 'width_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_u64_fmt_((uint8_t)(((width_) << 4)) | (uint8_t)QS_U64_T, (data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '651';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted uint64_t to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a7ad67719163eea844e44bee7f0478c0a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_STR';
      define-mem-param  = {
        define-mem-def-name = 'str_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_str_fmt_((str_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '655';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted zero-terminated ASCII string to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a68d599cd42fd0fec8cca70251361d8cc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_MEM';
      define-mem-param  = {
        define-mem-def-name = 'mem_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'size_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_mem_fmt_((mem_), (size_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '658';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output formatted memory block of up to 255 bytes to the QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a1b8d4d79089735ec19915ef7ed3e2e0b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_OBJ';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u8_fmt_(QS_OBJ_T, (uint8_t)(obj_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '662';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a9342913835bccef5ded5a59d2712101a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FUN';
      define-mem-param  = {
        define-mem-def-name = 'fun_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u8_fmt_(QS_FUN_T, (uint8_t)(fun_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '676';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1aa4ef1e418c7b9680bf2242f6354490ee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_SIG';
      define-mem-param  = {
        define-mem-def-name = 'sig_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        QS_u8_fmt_(QS_SIG_T, (sig_)); \
        QS_obj_raw_(obj_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '690';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a9a8e26a01678f160bf35fd0bda6bfe8b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_SIG_DICTIONARY';
      define-mem-param  = {
        define-mem-def-name = 'sig_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_sig_dict_pre_((sig_), (obj_), #sig_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '759';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output signal dictionary record
\ilinebr\ilinebr 
A signal dictionary record associates the numerical value of the signal
and the binary address of the state machine that consumes that signal
with the human-readable name of the signal.

Providing a signal dictionary QS record can vastly improve readability of
the QS log, because instead of dealing with cryptic machine addresses the
QSpy host utility can display human-readable names.

A signal dictionary entry is associated with both the signal value @p sig_
and the state machine @p obj_, because signals are required to be unique
only within a given state machine and therefore the same numerical values
can represent different signals in different state machines.

For the "global" signals that have the same meaning in all state machines
(such as globally published signals), you can specify a signal dictionary
entry with the @p obj_ parameter set to NULL.

The following example shows the definition of signal dictionary entries
in the initial transition of the Table active object. Please note that
signals HUNGRY_SIG and DONE_SIG are associated with the Table state machine
only ("me" @p obj_ pointer). The EAT_SIG signal, on the other hand,
is global (0 @p obj_ pointer):
@include qs_sigDic.c

@note The QSpy log utility must capture the signal dictionary record
in order to use the human-readable information. You need to connect to
the target before the dictionary entries have been transmitted.

The following QSpy log example shows the signal dictionary records
generated from the Table initial transition and subsequent records that
show human-readable names of the signals:
@include qs_sigLog.txt

The following QSpy log example shows the same sequence of records, but
with dictionary records removed. The human-readable signal names are not
available.
@include qs_sigLog0.txt
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a034206ff7f20a4e6426a5f554434643b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_OBJ_DICTIONARY';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_obj_dict_pre_((obj_), #obj_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '775';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output object dictionary record
\ilinebr\ilinebr 
An object dictionary record associates the binary address of an object
in the target's memory with the human-readable name of the object.

Providing a dictionary QS record can vastly improve readability of
the QS log, because instead of dealing with cryptic machine addresses the
QSpy host utility can display human-readable object names.

The following example shows the definition of object dictionary entry
for the Table active object:
@include qs_objDic.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1abb23204e68e87d282cbd0c2cb937b3bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_OBJ_ARR_DICTIONARY';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'idx_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_obj_arr_dict_pre_((obj_), (idx_), #obj_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '792';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output object-array dictionary record
\ilinebr\ilinebr 
An object array dictionary record associates the binary address of the
object element in the target's memory with the human-readable name
of the object.

Providing a dictionary QS record can vastly improve readability of
the QS log, because instead of dealing with cryptic machine addresses the
QSpy host utility can display human-readable object names.

The following example shows the definition of object array dictionary
for <tt>Philo_inst[n]</tt> and <tt>Philo_inst[n].timeEvt</tt>:
@include qs_objArrDic.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a3b1ab21c174f2bec448edec8865a8529';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FUN_DICTIONARY';
      define-mem-param  = {
        define-mem-def-name = 'fun_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_fun_dict_pre_((void (*)(void))(fun_), #fun_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '807';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output function dictionary record
\ilinebr\ilinebr 
A function dictionary record associates the binary address of a function
in the target's memory with the human-readable name of the function.

Providing a function dictionary QS record can vastly improve readability of
the QS log, because instead of dealing with cryptic machine addresses the
QSpy host utility can display human-readable function names.

The example from QS_SIG_DICTIONARY() shows the definition of a function
dictionary.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1ae75893daa66c6d0b5a6dfb8f3fca1196';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_USR_DICTIONARY';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_usr_dict_pre_((rec_), #rec_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '815';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output user QS-record dictionary record
\ilinebr\ilinebr 
A user QS-record dictionary record associates the numerical value of a
user record with the human-readable identifier.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a36f982b91cccd36f64c46e8023ff3004';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_QS_ACTION';
      define-mem-param  = {
        define-mem-def-name = 'act_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(act_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '881';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Execute an action that is only necessary for QS output 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a26dff1302374b0bc3e75e0cd6de4af60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_OUTPUT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_output())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '967';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to handle the QS output from the application
NOTE: if this macro is used, the application must define QS_output().
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a6932e8b3295d02c20c39d1aad400a20c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_RX_INPUT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_rx_input())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '972';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Macro to handle the QS-RX input to the application
NOTE: if this macro is used, the application must define QS_rx_input().
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1a9f048034d6f9267e8333dbcd7bb67349';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_TEST_PROBE_DEF';
      define-mem-param  = {
        define-mem-def-name = 'fun_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        uint32_t const qs_tp_ = QS_getTestProbe_((void (*)(void))(fun_));
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '1017';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS macro to define the Test-Probe for a given @p fun_ 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1ad4d6a7778df089bb64202ba9ec8a4ddb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_TEST_PROBE';
      define-mem-param  = {
        define-mem-def-name = 'code_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        if (qs_tp_ != 0U) { code_ }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '1021';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS macro to apply a Test-Probe 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1ad5de5bbcec978159f1ecc64612b8e741';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_TEST_PROBE_ID';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'code_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        if (qs_tp_ == (uint32_t)(id_)) { code_ }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '1025';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS macro to apply a Test-Probe 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs_8h_1ae5841714b4f420c33df0a5132cc3f2c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_TEST_PAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_test_pause_())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      define-mem-desc-line = '1029';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS macro to pause test execution and enter the test event loop 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qs_8h_1a90397181159051f6205fc00f4bb6f542';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QSTimeCtr';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      typedef-mem-desc-line = '220';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qs_8h_1aa92f702590d5907d47970ea1f117bbba';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QSCtr';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      typedef-mem-desc-line = '885';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS ring buffer counter and offset type 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1acdb495c1e5524b5d95aaff82c47f6db5';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QSpyRecords';
      enum-mem-enum = { enum-name = QS_EMPTY; };
      enum-mem-enum = { enum-name = QS_QEP_STATE_ENTRY; };
      enum-mem-enum = { enum-name = QS_QEP_STATE_EXIT; };
      enum-mem-enum = { enum-name = QS_QEP_STATE_INIT; };
      enum-mem-enum = { enum-name = QS_QEP_INIT_TRAN; };
      enum-mem-enum = { enum-name = QS_QEP_INTERN_TRAN; };
      enum-mem-enum = { enum-name = QS_QEP_TRAN; };
      enum-mem-enum = { enum-name = QS_QEP_IGNORED; };
      enum-mem-enum = { enum-name = QS_QEP_DISPATCH; };
      enum-mem-enum = { enum-name = QS_QEP_UNHANDLED; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_DEFER; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_RECALL; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_SUBSCRIBE; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_UNSUBSCRIBE; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_POST; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_POST_LIFO; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_GET; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_GET_LAST; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_RECALL_ATTEMPT; };
      enum-mem-enum = { enum-name = QS_QF_EQUEUE_POST; };
      enum-mem-enum = { enum-name = QS_QF_EQUEUE_POST_LIFO; };
      enum-mem-enum = { enum-name = QS_QF_EQUEUE_GET; };
      enum-mem-enum = { enum-name = QS_QF_EQUEUE_GET_LAST; };
      enum-mem-enum = { enum-name = QS_QF_NEW_ATTEMPT; };
      enum-mem-enum = { enum-name = QS_QF_MPOOL_GET; };
      enum-mem-enum = { enum-name = QS_QF_MPOOL_PUT; };
      enum-mem-enum = { enum-name = QS_QF_PUBLISH; };
      enum-mem-enum = { enum-name = QS_QF_NEW_REF; };
      enum-mem-enum = { enum-name = QS_QF_NEW; };
      enum-mem-enum = { enum-name = QS_QF_GC_ATTEMPT; };
      enum-mem-enum = { enum-name = QS_QF_GC; };
      enum-mem-enum = { enum-name = QS_QF_TICK; };
      enum-mem-enum = { enum-name = QS_QF_TIMEEVT_ARM; };
      enum-mem-enum = { enum-name = QS_QF_TIMEEVT_AUTO_DISARM; };
      enum-mem-enum = { enum-name = QS_QF_TIMEEVT_DISARM_ATTEMPT; };
      enum-mem-enum = { enum-name = QS_QF_TIMEEVT_DISARM; };
      enum-mem-enum = { enum-name = QS_QF_TIMEEVT_REARM; };
      enum-mem-enum = { enum-name = QS_QF_TIMEEVT_POST; };
      enum-mem-enum = { enum-name = QS_QF_DELETE_REF; };
      enum-mem-enum = { enum-name = QS_QF_CRIT_ENTRY; };
      enum-mem-enum = { enum-name = QS_QF_CRIT_EXIT; };
      enum-mem-enum = { enum-name = QS_QF_ISR_ENTRY; };
      enum-mem-enum = { enum-name = QS_QF_ISR_EXIT; };
      enum-mem-enum = { enum-name = QS_QF_INT_DISABLE; };
      enum-mem-enum = { enum-name = QS_QF_INT_ENABLE; };
      enum-mem-enum = { enum-name = QS_QF_ACTIVE_POST_ATTEMPT; };
      enum-mem-enum = { enum-name = QS_QF_EQUEUE_POST_ATTEMPT; };
      enum-mem-enum = { enum-name = QS_QF_MPOOL_GET_ATTEMPT; };
      enum-mem-enum = { enum-name = QS_MUTEX_LOCK; };
      enum-mem-enum = { enum-name = QS_MUTEX_UNLOCK; };
      enum-mem-enum = { enum-name = QS_SCHED_LOCK; };
      enum-mem-enum = { enum-name = QS_SCHED_UNLOCK; };
      enum-mem-enum = { enum-name = QS_SCHED_NEXT; };
      enum-mem-enum = { enum-name = QS_SCHED_IDLE; };
      enum-mem-enum = { enum-name = QS_SCHED_RESUME; };
      enum-mem-enum = { enum-name = QS_QEP_TRAN_HIST; };
      enum-mem-enum = { enum-name = QS_QEP_TRAN_EP; };
      enum-mem-enum = { enum-name = QS_QEP_TRAN_XP; };
      enum-mem-enum = { enum-name = QS_TEST_PAUSED; };
      enum-mem-enum = { enum-name = QS_TEST_PROBE_GET; };
      enum-mem-enum = { enum-name = QS_SIG_DICT; };
      enum-mem-enum = { enum-name = QS_OBJ_DICT; };
      enum-mem-enum = { enum-name = QS_FUN_DICT; };
      enum-mem-enum = { enum-name = QS_USR_DICT; };
      enum-mem-enum = { enum-name = QS_TARGET_INFO; };
      enum-mem-enum = { enum-name = QS_TARGET_DONE; };
      enum-mem-enum = { enum-name = QS_RX_STATUS; };
      enum-mem-enum = { enum-name = QS_QUERY_DATA; };
      enum-mem-enum = { enum-name = QS_PEEK_DATA; };
      enum-mem-enum = { enum-name = QS_ASSERT_FAIL; };
      enum-mem-enum = { enum-name = QS_QF_RUN; };
      enum-mem-enum = { enum-name = QS_MAX; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '54';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS pre-defined record types (TX channel)
\ilinebr\ilinebr 
This enumeration specifies the record types used in the QP components.
You can specify your own record types starting from ::QS_USER offset.
Currently, the maximum of all records cannot exceed 125.

@note
The QS records labeled as "not maskable" are always enabled and cannot
be turend off with the QS_GLB_FILTER() macro. Other QS trace records
can be disabled by means of the "global filters"

@sa QS_GLB_FILTER() macro
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1aae0de4e85d88c01aeb50fc1a88044836';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QSpyUserOffsets';
      enum-mem-enum = { enum-name = QS_USER; enum-value = '= 100'; };
      enum-mem-enum = { enum-name = QS_USER0; enum-value = '= (enum_t)QS_USER'; };
      enum-mem-enum = { enum-name = QS_USER1; enum-value = '= (enum_t)QS_USER0 + 5'; };
      enum-mem-enum = { enum-name = QS_USER2; enum-value = '= (enum_t)QS_USER1 + 5'; };
      enum-mem-enum = { enum-name = QS_USER3; enum-value = '= (enum_t)QS_USER2 + 5'; };
      enum-mem-enum = { enum-name = QS_USER4; enum-value = '= (enum_t)QS_USER3 + 5'; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '160';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS user record group offsets for QS_GLB_FILTER() 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1a4811826c90b13a0b7137e0443e82d41c';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QSpyRecordGroups';
      enum-mem-enum = { enum-name = QS_ALL_RECORDS; enum-value = '= 0xF0'; };
      enum-mem-enum = { enum-name = QS_SM_RECORDS; };
      enum-mem-enum = { enum-name = QS_AO_RECORDS; };
      enum-mem-enum = { enum-name = QS_EQ_RECORDS; };
      enum-mem-enum = { enum-name = QS_MP_RECORDS; };
      enum-mem-enum = { enum-name = QS_TE_RECORDS; };
      enum-mem-enum = { enum-name = QS_QF_RECORDS; };
      enum-mem-enum = { enum-name = QS_SC_RECORDS; };
      enum-mem-enum = { enum-name = QS_U0_RECORDS; };
      enum-mem-enum = { enum-name = QS_U1_RECORDS; };
      enum-mem-enum = { enum-name = QS_U2_RECORDS; };
      enum-mem-enum = { enum-name = QS_U3_RECORDS; };
      enum-mem-enum = { enum-name = QS_U4_RECORDS; };
      enum-mem-enum = { enum-name = QS_UA_RECORDS; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '170';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS record groups for QS_GLB_FILTER() 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1a31b97dc8d446e10f9a4200f95370b471';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QSpyIdOffsets';
      enum-mem-enum = { enum-name = QS_AO_ID; enum-value = '= 0'; };
      enum-mem-enum = { enum-name = QS_EP_ID; enum-value = '= 64'; };
      enum-mem-enum = { enum-name = QS_EQ_ID; enum-value = '= 80'; };
      enum-mem-enum = { enum-name = QS_AP_ID; enum-value = '= 96'; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '188';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS ID offsets for QS_LOC_FILTER() 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1afe956110f549396dacc2cea4fa4ee610';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QSpyIdGroups';
      enum-mem-enum = { enum-name = QS_ALL_IDS; enum-value = '= 0xF0'; };
      enum-mem-enum = { enum-name = QS_AO_IDS; enum-value = '= (0x80 + (enum_t)QS_AO_ID)'; };
      enum-mem-enum = { enum-name = QS_EP_IDS; enum-value = '= (0x80 + (enum_t)QS_EP_ID)'; };
      enum-mem-enum = { enum-name = QS_EQ_IDS; enum-value = '= (0x80 + (enum_t)QS_EQ_ID)'; };
      enum-mem-enum = { enum-name = QS_AP_IDS; enum-value = '= (0x80 + (enum_t)QS_AP_ID)'; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '196';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS ID groups for QS_LOC_FILTER() 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1a99fb83031ce9923c84392b4e92f956b5';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = '@2';
      enum-mem-enum = { enum-name = QS_I8_T; };
      enum-mem-enum = { enum-name = QS_U8_T; };
      enum-mem-enum = { enum-name = QS_I16_T; };
      enum-mem-enum = { enum-name = QS_U16_T; };
      enum-mem-enum = { enum-name = QS_I32_T; };
      enum-mem-enum = { enum-name = QS_U32_T; };
      enum-mem-enum = { enum-name = QS_F32_T; };
      enum-mem-enum = { enum-name = QS_F64_T; };
      enum-mem-enum = { enum-name = QS_STR_T; };
      enum-mem-enum = { enum-name = QS_MEM_T; };
      enum-mem-enum = { enum-name = QS_SIG_T; };
      enum-mem-enum = { enum-name = QS_OBJ_T; };
      enum-mem-enum = { enum-name = QS_FUN_T; };
      enum-mem-enum = { enum-name = QS_I64_T; };
      enum-mem-enum = { enum-name = QS_U64_T; };
      enum-mem-enum = { enum-name = QS_HEX_FMT; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '595';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
formats for application-specific data elements
\ilinebr\ilinebr 
QS uses this enumeration is used only internally for the formatted user
data elements.
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1a9b8dd526981a12bd2b68f97486dd040c';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QSpyObjKind';
      enum-mem-enum = { enum-name = SM_OBJ; };
      enum-mem-enum = { enum-name = AO_OBJ; };
      enum-mem-enum = { enum-name = MP_OBJ; };
      enum-mem-enum = { enum-name = EQ_OBJ; };
      enum-mem-enum = { enum-name = TE_OBJ; };
      enum-mem-enum = { enum-name = AP_OBJ; };
      enum-mem-enum = { enum-name = MAX_OBJ; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '888';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
Kinds of objects used in QS. 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1a1150b8dddb12b08a7216ae522bdf72cf';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'OSpyObjCombnation';
      enum-mem-enum = { enum-name = SM_AO_OBJ; enum-value = '= (enum_t)MAX_OBJ'; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '898';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs_8h_1a80d3adf3db3e06b2e107a920f37b3d38';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QUTestUserRecords';
      enum-mem-enum = { enum-name = QUTEST_ON_POST; enum-value = '= 124'; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      enum-mem-desc-line = '1036';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs_8h_1a2afaa5be99627adf0328bb5cf1a9462a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_ASSERTION';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'module';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'loc';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'delay';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      func-mem-desc-line = '856';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Output the assertion failure trace record
\ilinebr\ilinebr 
This trace record is intended to use from the Q_onAssert() callback.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs_8h_1a3d316077c13f8033c1a391590937e696';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_onTestSetup';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      func-mem-desc-line = '978';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
callback to setup a unit test inside the Target 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qs_8h_1a0362422ca4007de9001955731f312c44';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QSPrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QS_priv_';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      var-mem-desc-line = '918';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qs_8h_1a1829f140f3e88c9e8e10f1c2d80d4e06';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_intNest';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qs.h';
      var-mem-desc-line = '1041';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qs.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QS/C platform-independent public interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qstamp_8c';
  file-name = 'qstamp.c';
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qstamp_8c_1ad16656bd173cace1d870d8cad89085ba';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
char const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'Q_BUILD_DATE';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= __DATE__
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qstamp.c';
      var-mem-desc-line = '43';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the calendar date of the last translation of the form: "Mmm dd yyyy" 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qstamp_8c_1a937bd28accd75d8f8c73876e80d2d310';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
char const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'Q_BUILD_TIME';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= __TIME__
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qstamp.c';
      var-mem-desc-line = '46';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the time of the last translation of the form: "hh:mm:ss" 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qstamp.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Application build time-stamp.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0


\ilinebr\ilinebr 
This module needs to be re-compiled in every new software build. To achive
this, it is recommended to delete the object file (qstamp.o, or qstamp.obj)
in the build directory before each build. (Most development tools allow
you to specify a pre-build command, which is the ideal place to delete
the qstamp object file.)
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qstamp_8h';
  file-name = 'qstamp.h';
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qstamp_8h_1ad16656bd173cace1d870d8cad89085ba';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
char const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'Q_BUILD_DATE';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qstamp.h';
      var-mem-desc-line = '36';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the calendar date of the last translation of the form: "Mmm dd yyyy" 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qstamp_8h_1a937bd28accd75d8f8c73876e80d2d310';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
char const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'Q_BUILD_TIME';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qstamp.h';
      var-mem-desc-line = '37';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the time of the last translation of the form: "hh:mm:ss" 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qstamp.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Application build time-stamp interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'quit_8h';
  file-name = 'quit.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'quit_8h_1a94a7aa7d89eccbae9638929b7d1b57ab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EXPECT';
      define-mem-param  = {
        define-mem-def-name = 'cond_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((cond_) \
        ? (void)0 : QUIT_fail_(#cond_, &Q_this_module_[0], __LINE__))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/quit.h';
      define-mem-desc-line = '36';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'quit_8h_1aeaa47d46e269c330a472072a61572d0e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'TEST';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'title';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/quit.h';
      func-mem-desc-line = '43';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'quit_8h_1acac94e93f55f216864cf666a70748dbd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QUIT_fail_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cond';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'module';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'line';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/quit.h';
      func-mem-desc-line = '44';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'quit_8h_1ad374ada297ebd4a21ab643568c8b9113';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'onRunTests';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/quit.h';
      func-mem-desc-line = '45';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/quit.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
"QUIT" QP Unit Internal Test
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qv_8h';
  file-name = 'qv.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1aee19c1d6e860d59dda6e539852b99dbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EQUEUE_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QEQueue
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1afb4d05ec88a0137c243a919ecb5163a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_STAT_';
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1a45117d657950341e20dfb7fa3fd16345';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_LOCK_';
      define-mem-param  = {
        define-mem-def-name = 'dummy';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1a08ea9909efd8ecbace435c05d386d3cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_UNLOCK_';
      define-mem-param  = {
        define-mem-def-name = 'dummy';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((void)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1ae2426ed9b8543cbbccde98023d7773a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_WAIT_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        Q_ASSERT_ID(0, (me_)->eQueue.frontEvt != (QEvt *)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1ad4ad4a29e36b9ad8e2aff0e7074c2a68';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_SIGNAL_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        QPSet_insert(&QV_readySet_, (uint_fast8_t)(me_)->prio)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '83';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1ab786be96ee118929bfb4dcd51d3acce5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_TYPE_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QMPool
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1af536ec576d2f03b68bcf38ca0c8b918d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_INIT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSize_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'evtSize_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (QMPool_init(&(p_), (poolSto_), (poolSize_), (evtSize_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1a920e9b4f47e69079a12bf79a3c43a058';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_EVENT_SIZE_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((uint_fast16_t)(p_).blockSize)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1a3b61985b774f4bf6cc244a93d8dbad9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_GET_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'm_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((e_) = (QEvt *)QMPool_get(&(p_), (m_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qv_8h_1a29ff805ad5ae20a3df335f119d3e1abc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_PUT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (QMPool_put(&(p_), (e_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qv_8h_1a105257e3c32a7e71b06648b741c6c120';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QV_onIdle';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      func-mem-desc-line = '67';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QV idle callback (customized in BSPs)
\ilinebr\ilinebr 
QV_onIdle() is called by the cooperative QV kernel (from QF_run()) when
the scheduler detects that no events are available for active objects
(the idle condition). This callback gives the application an opportunity
to enter a power-saving CPU mode, or perform some other idle processing
(such as QS software tracing output).

@note QV_onIdle() is invoked with interrupts DISABLED because the idle
condition can be asynchronously changed at any time by an interrupt.
QV_onIdle() MUST enable the interrupts internally, but not before
putting the CPU into the low-power mode. (Ideally, enabling interrupts and
low-power mode should happen atomically). At the very least, the function
MUST enable interrupts, otherwise interrupts will remain disabled
permanently.

@note QV_onIdle() is only used by the cooperative QV kenrnel in the
native (bare metal) QF ports, and is NOT used in any other QF ports. When
QF is combined with the preemptive QK, the QK idle loop calls a different
function QK_onIdle(), with different semantics than QV_onIdle(). When QF
is combined with a 3rd-party RTOS or kernel, the idle processing mechanism
of the RTOS or kernel is used instead of QV_onIdle().
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qv_8h_1a31027f058c905482b11cebdd7f594a0c';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QV_readySet_';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qv.h';
      var-mem-desc-line = '96';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
QV ready-set of AOs 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qv.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QV/C (cooperative "Vanilla" kernel) platform-independent
public interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qxk_8h';
  file-name = 'qxk.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1aee19c1d6e860d59dda6e539852b99dbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EQUEUE_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QEQueue
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1a7afba9d8bef1f7eab181e7fb3f74eb5e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_OS_OBJECT_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
void*
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '50';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1ae5bd9d2bd80006cdbcd21d2acdb91d86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_THREAD_TYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
void*
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1a0c95c457d7b8d19f6588e1bb9f1af829';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXK_TLS';
      define-mem-param  = {
        define-mem-def-name = 'type_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((type_)QXK_current()->thread)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '56';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Access Thread-Local Storage (TLS) and cast it on the given @p type_ 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1a40b9e89cfd48bbb96e9be3843111cb4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXK_ISR_CONTEXT_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QXK_attr_.intNest != 0U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '151';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro that reports the execution context (ISR vs. thread)


@returns true if the code executes in the ISR context and false
otherwise
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1afb4d05ec88a0137c243a919ecb5163a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_STAT_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QSchedStatus lockStat_;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '158';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro to represent the scheduler lock status
that needs to be preserved to allow nesting of locks.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1ac14354c79432577621af7b82e9f92de5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_LOCK_';
      define-mem-param  = {
        define-mem-def-name = 'prio_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {          \
        if (QXK_ISR_CONTEXT_()) {               \
            lockStat_ = 0xFFU;                  \
        } else {                                \
            lockStat_ = QXK_schedLock((prio_)); \
        }                                       \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '161';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro for selective scheduler locking. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1ae105405c9dde7fbeb959f318d0c9ac6d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_SCHED_UNLOCK_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {     \
        if (lockStat_ != 0xFFU) {       \
            QXK_schedUnlock(lockStat_); \
        }                               \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '170';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro for selective scheduler unlocking. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1ae2426ed9b8543cbbccde98023d7773a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_WAIT_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (Q_ASSERT_ID(110, (me_)->eQueue.frontEvt != (QEvt *)0))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '176';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1ad4ad4a29e36b9ad8e2aff0e7074c2a68';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_EQUEUE_SIGNAL_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {                             \
        QPSet_insert(&QXK_attr_.readySet, (uint_fast8_t)(me_)->dynPrio); \
        if (!QXK_ISR_CONTEXT_()) {                                       \
            if (QXK_sched_() != 0U) {                                    \
                QXK_activate_();                                         \
            }                                                            \
        }                                                                \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '179';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1ab786be96ee118929bfb4dcd51d3acce5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_TYPE_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QMPool
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '189';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1af536ec576d2f03b68bcf38ca0c8b918d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_INIT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'poolSize_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'evtSize_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (QMPool_init(&(p_), (poolSto_), (poolSize_), (evtSize_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '190';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1a920e9b4f47e69079a12bf79a3c43a058';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_EVENT_SIZE_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((uint_fast16_t)(p_).blockSize)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '192';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1a3b61985b774f4bf6cc244a93d8dbad9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_GET_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'm_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        ((e_) = (QEvt *)QMPool_get(&(p_), (m_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '193';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk_8h_1a29ff805ad5ae20a3df335f119d3e1abc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EPOOL_PUT_';
      define-mem-param  = {
        define-mem-def-name = 'p_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        (QMPool_put(&(p_), (e_), (qs_id_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      define-mem-desc-line = '195';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qxk_8h_1a388523c5421884e53d2f3f7523349c0e';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QSchedStatus';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      typedef-mem-desc-line = '132';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
QXK Scheduler locking 


The scheduler lock status 
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8h_1a46bbe2ca534f2b2ee9b71f10147ddc5b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_onContextSw';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
struct QActive *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prev';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
struct QActive *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'next';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      func-mem-desc-line = '99';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QXK context switch callback (customized in BSPs for QXK)
\ilinebr\ilinebr 
This callback function provides a mechanism to perform additional
custom operations when QXK switches context from one thread to
another.

@param [in] prev   pointer to the previous thread (active object)
                  (prev==0 means that @p prev was the QXK idle thread)
@param [in] next   pointer to the next thread (active object)
                  (next==0) means that @p next is the QXK idle thread)
@attention
QXK_onContextSw() is invoked with interrupts <strong>disabled</strong> and must also
return with interrupts <strong>disabled</strong>.

@note
This callback is enabled by defining the macro #QXK_ON_CONTEXT_SW.

@include qxk_oncontextsw.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8h_1ae0f3cd5372545b51615131c5a9b188ee';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_onIdle';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      func-mem-desc-line = '113';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QXK idle callback (customized in BSPs for QXK)
\ilinebr\ilinebr 
QXK_onIdle() is called continuously by the QXK idle thread. This callback
gives the application an opportunity to enter a power-saving CPU mode,
or perform some other idle processing.

@note
QXK_onIdle() is invoked with interrupts enabled and must also return with
interrupts enabled.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8h_1aca79db59710dd3f4863d6dfe97de7560';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_sched_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      func-mem-desc-line = '117';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QXK scheduler finds the highest-priority thread ready to run 

The QXK scheduler finds the priority of the highest-priority thread
that is ready to run.

@returns
the 1-based priority of the the thread (basic or extended) run next,
or zero if no eligible thread is found.

@attention
QXK_sched_() must be always called with interrupts <strong>disabled</strong> and
returns with interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8h_1a6c1512e28d50b179aa627d74513cb242';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_activate_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      func-mem-desc-line = '122';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QXK activator activates the next active object. The activated AO preempts
the currently executing AOs.

@attention
QXK_activate_() must be always called with interrupts <strong>disabled</strong> and
returns with interrupts <strong>disabled</strong>.

@note
The activate function might enable interrupts internally, but it always
returns with interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8h_1a6fe41827615c8c6e2a045c16cb9d8ed5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
struct QActive *
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_current';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      func-mem-desc-line = '126';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
return the currently executing active-object/thread 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8h_1a5efc78d4b56e41d3da82c16c75e8887c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_schedLock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ceiling';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      func-mem-desc-line = '135';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QXK Scheduler lock 

This function locks the QXK scheduler to the specified ceiling.

@param [in]   ceiling    priority ceiling to which the QXK scheduler
                        needs to be locked

@returns
The previous QXK Scheduler lock status, which is to be used to unlock
the scheduler by restoring its previous lock status in QXK_schedUnlock().

@note
A QXK scheduler can be locked from both basic threads (AOs) and
extended threads and the scheduler locks can nest.

@note
QXK_schedLock() must be always followed by the corresponding
QXK_schedUnlock().

@attention
QXK will fire an assertion if a thread holding the lock attempts
to block.

@sa QXK_schedUnlock()

@par Usage
The following example shows how to lock and unlock the QXK scheduler:
@include qxk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8h_1adb01b8714874aba54c19b68a76d1b9d5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_schedUnlock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stat';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      func-mem-desc-line = '138';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QXK Scheduler unlock 

This function unlocks the QXK scheduler to the previous status.

@param [in]   stat       previous QXK Scheduler lock status returned from
                        QXK_schedLock()

@note
A QXK scheduler can be locked from both basic threads (AOs) and
extended threads and the scheduler locks can nest.

@note
QXK_schedUnlock() must always follow the corresponding QXK_schedLock().

@sa QXK_schedLock()

@par Usage
The following example shows how to lock and unlock the QXK scheduler:
@include qxk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qxk_8h_1aad60bad4e7296ef118832aeb7ef8bb01';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QXK_PrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QXK_attr_';
      var-mem-desc-file = 'C:/qp-dev/qpc/include/qxk.h';
      var-mem-desc-line = '75';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
global attributes of the QXK kernel 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qxk.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QXK/C (preemptive dual-mode kernel) platform-independent
public interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qxthread_8h';
  file-name = 'qxthread.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxthread_8h_1a3a257074a0f50871ab5e93fb1b761627';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXTHREAD_START';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'prio_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qLen_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'stkSto_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'stkSize_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'par_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
do {                                                                      \
    Q_ASSERT((me_)->super.super.vptr);                                    \
    ((*((QActiveVtable const *)((me_)->super.super.vptr))->start)(        \
        &(me_)->super, (prio_), (QEvt const **)(qSto_), (qLen_),          \
        (stkSto_), (stkSize_), (par_)));                                  \
} while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Polymorphically start an extended thread.
\ilinebr\ilinebr 
Starts execution of the thread and registers the thread with the framework.

@param [in,out] me_      pointer (see @ref oop)
@param [in]     prio_    priority of the extended-thread
@param [in]     qSto_    pointer to the storage for the ring buffer of the
                        message queue (possibly NULL)
@param [in]     qLen_    length of the message queue [events] (possibly 0)
@param [in]     stkSto_  pointer to the stack storage (required)
@param [in]     stkSize_ stack size [bytes]
@param [in]     par_     pointer to the additional port-specific parameter(s)
                        (might be NULL).
@par Usage
@include qxk_start.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxthread_8h_1a008bc4f0ee9b08eba5cb71ef2cef84fa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXTHREAD_POST_X';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'margin_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sender_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    QACTIVE_POST_X(&(me_)->super, (e_), (margin_), (sender_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Asynchronous posting events to the event queue of an eXtended thread
\ilinebr\ilinebr 
This macro does not assert if the queue overflows and cannot accept
the event with the specified margin of free slots remaining.

@param [in,out] me_   pointer (see @ref oop)
@param [in]     e_    pointer to the event to post
@param [in]     margin_ the minimum free slots in the queue, which
                     must still be available after posting the event.
                     The special value #QF_NO_MARGIN causes asserting
                     failure in case event allocation fails.
@param [in]     sender_ pointer to the sender object (used in QS tracing)

@returns
'true' if the posting succeeded, and 'false' if the posting failed due
to insufficient margin of free slots available in the queue.

@note
The @p sender_ parameter is actually only used when QS tracing is enabled
(macro #Q_SPY is defined). When QS software tracing is disabled, the
QXTHREAD_POST_X() macro does not pass the @p sender_ argument, so the
overhead of passing this extra argument is entirely avoided.

@note
The pointer to the sender object is not necessarily a pointer to an
active object. In fact, if QXTHREAD_POST_X() is called from an interrupt
or other context, you can create a unique object just to unambiguously
identify the sender of the event.

@par Usage
@include qf_postx.c
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxthread_8h_1abace4abc24887d0adaadb26642133cfd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXTHREAD_NO_TIMEOUT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((uint_fast16_t)0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      define-mem-desc-line = '155';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
no-timeout special timeout value when blocking on queues or semaphores 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'qxthread_8h_1af521d2ff3cfa6071f3c53ecd1bc38acc';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
QActiveVtable
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'QXThreadVtable';
      typedef-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      typedef-mem-desc-line = '74';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
Virtual Table for the ::QXThread class (inherited from ::QActiveVtable)
@note
::QXThread inherits ::QActive without adding any new virtual
functions and therefore, ::QXThreadVtable is typedef'ed as ::QActiveVtable.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxthread_8h_1a8307d81827e59120494adddde980bf7c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_ctor';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThreadHandler
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'tickRate';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/include/qxthread.h';
      func-mem-desc-line = '101';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
constructor of an extended-thread 

Performs the first step of QXThread initialization by assigning the
thread-handler function and the tick rate at which it will handle
the timeouts.

@param [in,out] me       pointer (see @ref oop)
@param [in]     handler  the thread-handler function
@param [in]     tickRate the ticking rate for timeouts in this thread
               (see QXThread_delay() and QF_TICK_X())

@note
Must be called only ONCE before QXTHREAD_START().

@par Usage
The following example illustrates how to invoke QXThread_ctor() in the
main() function

@include
qxk_thread_ctor.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/include/qxthread.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QXK/C eXtended (blocking) thread.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qep__hsm_8c';
  file-name = 'qep_hsm.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep__hsm_8c_1a7ad5a0cfc574d94f83bcf424a0f6fd45';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QEP_EXIT_';
      define-mem-param  = {
        define-mem-def-name = 'state_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {                  \
        if ((*(state_))(me, &QEP_reservedEvt_[Q_EXIT_SIG])  \
             == (QState)Q_RET_HANDLED) {                    \
            QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, (qs_id_))      \
                QS_OBJ_PRE_(me);                            \
                QS_FUN_PRE_(state_);                        \
            QS_END_PRE_()                                   \
        }                                                   \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep__hsm_8c_1a90fe6e818cdb07b970c9446962c10a4a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QEP_ENTER_';
      define-mem-param  = {
        define-mem-def-name = 'state_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {                 \
        if ((*(state_))(me, &QEP_reservedEvt_[Q_ENTRY_SIG]) \
             == (QState)Q_RET_HANDLED) {                    \
            QS_BEGIN_PRE_(QS_QEP_STATE_ENTRY, (qs_id_))     \
                QS_OBJ_PRE_(me);                            \
                QS_FUN_PRE_(state_);                        \
            QS_END_PRE_()                                   \
        }                                                   \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      define-mem-desc-line = '95';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qep__hsm_8c_1abc6126af1d45847bc59afa0aa3216b04';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = '@3';
      enum-mem-enum = { enum-name = QEP_EMPTY_SIG_; enum-value = '= 0'; };
      enum-mem-enum = { enum-name = QHSM_MAX_NEST_DEPTH_; enum-value = '= 6'; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      enum-mem-desc-line = '53';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal QEP constants 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qep__hsm_8c_1adca7823f887438e26988d5d640a1152a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static QState
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QHsm_trig_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'state';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSignal
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sig';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      func-mem-desc-line = '78';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper function to trigger reserved event in an HSM 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qep__hsm_8c_1a7d9ed1bfef8622599c8e38604fed3195';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static int_fast8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QHsm_tran_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'path';
        func-mem-param-array = '[QHSM_MAX_NEST_DEPTH_]';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      func-mem-desc-line = '106';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper function to execute state transition 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qep__hsm_8c_1ad11a75af46c8d76f513a3989edfad880';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QHsm_getStateHandler_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      func-mem-desc-line = '604';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__qp_1gade1be4c4eaf67031f226e9781d2e5ee8';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
char const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QP_versionStr';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= QP_VERSION_STR
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      var-mem-desc-line = '49';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the current QP version number string in ROM, based on #QP_VERSION_STR 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qep__hsm_8c_1a68866a8de042c6d65db462e7edd87b2a';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static QEvt const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QEP_reservedEvt_';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= {
    { (QSignal)QEP_EMPTY_SIG_, 0U, 0U },
    { (QSignal)Q_ENTRY_SIG,    0U, 0U },
    { (QSignal)Q_EXIT_SIG,     0U, 0U },
    { (QSignal)Q_INIT_SIG,     0U, 0U }
}
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
      var-mem-desc-line = '70';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
Static, preallocated standard events that the QEP event processor sends
to state handler functions of QHsm-style state machine to execute entry
actions, exit actions, and initial transitions.

 \xrefitem srs_tr 29.
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qep_hsm.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
::QHsm implementation
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0




 \xrefitem srs_tr 28.
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qep__msm_8c';
  file-name = 'qep_msm.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qep__msm_8c_1a2f03aa5208a8d8e4074872f6822aa874';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QMSM_MAX_ENTRY_DEPTH_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_msm.c';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal QEP constants 


maximum depth of entry levels in a MSM for transition to history. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qep__msm_8c_1a354acc5c15ba2458812db4ca30ec55f5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QStateHandler
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QMsm_getStateHandler_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_msm.c';
      func-mem-desc-line = '398';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qep__msm_8c_1aae45de5c95eacc55233bf6773aab8049';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static struct QMState const
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'l_msm_top_s';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= {
    (struct QMState *)0,
    Q_STATE_CAST(0),
    Q_ACTION_CAST(0),
    Q_ACTION_CAST(0),

}
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qep_msm.c';
      var-mem-desc-line = '51';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qep_msm.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
::QMsm implementation
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-31
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__act_8c';
  file-name = 'qf_act.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_act.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
::QActive services and @ref qf support code
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__actq_8c';
  file-name = 'qf_actq.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__actq_8c_1ac19e9d2171cbe7ab62b3f9d6234c25e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QTICKER_CAST_';
      define-mem-param  = {
        define-mem-def-name = 'me_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QActive *)(me_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      define-mem-desc-line = '417';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Perform downcast to QTicker pointer. 


\ilinebr\ilinebr 
This macro encapsulates the downcast to (QTicker *), which is used in
QTicker_init_() and QTicker_dispatch_(). Such casts violate MISRA-C 2012
Rule 11.3(req) "cast from pointer to object type to pointer to different
object type".
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qf__actq_8c_1ac42f381ae6caf701f6503d5245318dc9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QTicker_init_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      func-mem-desc-line = '393';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qf__actq_8c_1a9f5d3fd1f7136182abf38171a3521cf3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QTicker_dispatch_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      func-mem-desc-line = '395';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qf__actq_8c_1ade765e9cfa2bb110f15f6bf16d69d474';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QTicker_post_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'margin';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sender';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      func-mem-desc-line = '487';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
virtual function to asynchronously post (FIFO) an event to an AO 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qf__actq_8c_1a2717c6c822f2e26aeefc0ab250d33808';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QTicker_postLIFO_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      func-mem-desc-line = '407';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qf__actq_8c_1a3558503dacda5fe520ce300fce4627a2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QTicker_ctor';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QTicker *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'tickRate';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
      func-mem-desc-line = '421';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
"constructor" of QTicker 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_actq.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
::QActive native queue operations (based on ::QEQueue)
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0




@note
this source file is only included in the application build when the native
QF active object queue is used (instead of a message queue of an RTOS).
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__defer_8c';
  file-name = 'qf_defer.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_defer.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QActive_defer() and QActive_recall() implementation.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__dyn_8c';
  file-name = 'qf_dyn.c';
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qf__dyn_8c_1af61aa7f60a48a1353b96687654978672';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QF_EPOOL_TYPE_
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_pool_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_dyn.c';
      var-mem-desc-line = '48';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
allocate event pools 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qf__dyn_8c_1ab0aa30d4ef8cf83a94712bf61c36ea6a';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_maxPool_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_dyn.c';
      var-mem-desc-line = '49';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
@section autotoc_md0 of initialized event pools
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_dyn.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QF/C dynamic event management.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__mem_8c';
  file-name = 'qf_mem.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_mem.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
::QMPool implementatin (Memory Pool)
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__ps_8c';
  file-name = 'qf_ps.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_ps.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Publish-Subscribe services.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__qact_8c';
  file-name = 'qf_qact.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_qact.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QActive_ctor() definition.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0




\ilinebr\ilinebr 
This file must remain separate from the rest to avoid pulling in the
"virtual" functions QHsm_init_() and QHsm_dispatch_() in case they
are not used by the application.

@sa qf_qmact.c
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__qeq_8c';
  file-name = 'qf_qeq.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_qeq.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
::QEQueue implementation (QP native thread-safe queue)
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__qmact_8c';
  file-name = 'qf_qmact.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__qmact_8c_1af64048afc83072e4edbb110dcb53f695';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QMSM_CAST_';
      define-mem-param  = {
        define-mem-def-name = 'ptr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QMsm *)(ptr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_qmact.c';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_qmact.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QMActive_ctor() definition.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0




\ilinebr\ilinebr 
This file must remain separate from the rest to avoid pulling in the
"virtual" functions QHsm_init_() and QHsm_dispatch_() in case they
are not used by the application.

@sa qf_qact.c
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__time_8c';
  file-name = 'qf_time.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__time_8c_1a38eb5e6fcd14c5617b2868d53c75a078';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QACTIVE_CAST_';
      define-mem-param  = {
        define-mem-def-name = 'ptr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QActive *)(ptr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf/qf_time.c';
      define-mem-desc-line = '57';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
intertnal macro to encapsulate a MISRA deviation
\ilinebr\ilinebr 
This internal macro encapsulates the violation of MISRA-C 2012
Rule 11.5(A) "A conversion should not be performed from pointer to void
into pointer to object".
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qf/qf_time.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QF/C time events and time management services.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qf__pkg_8h';
  file-name = 'qf_pkg.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a3d480915b17e516611e98a3db2324bb3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_CRIT_STAT_';
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is an internal macro for defining the critical section
status type.\ilinebr\ilinebr 
The purpose of this macro is to enable writing the same code for the
case when critical section status type is defined and when it is not.
If the macro #QF_CRIT_STAT_TYPE is defined, this internal macro
provides the definition of the critical section status variable.
Otherwise this macro is empty.
@sa #QF_CRIT_STAT_TYPE
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1af3054fc5655dbc9e5a42453a2e6498d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_CRIT_E_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QF_CRIT_ENTRY(dummy)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is an internal macro for entering a critical section.\ilinebr\ilinebr 
The purpose of this macro is to enable writing the same code for the
case whe6n critical section status type is defined and when it is not.
If the macro #QF_CRIT_STAT_TYPE is defined, this internal macro
invokes QF_CRIT_ENTRY() passing the key variable as the parameter.
Otherwise QF_CRIT_ENTRY() is invoked with a dummy parameter.
@sa QF_CRIT_ENTRY()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a862289dc4afe0b7818c5b29c139e91e7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_CRIT_X_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QF_CRIT_EXIT(dummy)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is an internal macro for exiting a critical section.\ilinebr\ilinebr 
The purpose of this macro is to enable writing the same code for the
case when critical section status type is defined and when it is not.
If the macro #QF_CRIT_STAT_TYPE is defined, this internal macro
invokes #QF_CRIT_EXIT passing the key variable as the parameter.
Otherwise #QF_CRIT_EXIT is invoked with a dummy parameter.
@sa #QF_CRIT_EXIT
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a6ec98cde0e8308b3d9947ca15a7ae906';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ASSERT_CRIT_';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {               \
        if ((test_)) {} else {                            \
            QF_CRIT_X_();                                 \
            Q_onAssert(&Q_this_module_[0], (int_t)(id_)); \
        }                                                 \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1ae33d501e35770399c603967b2a5ad495';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_REQUIRE_CRIT_';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'test_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
Q_ASSERT_CRIT_((id_), (test_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1afdfcff3eb023cf53d319445d99cf5a8d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'Q_ERROR_CRIT_';
      define-mem-param  = {
        define-mem-def-name = 'id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        do {                       \
        QF_CRIT_X_();                                     \
        Q_onAssert(&Q_this_module_[0], (int_t)(id_));     \
    } while (false)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a47e739a518e2323ea1b08670cabe433c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'TE_IS_LINKED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1U << 7U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '158';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a1f1ee4e18eec1600bce691dc2af7e025';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'TE_WAS_DISARMED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1U << 6U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '159';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a4335af8b6df541d51e1a62eaab74c23c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'TE_TICK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0FU
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '160';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a7890c9964c0121a7522e880029a7bcb5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EVT_CONST_CAST_';
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QEvt *)(e_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
helper macro to cast const away from an event pointer @p e_ 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1abb0be5929f412d2cf4da25cae7ad72d3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EVT_REF_CTR_INC_';
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(++QF_EVT_CONST_CAST_(e_)->refCtr_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '178';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
increment the refCtr of an event @p e_ casting const away 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a6078b924503652153fbeae19d7897a02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_EVT_REF_CTR_DEC_';
      define-mem-param  = {
        define-mem-def-name = 'e_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(--QF_EVT_CONST_CAST_(e_)->refCtr_)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '181';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
decrement the refCtr of an event @p e_ casting const away 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1a4e32e4833cb9f41e69ad01e95bd0d3ca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_PTR_AT_';
      define-mem-param  = {
        define-mem-def-name = 'base_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'i_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((base_)[(i_)])
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
access element at index @p i_ from the base pointer @p base_ 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qf__pkg_8h_1ab00dcedba1a6b52193c2e539cf65e167';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QF_PTR_RANGE_';
      define-mem-param  = {
        define-mem-def-name = 'x_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'min_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'max_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((min_) <= (x_)) && ((x_) <= (max_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      define-mem-desc-line = '194';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is specifically and exclusively used for checking the range
of a block pointer returned to the pool. Such a check must rely on the
pointer arithmetic not compliant with the MISRA-C 2012 Rule 18.3(R).
Defining a specific macro for this purpose allows to selectively disable
the warnings for this particular case.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qf__pkg_8h_1a79d6304a4324086ed30a6f145625ab78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActive_start_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prio';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qLen';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSize';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      func-mem-desc-line = '119';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Prototype of the internal active object start implementation 

Starts execution of the AO and registers the AO with the framework.
Also takes the top-most initial transition in the AO's state machine.
This initial transition is taken in the callee's thread of execution.

@param [in,out] me      pointer (see @ref oop)
@param [in]     prio    priority at which to start the active object
@param [in]     qSto    pointer to the storage for the ring buffer of the
                       event queue (used only with the built-in ::QEQueue)
@param [in]     qLen    length of the event queue [events]
@param [in]     stkSto  pointer to the stack storage (must be NULL in QK)
@param [in]     stkSize stack size [bytes]
@param [in]     par     pointer to an extra parameter (might be NULL).

@note This function should be called via the macro QACTIVE_START().

@par Usage
The following example shows starting an AO when a per-task stack is needed:
@include qf_start.c

Starts execution of the AO and registers the AO with the framework.
Also takes the top-most initial transition in the AO's state machine.
This initial transition is taken in the callee's thread of execution.

@param [in,out] me      pointer (see @ref oop)
@param [in]     prio    priority at which to start the active object
@param [in]     qSto    pointer to the storage for the ring buffer of the
                       event queue (used only with the built-in ::QEQueue)
@param [in]     qLen    length of the event queue [events]
@param [in]     stkSto  pointer to the stack storage (must be NULL in QV)
@param [in]     stkSize stack size [bytes]
@param [in]     par     pointer to an extra parameter (might be NULL).

@note This function should be called via the macro QACTIVE_START().

@par Usage
The following example shows starting an AO when a per-task stack is needed:
@include qf_start.c

Starts execution of the AO and registers the AO with the framework.
Also takes the top-most initial transition in the AO's state machine.
This initial transition is taken in the callee's thread of execution.

@param [in,out] me      pointer (see @ref oop)
@param [in]     prio    priority at which to start the active object
@param [in]     qSto    pointer to the storage for the ring buffer of the
                       event queue (used only with the built-in ::QEQueue)
@param [in]     qLen    length of the event queue [events]
@param [in]     stkSto  pointer to the stack storage (used only when
                       per-AO stack is needed)
@param [in]     stkSize stack size [bytes]
@param [in]     par     pointer to an extra parameter (might be NULL).

@note This function should be called via the macro QACTIVE_START().

@par Usage
The following example shows starting an AO when a per-task stack is needed:
@include qf_start.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qf__pkg_8h_1af61aa7f60a48a1353b96687654978672';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QF_EPOOL_TYPE_
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_pool_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      var-mem-desc-line = '162';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
allocate event pools 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qf__pkg_8h_1ab0aa30d4ef8cf83a94712bf61c36ea6a';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_maxPool_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      var-mem-desc-line = '163';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
@section autotoc_md0 of initialized event pools
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qf__pkg_8h_1aade4bd188c59b882a1df3864e2fb9a5e';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QSubscrList *
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_subscrList_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      var-mem-desc-line = '164';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the subscriber list array 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qf__pkg_8h_1a5db24bb49aa7f1346c3b09b097c19bbb';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
enum_t
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_maxPubSignal_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qf_pkg.h';
      var-mem-desc-line = '165';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
the maximum published signal 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qf_pkg.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Internal (package scope) QF/C interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qk_8c';
  file-name = 'qk.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1adac7eccb860d910c4e446d3143798bba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '65';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes QF and must be called exactly once before any other QF
function. Typically, QF_init() is called from main() even before
initializing the Board Support Package (BSP).

@note QF_init() clears the internal QF variables, so that the framework
can start correctly even if the startup code fails to clear the
uninitialized data (as is required by the C Standard).
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1adf9cb86740bf55c5ad55c1d44fd35921';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_stop';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '99';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function stops the QF application. After calling this function,
QF attempts to gracefully stop the application. This graceful shutdown
might take some time to complete. The typical use of this function is
for terminating the QF application to return back to the operating
system or for handling fatal errors that require shutting down
(and possibly re-setting) the system.

@attention
After calling QF_stop() the application must terminate and cannot
continue. In particular, QF_stop() is <strong>not</strong> intended to be followed
by a call to QF_init() to "resurrect" the application.

@sa QF_onCleanup()
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1acdd3cebb48142880c0147c6f4eb3d131';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'initial_events';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '107';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
process all events posted during initialization 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1a779a1bc9482e2d489dc87751cd100fdb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_run';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '125';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QF_run() is typically called from your startup code after you initialize
the QF and start at least one active object with QACTIVE_START().

@returns
In QK, the QF_run() does not return.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1a79d6304a4324086ed30a6f145625ab78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActive_start_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prio';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qLen';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSize';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '167';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Starts execution of the AO and registers the AO with the framework.
Also takes the top-most initial transition in the AO's state machine.
This initial transition is taken in the callee's thread of execution.

@param [in,out] me      pointer (see @ref oop)
@param [in]     prio    priority at which to start the active object
@param [in]     qSto    pointer to the storage for the ring buffer of the
                       event queue (used only with the built-in ::QEQueue)
@param [in]     qLen    length of the event queue [events]
@param [in]     stkSto  pointer to the stack storage (must be NULL in QK)
@param [in]     stkSize stack size [bytes]
@param [in]     par     pointer to an extra parameter (might be NULL).

@note This function should be called via the macro QACTIVE_START().

@par Usage
The following example shows starting an AO when a per-task stack is needed:
@include qf_start.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1a6d638caae0fbbaf0c0912e78205525c6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_schedLock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ceiling';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '221';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function locks the QK scheduler to the specified ceiling.

@param [in]   ceiling    priority ceiling to which the QK scheduler
                        needs to be locked

@returns
The previous QK Scheduler lock status, which is to be used to unlock
the scheduler by restoring its previous lock status in QK_schedUnlock().

@note
QK_schedLock() must be always followed by the corresponding
QK_schedUnlock().

@sa QK_schedUnlock()

@par Usage
The following example shows how to lock and unlock the QK scheduler:
@include qk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1ad16b86d19848aa52a704b514c96373fa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_schedUnlock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stat';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '271';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlocks the QK scheduler to the previous status.

@param [in]   stat       previous QK Scheduler lock status returned from
                        QK_schedLock()
@note
QK_schedUnlock() must always follow the corresponding QK_schedLock().

@sa QK_schedLock()

@par Usage
The following example shows how to lock and unlock the QK scheduler:
@include qk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1a49a6ff5d3a7c6ae58e33a2b943efb2fc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_sched_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '320';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The QK scheduler finds out the priority of the highest-priority AO
that (1) has events to process and (2) has priority that is above the
current priority.

@returns
the 1-based priority of the the active object, or zero if no eligible
active object is ready to run.

@attention
QK_sched_() must be always called with interrupts <strong>disabled</strong> and
returns with interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qk_8c_1a57768dcdb71b3e41f329bae839584399';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QK_activate_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      func-mem-desc-line = '348';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QK_activate_() activates ready-to run AOs that are above the initial
active priority (QK_attr_.actPrio).

@note
The activator might enable interrupts internally, but always returns with
interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qk_8c_1a9c465b899f06067196a6633e0bc4c7b0';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QK_PrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QK_attr_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qk/qk.c';
      var-mem-desc-line = '52';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
global private attributes of the QK kernel 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qk/qk.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QK preemptive kernel implementation.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qs_8c';
  file-name = 'qs.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs_8c_1a7c7af621aaee2d8c8a044a2c001e8d38';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_initBuf';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sto';
        func-mem-param-array = '[]';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stoSize';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs.c';
      func-mem-desc-line = '69';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function should be called from QS_onStartup() to provide QS with
the data buffer. The first parameter @p sto[] is the address of the memory
block, and the second parameter @p stoSize is the size of this block
in bytes. Currently the size of the QS buffer cannot exceed 64KB.

@note QS can work with quite small data buffers, but you will start losing
data if the buffer is too small for the bursts of tracing activity.
The right size of the buffer depends on the data production rate and
the data output rate. QS offers flexible filtering to reduce the data
production rate.

@note If the data output rate cannot keep up with the production rate,
QS will start overwriting the older data with newer data. This is
consistent with the "last-is-best" QS policy. The record sequence counters
and check sums on each record allow the QSPY host uitiliy to easily detect
any data loss.

@note
This function initializes all the internal QS variables, so that the
tracing can start correctly even if the startup code fails to clear
any uninitialized data (as is required by the C Standard).
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs_8c_1a57ba82e7082ffed1ef9997918687b904';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_QS_CRIT_EXIT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs.c';
      func-mem-desc-line = '1061';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qs_8c_1a0362422ca4007de9001955731f312c44';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QSPrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QS_priv_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs.c';
      var-mem-desc-line = '42';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qs/qs.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QS software tracing services.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qs__64bit_8c';
  file-name = 'qs_64bit.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qs/qs_64bit.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QS long-long (64-bit) output.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qs__fp_8c';
  file-name = 'qs_fp.c';
  file-full-name  = 'C:/qp-dev/qpc/src/qs/qs_fp.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QS floating point output implementation.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qs__rx_8c';
  file-name = 'qs_rx.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1aa8285063cb6d42cd8f49c52e77e033aa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxInitBuf';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sto';
        func-mem-param-array = '[]';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stoSize';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '237';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function should be called from QS_onStartup() to provide QS-RX with
the receive data buffer.

@param [in]  sto[]   the address of the memory block
@param [in]  stoSize the size of this block [bytes]. The size of the
                    QS RX buffer cannot exceed 64KB.

@note QS-RX can work with quite small data buffers, but you will start
losing data if the buffer is not drained fast enough in the idle task.

@note If the data input rate exceeds the QS-RX processing rate, the data
will be lost, but the QS protocol will notice that:
(1) that the checksum in the incomplete QS records will fail; and
(2) the sequence counter in QS records will show discontinuities.

The QS-RX channel will report any data errors by sending the
QS_RX_DATA_ERROR trace record.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a8f8922829e53f8e1df19c9b9094689fa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_RX_PUT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '269';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
put one byte into the QS RX lock-free buffer 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1af0e4b1381033281df9590c8e6669b295';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxGetNfree';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '293';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function is intended to be called from the ISR that reads the QS-RX
bytes from the QSPY host application. The function returns the conservative
number of free bytes currently available in the buffer, assuming that
the head pointer is not being moved concurrently. The tail pointer might
be moving, meaning that bytes can be concurrently removed from the buffer.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1ac5910f99d5872e21ad7ad4cbeb91a2fe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_setCurrObj';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'obj_kind';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'obj_ptr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '311';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function programmatically sets the "current object" in the Target.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a514d8e7d35532f223bd2839d5e763ba2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_queryCurrObj';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'obj_kind';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '322';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function programmatically generates the response to the query for
a "current object".
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a5b68b40c1e5582313073f6ca7d637156';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxParse';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '376';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a34e1d69225482b1d943273056d26211f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxParseData_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '421';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1ad648ba26f84596db67b350bebef370f0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxHandleGoodFrame_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'state';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '861';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a9379ec2a0ffaae0f948bd18468c0fff2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxHandleBadFrame_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'state';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '1177';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a7c7a6666eca450ee6728d9cb3993bc40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxReportAck_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'recId';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '1193';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1aa8a4fb08d4bc38863e266369cc4693b2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxReportError_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'code';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '1205';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a0b97f7121f5c77e459ee623802efaede';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxReportDone_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'recId';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '1217';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a943031c0fe344688360f5cd65e18b989';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_rxPoke_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '1230';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1a6af96b193f84a7b8b45982eb002c9ff2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_getTestProbe_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(void)
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'api';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '1269';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function obtains the Test-Probe for a given API.

@param [in]  api  pointer to the API function that requests its Test-Probe

@returns Test-Probe data that has been received for the given API
from the Host (running qutest). For any ginve API, the function returns
the Test-Probe data in the same order as it was received from the Host.
If there is no Test-Probe for a ginve API, or no more Test-Probes for
a given API, the function returns zero.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__rx_8c_1aab86d18c44b62d19644a5ec709bd8b0d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QSTimeCtr
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_onGetTime';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      func-mem-desc-line = '1302';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qs__rx_8c_1ae10b9ec063ffc60be8f71d3699c466c0';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QSrxPrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QS_rxPriv_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
      var-mem-desc-line = '41';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qs/qs_rx.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QS/C receive channel services.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qutest_8c';
  file-name = 'qutest.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1a28283109e182655dc8e9cc855f4e166d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QHsmDummy_init_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '108';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1a998bdbad91557f8bd0ba0fb559968e20';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QHsmDummy_dispatch_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '110';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1a4738b38bc8895ae8046badea54423401';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActiveDummy_init_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '158';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1ac5136d965b679a96a04b104378c10c48';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActiveDummy_dispatch_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '160';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1a992b92b4f30d9c45acb4a24532eafc72';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActiveDummy_post_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'margin';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sender';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '162';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1a7b81145b0a84b94859e816873e050003';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActiveDummy_postLIFO_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '164';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1ab722882d297746e9b5da1fab7e7f3be4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActiveDummy_start_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prio';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qLen';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSize';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '165';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qutest_8c_1ac75998ccf668a201239fe6522b72bf5f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
Q_NORETURN
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Q_onAssert';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
char const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'module';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'location';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      func-mem-desc-line = '481';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Callback function invoked in case of any assertion failure.
\ilinebr\ilinebr 
This is an application-specific callback function needs to be defined in
the application to perform the clean system shutdown and perhaps a reset.

@param [in] module name of the file/module in which the assertion failed
                  (constant, zero-terminated C string)
@param [in] location location of the assertion within the module. This could
                  be a line number or a user-specified ID-number.

@note This callback function should <em>not</em> return, as continuation after
an assertion failure does not make sense.

@note The Q_onAssert() function is the last line of defense after the
system failure and its implementation shouild be very <strong>carefully</strong>
designed and <strong>tested</strong> under various fault conditions, including but
not limited to: stack overflow, stack corruption, or calling Q_onAssert()
from an interrupt.

@note It is typically a <strong>bad idea</strong> to implement Q_onAssert() as an
endless loop that ties up the CPU. During debuggin, Q_onAssert() is an
ideal place to put a breakpoint.

Called by the following macros: #Q_ASSERT, #Q_REQUIRE, #Q_ENSURE,
#Q_ERROR, #Q_ALLEGE as well as #Q_ASSERT_ID, #Q_REQUIRE_ID, #Q_ENSURE_ID,
#Q_ERROR_ID, and #Q_ALLEGE_ID.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qutest_8c_1a1829f140f3e88c9e8e10f1c2d80d4e06';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t volatile
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QF_intNest';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qs/qutest.c';
      var-mem-desc-line = '46';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qs/qutest.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QF/C stub for QUTEST unit testing.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qs__pkg_8h';
  file-name = 'qs_pkg.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1ae9262feefb2ad45bf0a52e377463f854';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FRAME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7EU)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Frame character of the QS output protocol 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a435d7883ab720fa1c3ee11e54d317b34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_ESC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7DU)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Escape character of the QS output protocol 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1acc866dd7f16dc5ba32287ee2c51a97af';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_GOOD_CHKSUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFU)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '74';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The expected checksum value over an uncorrupted QS record 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a857041e65081108f649295b2fc744768';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_ESC_XOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x20U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '82';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Escape modifier of the QS output protocol\ilinebr\ilinebr 
The escaped byte is XOR-ed with the escape modifier before it is inserted
into the QS buffer.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a00e1eb6432f6561066e4b1eb93c121f9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_BEGIN_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    if (QS_GLB_CHECK_(rec_) && QS_LOC_CHECK_(qs_id_)) { \
        QS_CRIT_E_();                                   \
        QS_beginRec_((uint_fast8_t)(rec_));
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '115';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to begin a predefined QS record with
entering critical section.@note This macro is intended to use only inside QP components and NOT
at the application level.
@sa QS_BEGIN_ID()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1afcea3495c4f164de2b941e5797d25e77';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_END_PRE_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        QS_endRec_(); \
        QS_CRIT_X_(); \
    }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to end a predefined QS record with
exiting critical section.@note This macro is intended to use only inside QP components and NOT
at the application level.
@sa QS_END()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a0d4dcffa64225c6439de117a5cdea825';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_BEGIN_NOCRIT_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'rec_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'qs_id_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    if (QS_GLB_CHECK_(rec_) && QS_LOC_CHECK_(qs_id_)) { \
        QS_beginRec_((uint_fast8_t)(rec_));
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro to begin a predefined QS record without
entering critical section.@note This macro is intended to use only inside QP components and NOT
at the application level.
@sa QS_BEGIN_NOCRIT()
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a4dfa4c19fe82a0e70482a59bbc259b74';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_END_NOCRIT_PRE_';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_endRec_(); }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '149';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to end a predefined QS record without
exiting critical section.@note This macro is intended to use only inside QP components and NOT
at the application level. @sa #QS_END_NOCRIT
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a053da7e123b9bd2cc9e0a6397788ed04';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U8_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u8_raw_((uint8_t)(data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '152';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output a predefined uint8_t data element 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a772e7f535817933583b4caaa041ca7af';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_2U8_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'data1_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'data2_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    (QS_2u8_raw_((uint8_t)(data1_), (uint8_t)(data2_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '155';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output 2 predefined uint8_t data elements 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a4efcdb31954bb9daf5b0d1c6e83cf0c2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U16_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u16_raw_((uint16_t)(data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '159';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output an predefined uint16_t data element 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1aec00de97b0b23ea7f1a6e3369f089e58';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_U32_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'data_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u32_raw_((uint32_t)(data_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '162';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output a predefined uint32_t data element 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1afaf9b289bdd773bcb1081a8c38b26aa1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_STR_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'msg_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_str_raw_((msg_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '165';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output a predefined zero-terminated string element 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a87d02e84dc03baaeabbf3961334684be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_SIG_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'sig_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u8_raw_((uint8_t)sig_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '173';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal macro to output an unformatted event signal data element@note the size of the pointer depends on the macro #Q_SIGNAL_SIZE.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a1af3808e347e05a387eeb3e3b392d01c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_OBJ_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'obj_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_obj_raw_(obj_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '180';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a1e7b8934e0ed4a5a35bb8cde2287f2d3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_FUN_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'fun_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(QS_u8_raw_((uint8_t)(fun_)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '183';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a9b17a251df73429bc50ed44cc32cc0a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_EQC_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'ctr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_u8_raw_((uint8_t)(ctr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '206';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output an unformatted event queue counter
data element.@note the counter size depends on the macro #QF_EQUEUE_CTR_SIZE.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a84e89764c667d901096f86c263764daa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_EVS_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'size_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_u8_raw_((uint8_t)(size_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '221';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output an unformatted event size
data element.@note the event size depends on the macro #QF_EVENT_SIZ_SIZE.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a17cce918b0f66bd69718a2800b0ac8da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_MPS_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'size_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_u8_raw_((uint8_t)(size_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '236';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output an unformatted memory pool
block-size data element@note the block-size depends on the macro #QF_MPOOL_SIZ_SIZE.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a273382b33fb4e31de9e45fcd392cee82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_MPC_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'ctr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_u8_raw_((uint8_t)(ctr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '250';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output an unformatted memory pool
block-counter data element.@note the counter size depends on the macro #QF_MPOOL_CTR_SIZE.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a4ce2c70f3786db01f3e5cfb39525af00';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_TEC_PRE_';
      define-mem-param  = {
        define-mem-def-name = 'ctr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
QS_u8_raw_((uint8_t)(ctr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '265';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to output an unformatted time event
tick-counter data element@note the counter size depends on the macro #QF_TIMEEVT_CTR_SIZE.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1af7c74fc8a465b35f7e0bb87bd8ec9747';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_INSERT_BYTE_';
      define-mem-param  = {
        define-mem-def-name = 'b_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    buf[head] = (b_);       \
    ++head;                 \
    if (head == end) {      \
        head = 0U;          \
    }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '274';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to insert an un-escaped byte into the QS buffer 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qs__pkg_8h_1a1989e57629fda695ab8b1ca25b865a65';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QS_INSERT_ESC_BYTE_';
      define-mem-param  = {
        define-mem-def-name = 'b_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    chksum = (uint8_t)(chksum + (b_));               \
    if (((b_) != QS_FRAME) && ((b_) != QS_ESC)) {    \
        QS_INSERT_BYTE_(b_)                          \
    }                                                \
    else {                                           \
        QS_INSERT_BYTE_(QS_ESC)                      \
        QS_INSERT_BYTE_((uint8_t)((b_) ^ QS_ESC_XOR))\
        ++QS_priv_.used;                             \
    }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      define-mem-desc-line = '282';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Internal QS macro to insert an escaped byte into the QS buffer 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qs__pkg_8h_1abf73d66c1a2a355d50741e010f11b026';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QSpyRxRecords';
      enum-mem-enum = { enum-name = QS_RX_INFO; };
      enum-mem-enum = { enum-name = QS_RX_COMMAND; };
      enum-mem-enum = { enum-name = QS_RX_RESET; };
      enum-mem-enum = { enum-name = QS_RX_TICK; };
      enum-mem-enum = { enum-name = QS_RX_PEEK; };
      enum-mem-enum = { enum-name = QS_RX_POKE; };
      enum-mem-enum = { enum-name = QS_RX_FILL; };
      enum-mem-enum = { enum-name = QS_RX_TEST_SETUP; };
      enum-mem-enum = { enum-name = QS_RX_TEST_TEARDOWN; };
      enum-mem-enum = { enum-name = QS_RX_TEST_PROBE; };
      enum-mem-enum = { enum-name = QS_RX_GLB_FILTER; };
      enum-mem-enum = { enum-name = QS_RX_LOC_FILTER; };
      enum-mem-enum = { enum-name = QS_RX_AO_FILTER; };
      enum-mem-enum = { enum-name = QS_RX_CURR_OBJ; };
      enum-mem-enum = { enum-name = QS_RX_TEST_CONTINUE; };
      enum-mem-enum = { enum-name = QS_RX_QUERY_CURR; };
      enum-mem-enum = { enum-name = QS_RX_EVENT; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      enum-mem-desc-line = '46';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
QS received record types (RX channel)
\ilinebr\ilinebr 
This enumeration specifies the record types for the QS receive channel
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qs__pkg_8h_1a6d3dbd0bd84fde36212a27f95db3bba9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QS_target_info_pre_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'isReset';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      func-mem-desc-line = '87';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
send the predefined target info trace record
(object sizes, build time-stamp, QP version) 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qs__pkg_8h_1ae10b9ec063ffc60be8f71d3699c466c0';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QSrxPrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QS_rxPriv_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qs_pkg.h';
      var-mem-desc-line = '105';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qs_pkg.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Internal (package scope) QS/C interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qv_8c';
  file-name = 'qv.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qv_8c_1adac7eccb860d910c4e446d3143798bba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qv/qv.c';
      func-mem-desc-line = '66';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes QF and must be called exactly once before any other QF
function. Typically, QF_init() is called from main() even before
initializing the Board Support Package (BSP).

@note QF_init() clears the internal QF variables, so that the framework
can start correctly even if the startup code fails to clear the
uninitialized data (as is required by the C Standard).
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qv_8c_1adf9cb86740bf55c5ad55c1d44fd35921';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_stop';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qv/qv.c';
      func-mem-desc-line = '97';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function stops the QF application. After calling this function,
QF attempts to gracefully stop the application. This graceful shutdown
might take some time to complete. The typical use of this function is
for terminating the QF application to return back to the operating
system or for handling fatal errors that require shutting down
(and possibly re-setting) the system.

@attention
After calling QF_stop() the application must terminate and cannot
continue. In particular, QF_stop() is <strong>not</strong> intended to be followed
by a call to QF_init() to "resurrect" the application.

@sa QF_onCleanup()
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qv_8c_1a779a1bc9482e2d489dc87751cd100fdb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_run';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qv/qv.c';
      func-mem-desc-line = '110';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QF_run() is typically called from main() after you initialize
the QF and start at least one active object with QACTIVE_START().

@returns In QV, the QF_run() function does not return.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qv_8c_1a79d6304a4324086ed30a6f145625ab78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActive_start_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prio';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qLen';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSize';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qv/qv.c';
      func-mem-desc-line = '209';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Starts execution of the AO and registers the AO with the framework.
Also takes the top-most initial transition in the AO's state machine.
This initial transition is taken in the callee's thread of execution.

@param [in,out] me      pointer (see @ref oop)
@param [in]     prio    priority at which to start the active object
@param [in]     qSto    pointer to the storage for the ring buffer of the
                       event queue (used only with the built-in ::QEQueue)
@param [in]     qLen    length of the event queue [events]
@param [in]     stkSto  pointer to the stack storage (must be NULL in QV)
@param [in]     stkSize stack size [bytes]
@param [in]     par     pointer to an extra parameter (might be NULL).

@note This function should be called via the macro QACTIVE_START().

@par Usage
The following example shows starting an AO when a per-task stack is needed:
@include qf_start.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qv_8c_1a31027f058c905482b11cebdd7f594a0c';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QPSet
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QV_readySet_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qv/qv.c';
      var-mem-desc-line = '53';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
QV ready-set of AOs 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qv/qv.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Cooperative QV kernel, definition of QP::QV_readySet_ and
implementation of kernel-specific functions.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qxk_8c';
  file-name = 'qxk.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1adac7eccb860d910c4e446d3143798bba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '68';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes QF and must be called exactly once before any other QF
function. Typically, QF_init() is called from main() even before
initializing the Board Support Package (BSP).

@note QF_init() clears the internal QF variables, so that the framework
can start correctly even if the startup code fails to clear the
uninitialized data (as is required by the C Standard).
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1adf9cb86740bf55c5ad55c1d44fd35921';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_stop';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '108';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function stops the QF application. After calling this function,
QF attempts to gracefully stop the application. This graceful shutdown
might take some time to complete. The typical use of this function is
for terminating the QF application to return back to the operating
system or for handling fatal errors that require shutting down
(and possibly re-setting) the system.

@attention
After calling QF_stop() the application must terminate and cannot
continue. In particular, QF_stop() is <strong>not</strong> intended to be followed
by a call to QF_init() to "resurrect" the application.

@sa QF_onCleanup()
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1acdd3cebb48142880c0147c6f4eb3d131';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'initial_events';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '116';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
process all events posted during initialization 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1a779a1bc9482e2d489dc87751cd100fdb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QF_run';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '133';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
QF_run() is typically called from main() after you initialize
the QF and start at least one active object with QACTIVE_START().

@returns In QXK, the QF_run() function does not return.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1a79d6304a4324086ed30a6f145625ab78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QActive_start_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prio';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qLen';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSize';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '177';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Starts execution of the AO and registers the AO with the framework.
Also takes the top-most initial transition in the AO's state machine.
This initial transition is taken in the callee's thread of execution.

@param [in,out] me      pointer (see @ref oop)
@param [in]     prio    priority at which to start the active object
@param [in]     qSto    pointer to the storage for the ring buffer of the
                       event queue (used only with the built-in ::QEQueue)
@param [in]     qLen    length of the event queue [events]
@param [in]     stkSto  pointer to the stack storage (used only when
                       per-AO stack is needed)
@param [in]     stkSize stack size [bytes]
@param [in]     par     pointer to an extra parameter (might be NULL).

@note This function should be called via the macro QACTIVE_START().

@par Usage
The following example shows starting an AO when a per-task stack is needed:
@include qf_start.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1a5efc78d4b56e41d3da82c16c75e8887c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_schedLock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ceiling';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '241';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function locks the QXK scheduler to the specified ceiling.

@param [in]   ceiling    priority ceiling to which the QXK scheduler
                        needs to be locked

@returns
The previous QXK Scheduler lock status, which is to be used to unlock
the scheduler by restoring its previous lock status in QXK_schedUnlock().

@note
A QXK scheduler can be locked from both basic threads (AOs) and
extended threads and the scheduler locks can nest.

@note
QXK_schedLock() must be always followed by the corresponding
QXK_schedUnlock().

@attention
QXK will fire an assertion if a thread holding the lock attempts
to block.

@sa QXK_schedUnlock()

@par Usage
The following example shows how to lock and unlock the QXK scheduler:
@include qxk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1adb01b8714874aba54c19b68a76d1b9d5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_schedUnlock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSchedStatus
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stat';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '297';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlocks the QXK scheduler to the previous status.

@param [in]   stat       previous QXK Scheduler lock status returned from
                        QXK_schedLock()

@note
A QXK scheduler can be locked from both basic threads (AOs) and
extended threads and the scheduler locks can nest.

@note
QXK_schedUnlock() must always follow the corresponding QXK_schedLock().

@sa QXK_schedLock()

@par Usage
The following example shows how to lock and unlock the QXK scheduler:
@include qxk_lock.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1aca79db59710dd3f4863d6dfe97de7560';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_sched_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '345';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The QXK scheduler finds the priority of the highest-priority thread
that is ready to run.

@returns
the 1-based priority of the the thread (basic or extended) run next,
or zero if no eligible thread is found.

@attention
QXK_sched_() must be always called with interrupts <strong>disabled</strong> and
returns with interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1a6c1512e28d50b179aa627d74513cb242';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_activate_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '421';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@attention
QXK_activate_() must be always called with interrupts <strong>disabled</strong> and
returns with interrupts <strong>disabled</strong>.

@note
The activate function might enable interrupts internally, but it always
returns with interrupts <strong>disabled</strong>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk_8c_1a6fe41827615c8c6e2a045c16cb9d8ed5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
struct QActive *
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_current';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      func-mem-desc-line = '551';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
return the currently executing active-object/thread 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qxk_8c_1aad60bad4e7296ef118832aeb7ef8bb01';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
QXK_PrivAttr
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'QXK_attr_';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      var-mem-desc-line = '52';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
global attributes of the QXK kernel 
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'qxk_8c_1a0458880fea6279421c6acde673d48e3f';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static QActive
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'l_idleThread';
      var-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk.c';
      var-mem-desc-line = '55';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qxk/qxk.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QXK preemptive dual-mode kernel core functions.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qxk__mutex_8c';
  file-name = 'qxk_mutex.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__mutex_8c_1af446f227f03a1a71b5e064271b5da64f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXMutex_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ceiling';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_mutex.c';
      func-mem-desc-line = '80';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initialize the QXK priority ceiling mutex.

@param [in,out] me      pointer (see @ref oop)
@param [in]     ceiling the ceiling-priotity of this mutex or zero

@note
<tt>ceiling == 0</tt> means that the priority-ceiling protocol shall <strong>not</strong>
be used by this mutex. Such mutex will <strong>not</strong> change (boost) the
priority of the holding thread.

@note
<tt>ceiling \> 0</tt> means that the priority-ceiling protocol shall be used
by this mutex. Such mutex <strong>will</strong> boost the priority of the holding
thread to the <tt>ceiling</tt> level for as long as the thread holds this mutex.

@attention
When the priority-ceiling protocol is used (<tt>ceiling \> 0</tt>), the
<tt>ceiling</tt> priority must be unused by any other thread or mutex.
Also, the <tt>ceiling</tt> priority must be higher than priority of any thread
that uses this mutex.

@par Usage
@include qxk_mutex.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__mutex_8c_1a607a7442c8e54a46f404fcdf908cacf8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXMutex_lock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nTicks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_mutex.c';
      func-mem-desc-line = '127';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Lock the QXK priority ceiling mutex ::QXMutex.

@param [in,out] me      pointer (see @ref oop)
@param [in]  nTicks    number of clock ticks (at the associated rate)
                      to wait for the semaphore. The value of
                      QXTHREAD_NO_TIMEOUT indicates that no timeout will
                      occur and the semaphore will wait indefinitely.
@returns
'true' if the mutex has been acquired and 'false' if a timeout occured.

@note
The mutex locks are allowed to nest, meaning that the same extended thread
can lock the same mutex multiple times (< 255). However, each call to
QXMutex_lock() must be ballanced by the matching call to QXMutex_unlock().

@par Usage
@include qxk_mutex.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__mutex_8c_1a32649853d09120e9d1256f5d115acaa8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXMutex_tryLock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_mutex.c';
      func-mem-desc-line = '259';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Try to lock the QXK priority ceiling mutex ::QXMutex.

@param [in,out] me      pointer (see @ref oop)

@returns
'true' if the mutex was successfully locked and 'false' if the mutex was
unavailable and was NOT locked.

@note
This function <strong>can</strong> be called from both basic threads (active objects)
and extended threads.

@note
The mutex locks are allowed to nest, meaning that the same extended thread
can lock the same mutex multiple times (<= 225). However, each successful
call to QXMutex_tryLock() must be ballanced by the matching call to
QXMutex_unlock().
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__mutex_8c_1abc0780c17e77df45132fe218324bdf4f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXMutex_unlock';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXMutex *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_mutex.c';
      func-mem-desc-line = '347';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Unlock the QXK priority ceiling mutex.

@param [in,out] me      pointer (see @ref oop)

@note
This function <strong>can</strong> be called from both basic threads (active objects)
and extended threads.

@note
The mutex locks are allowed to nest, meaning that the same extended thread
can lock the same mutex multiple times (<= 225). However, each call to
QXMutex_lock() or a <em>successfull</em> call to QXMutex_tryLock() must be
ballanced by the matching call to QXMutex_unlock().

@par Usage
@include qxk_mutex.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qxk/qxk_mutex.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QXMutex_init(), QXMutex_lock(), QXMutex_tryLock() and
QXMutex_unlock() definitions.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qxk__sema_8c';
  file-name = 'qxk_sema.c';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__sema_8c_1a25c3d21c629fb4d36aedc9e127ae3c75';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXSemaphore_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'count';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'max_count';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_sema.c';
      func-mem-desc-line = '72';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes a semaphore with the specified count and maximum count.
If the semaphore is used for resource sharing, both the initial count
and maximum count should be set to the number of identical resources
guarded by the semaphore. If the semaphore is used as a signaling
mechanism, the initial count should set to 0 and maximum count to 1
(binary semaphore).

@param [in,out] me     pointer (see @ref oop)
@param [in]     count  initial value of the semaphore counter
@param [in]     max_count  maximum value of the semaphore counter.
               The purpose of the max_count is to limit the counter
               so that the semaphore cannot unblock more times than
               the maximum.

@note
QXSemaphore_init() must be called <strong>before</strong> the semaphore can be used
(signaled or waited on).
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__sema_8c_1a93c62839759971359392742618d58e70';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXSemaphore_wait';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nTicks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_sema.c';
      func-mem-desc-line = '107';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
When an extended thread calls QXSemaphore_wait() and the value of the
semaphore counter is greater than 0, QXSemaphore_wait() decrements the
semaphore counter and returns (true) to its caller. However, if the value
of the semaphore counter is 0, the function places the calling thread in
the waiting list for the semaphore. The thread waits until the semaphore
is signaled by calling QXSemaphore_signal(), or the specified timeout
expires. If the semaphore is signaled before the timeout expires, QXK
resumes the highest-priority extended thread waiting for the semaphore.

@param [in,out] me     pointer (see @ref oop)
@param [in]     nTicks number of clock ticks (at the associated rate)
                      to wait for the semaphore. The value of
                      QXTHREAD_NO_TIMEOUT indicates that no timeout will
                      occur and the semaphore will wait indefinitely.

@returns
'true' if the semaphore has been signaled and 'false' if a timeout occured.

@note
Multiple extended threads can wait for a given semahpre.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__sema_8c_1a7caf16a6092236c4118adfc2ed52cb02';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXSemaphore_tryWait';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_sema.c';
      func-mem-desc-line = '192';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function checks if the semaphore counter is greater than 0,
in which case the counter is decremented.

@param [in,out] me     pointer (see @ref oop)

@returns
'true' if the semaphore has count available and 'false' NOT available.

@note
This function can be called from any context, including ISRs and basic
threds (active objects).
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__sema_8c_1a0a42fa24556ea0d0a203d28555b70108';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXSemaphore_signal';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXSemaphore *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_sema.c';
      func-mem-desc-line = '233';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
If the semaphore counter value is 0 or more, it is incremented, and
this function returns to its caller. If the extended threads are waiting
for the semaphore to be signaled, QXSemaphore_signal() removes the highest-
priority thread waiting for the semaphore from the waiting list and makes
this thread ready-to-run. The QXK scheduler is then called to determine if
the awakened thread is now the highest-priority thread that is ready-to-run.

@param [in,out] me     pointer (see @ref oop)

@returns
'true' when the semaphore signaled and 'false' when the semaphore count
exceeded the maximum.

@note
A semaphore can be signaled from many places, including from ISRs, basic
threads (AOs), and extended threads.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qxk/qxk_sema.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QXK preemptive kernel semaphore functions.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qxk__xthr_8c';
  file-name = 'qxk_xthr.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk__xthr_8c_1abff0d3d5f49192944760417752acef98';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXTHREAD_CAST_';
      define-mem-param  = {
        define-mem-def-name = 'ptr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((QXThread *)(ptr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
intertnal macro to encapsulate casting of pointers for MISRA deviations 


\ilinebr\ilinebr 
This macro is specifically and exclusively used for downcasting pointers
to QActive to pointers to QXThread in situations when it is known
that such downcasting is correct.However, such pointer casting is not
compliant with MISRA-2012-Rule 11.3(req) as well as other messages (e.g.,
PC-Lint-Plus warning 826). Defining this specific macro for this purpose
allows to selectively disable the warnings for this particular case.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a97a0636ef32ec073347fffd4ceb7e06d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_init_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '136';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a42d9dd3ad35aaf418a10c4f117190171';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_dispatch_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QHsm *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qs_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '152';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1af8b0b36c0cf962e78685a59215f3537b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_post_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'margin';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sender';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '276';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Direct event posting is the simplest asynchronous communication method
available in QF. The following example illustrates how the Philo active
object posts directly the HUNGRY event to the Table active object.@n
@n
The parameter @p margin specifies the minimum number of free slots in
the queue that must be available for posting to succeed. The function
returns 1 (success) if the posting succeeded (with the provided margin)
and 0 (failure) when the posting fails.

@param [in,out] me     pointer (see @ref oop)
@param [in]     e      pointer to the event to be posted
@param [in]     margin number of required free slots in the queue after
                      posting the event. The special value #QF_NO_MARGIN
                      means that this function will assert if posting fails.
@param [in]     sender pointer to a sender object (used only for QS tracing).

@returns
'true' (success) if the posting succeeded (with the provided margin) and
'false' (failure) when the posting fails.

@note
Should be called only via the macro QXTHREAD_POST_X().

@note
The #QF_NO_MARGIN value of the @p margin parameter is special and
denotes situation when the post() operation is assumed to succeed
(event delivery guarantee). An assertion fires, when the event cannot
be delivered in this case.

@note
For compatibility with the V-table from the superclass ::QActive, the
me-pointer is typed as pointing to QActive. However, the @p me pointer
here actually points to the QXThread subclass. Therefore the downcast
(QXThread *)me is always correct.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a9ccacb7c750e1f8cf46f908ea6e1a923';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_postLIFO_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'e';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '423';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Last-In-First-Out (LIFO) policy is not supported for extened threads.

@param [in] me pointer (see @ref oop)
@param [in] e  pointer to the event to post to the queue

@sa
QActive_postLIFO_()
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a70ca3a3ea8c79b1f3b2e79659bd4ce73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_start_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QActive *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'prio';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QEvt const **const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qLen';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSize';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'par';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '189';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Starts execution of an extended thread and registers it with the framework.
The extended thread becomes ready-to-run immediately and is scheduled
if the QXK is already running.

@param [in,out] me      pointer (see @ref oop)
@param [in]     prio    priority at which to start the extended thread
@param [in]     qSto    pointer to the storage for the ring buffer of the
                       event queue. This cold be NULL, if this extended
                       thread does not use the built-in event queue.
@param [in]     qLen    length of the event queue [in events],
                       or zero if queue not used
@param [in]     stkSto  pointer to the stack storage (must be provided)
@param [in]     stkSize stack size [in bytes] (must not be zero)
@param [in]     par     pointer to an extra parameter (might be NULL).

@note
Should be called via the macro QXTHREAD_START().

@par Usage
The following example shows starting an extended thread:
@include qxk_start.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a8307d81827e59120494adddde980bf7c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_ctor';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThreadHandler
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'tickRate';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '105';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Performs the first step of QXThread initialization by assigning the
thread-handler function and the tick rate at which it will handle
the timeouts.

@param [in,out] me       pointer (see @ref oop)
@param [in]     handler  the thread-handler function
@param [in]     tickRate the ticking rate for timeouts in this thread
               (see QXThread_delay() and QF_TICK_X())

@note
Must be called only ONCE before QXTHREAD_START().

@par Usage
The following example illustrates how to invoke QXThread_ctor() in the
main() function

@include
qxk_thread_ctor.c
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1acf510414216f5025ddefdc677f3b92c7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
QEvt const *
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_queueGet';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nTicks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '449';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The QXThread_queueGet() operation allows the calling extended thread to
receive QP events directly into its own built-in event queue from an ISR,
basic thread (AO), or another extended thread.

If QXThread_queueGet() is called when no events are present in the
thread's private event queue, the operation blocks the current extended
thread until either an event is received, or a user-specified timeout
expires.

@param [in]  nTicks    number of clock ticks (at the associated rate)
                      to wait for the event to arrive. The value of
                      QXTHREAD_NO_TIMEOUT indicates that no timeout will
                      occur and the queue will block indefinitely.
@returns
A pointer to the event. If the pointer is not NULL, the event was delivered.
Otherwise the event pointer of NULL indicates that the queue has timed out.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a227acd3579e03d1d985e4f78ce2210d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_block_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '542';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Intenral implementation of blocking the given extended thread.

@note
Must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1ab03eb8645c4f12d190bbf5f4ed13fdc0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_unblock_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '558';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Intenral implementation of un-blocking the given extended thread.

@note
must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1af477e6a98fa5b874f4a4c95bd0f03758';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_teArm_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSignal
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sig';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nTicks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '576';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Intenral implementation of arming the private time event for a given
timeout at a given system tick rate.

@note
Must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1aa09a0870f154da15c0b02ada8fefaf0b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_teDisarm_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '622';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Intenral implementation of disarming the private time event.

@note
Must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a3359902949e88279aea2760bb6c41e32';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_delay';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nTicks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '650';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
delay (timed blocking of) the current thread (static, no me-ptr)
\ilinebr\ilinebr 
Blocking delay for the number of clock tick at the associated tick rate.

@param [in]  nTicks    number of clock ticks (at the associated rate)
                      to wait for the event to arrive.
@note
For the delay to work, the QF_TICK_X() macro needs to be called
periodicially at the associated clock tick rate.

@sa QXThread_ctor()
@sa QF_TICK_X()
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1ab77e9607b3a59a6b655d8635d83db3e4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_delayCancel';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '699';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
cancel the delay
\ilinebr\ilinebr 
Cancel the blocking delay and cause return from the QXThread_delay()
function.

@returns
"true" if the thread was actually blocked on QXThread_delay() and
"false" otherwise.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__xthr_8c_1a360d1db9e1dacf58ca45398b6210b326';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_threadRet_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
      func-mem-desc-line = '727';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Called when the extended-thread handler function returns.

@note
Most thread handler functions are structured as endless loops that never
return. But it is also possible to structure threads as one-shot functions
that perform their job and return. In that case this function peforms
cleanup after the thread.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qxk/qxk_xthr.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
QXK preemptive kernel extended (blocking) thread functions.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'qxk__pkg_8h';
  file-name = 'qxk_pkg.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'qxk__pkg_8h_1ac1c2a755f2e80f4ded28438fa8aab9eb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'QXK_PTR_CAST_';
      define-mem-param  = {
        define-mem-def-name = 'type_';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ptr_';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((type_)(ptr_))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      define-mem-desc-line = '82';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
intertnal macro to encapsulate casting of pointers for MISRA deviations\ilinebr\ilinebr 
This macro is specifically and exclusively used for casting pointers
that are never de-referenced, but only used for internal bookkeeping and
checking (via assertions) the correct operation of the QXK kernel.
Such pointer casting is not compliant with MISRA-2012-Rule 11.3(req)
as well as other messages (e.g., PC-Lint-Plus warning 826).
Defining this specific macro for this purpose allows to selectively
disable the warnings for this particular case.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'qxk__pkg_8h_1afa93fadd2ac8a94d28b86289ffcbfd19';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'QXK_Timeouts';
      enum-mem-enum = { enum-name = QXK_DELAY_SIG; enum-value = '= Q_USER_SIG'; };
      enum-mem-enum = { enum-name = QXK_QUEUE_SIG; };
      enum-mem-enum = { enum-name = QXK_SEMA_SIG; };
      enum-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      enum-mem-desc-line = '51';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
timeout signals 
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__pkg_8h_1ad6f8a00656922c0e392710c7471d5313';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_start_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      func-mem-desc-line = '41';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal QXK function to start multitasking (typically in assembly) 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__pkg_8h_1a0c372eb77df463f093f6d55940874d2c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_stackInit_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'thr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThreadHandler const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSto';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stkSize';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      func-mem-desc-line = '44';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
initialize the private stack of a given QXThread 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__pkg_8h_1a360d1db9e1dacf58ca45398b6210b326';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXK_threadRet_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      func-mem-desc-line = '48';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
called when a thread function returns 

Called when the extended-thread handler function returns.

@note
Most thread handler functions are structured as endless loops that never
return. But it is also possible to structure threads as one-shot functions
that perform their job and return. In that case this function peforms
cleanup after the thread.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__pkg_8h_1a227acd3579e03d1d985e4f78ce2210d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_block_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      func-mem-desc-line = '58';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal functin to block (suspend) a given extended thread 

Intenral implementation of blocking the given extended thread.

@note
Must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__pkg_8h_1ab03eb8645c4f12d190bbf5f4ed13fdc0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_unblock_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread const *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      func-mem-desc-line = '61';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal function to unblock (resume) a given extended thread. 

Intenral implementation of un-blocking the given extended thread.

@note
must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__pkg_8h_1af477e6a98fa5b874f4a4c95bd0f03758';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_teArm_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QSignal
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sig';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint_fast16_t const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nTicks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      func-mem-desc-line = '64';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal function to arm the private time event for a given thread. 

Intenral implementation of arming the private time event for a given
timeout at a given system tick rate.

@note
Must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'qxk__pkg_8h_1aa09a0870f154da15c0b02ada8fefaf0b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'QXThread_teDisarm_';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
QXThread *const
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'me';
      }; /*        func-mem-param--param */
      func-mem-desc-file = 'C:/qp-dev/qpc/src/qxk_pkg.h';
      func-mem-desc-line = '69';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
internal function to disarm the private time event for a given thread. 

Intenral implementation of disarming the private time event.

@note
Must be called from within a critical section
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = 'C:/qp-dev/qpc/src/qxk_pkg.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Internal (package scope) QXK/C interface.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
@date Last updated on: 2021-12-23
@version Last updated for: @ref qpc_7_0_0
_EnD_oF_dEf_TeXt_;
}; /* file */
